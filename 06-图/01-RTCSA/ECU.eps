%!PS-Adobe-3.1 EPSF-3.0
%ADO_DSC_Encoding: Windows Roman
%%Title: ECU.pdf
%%Creator: Adobe Acrobat 23.1.0
%%For: wsf
%%CreationDate: 2023/4/24, 23:20:11
%%BoundingBox: 0 0 282 121
%%HiResBoundingBox: 0 0 282 120.9600
%%CropBox: 0 0 282 120.9600
%%LanguageLevel: 2
%%DocumentNeededResources: (atend)
%%DocumentSuppliedResources: (atend)
%%DocumentNeededFeatures: (atend)
%%DocumentSuppliedFeatures: (atend)
%%DocumentData: Clean7Bit
%%Pages: (atend)
%%DocumentProcessColors:  Cyan Magenta Yellow Black
%%DocumentCustomColors: (atend)
%%EndComments
%%BeginDefaults
%%ViewingOrientation: 1 0 0 1
%%EndDefaults
%%BeginProlog
%%BeginResource: procset Adobe_AGM_Utils 1.0 0
%%Version: 1.0 0
%%Copyright: Copyright(C)2000-2006 Adobe Systems, Inc. All Rights Reserved.
systemdict/setpacking known
{currentpacking	true setpacking}if
userdict/Adobe_AGM_Utils 75 dict dup begin put
/bdf
{bind def}bind def
/nd{null def}bdf
/xdf
{exch def}bdf
/ldf 
{load def}bdf
/ddf
{put}bdf	
/xddf
{3 -1 roll put}bdf	
/xpt
{exch put}bdf
/ndf
{
	exch dup where{
		pop pop pop
	}{
		xdf
	}ifelse
}def
/cdndf
{
	exch dup currentdict exch known{
		pop pop
	}{
		exch def
	}ifelse
}def
/gx
{get exec}bdf
/ps_level
	/languagelevel where{
		pop systemdict/languagelevel gx
	}{
		1
	}ifelse
def
/level2 
	ps_level 2 ge
def
/level3 
	ps_level 3 ge
def
/ps_version
	{version cvr}stopped{-1}if
def
/set_gvm
{currentglobal exch setglobal}bdf
/reset_gvm
{setglobal}bdf
/makereadonlyarray
{
	/packedarray where{pop packedarray
	}{
		array astore readonly}ifelse
}bdf
/map_reserved_ink_name
{
	dup type/stringtype eq{
		dup/Red eq{
			pop(_Red_)
		}{
			dup/Green eq{
				pop(_Green_)
			}{
				dup/Blue eq{
					pop(_Blue_)
				}{
					dup()cvn eq{
						pop(Process)
					}if
				}ifelse
			}ifelse
		}ifelse
	}if
}bdf
/AGMUTIL_GSTATE 22 dict def
/get_gstate
{
	AGMUTIL_GSTATE begin
	/AGMUTIL_GSTATE_clr_spc currentcolorspace def
	/AGMUTIL_GSTATE_clr_indx 0 def
	/AGMUTIL_GSTATE_clr_comps 12 array def
	mark currentcolor counttomark
		{AGMUTIL_GSTATE_clr_comps AGMUTIL_GSTATE_clr_indx 3 -1 roll put
		/AGMUTIL_GSTATE_clr_indx AGMUTIL_GSTATE_clr_indx 1 add def}repeat pop
	/AGMUTIL_GSTATE_fnt rootfont def
	/AGMUTIL_GSTATE_lw currentlinewidth def
	/AGMUTIL_GSTATE_lc currentlinecap def
	/AGMUTIL_GSTATE_lj currentlinejoin def
	/AGMUTIL_GSTATE_ml currentmiterlimit def
	currentdash/AGMUTIL_GSTATE_do xdf/AGMUTIL_GSTATE_da xdf
	/AGMUTIL_GSTATE_sa currentstrokeadjust def
	/AGMUTIL_GSTATE_clr_rnd currentcolorrendering def
	/AGMUTIL_GSTATE_op currentoverprint def
	/AGMUTIL_GSTATE_bg currentblackgeneration cvlit def
	/AGMUTIL_GSTATE_ucr currentundercolorremoval cvlit def
	currentcolortransfer cvlit/AGMUTIL_GSTATE_gy_xfer xdf cvlit/AGMUTIL_GSTATE_b_xfer xdf
		cvlit/AGMUTIL_GSTATE_g_xfer xdf cvlit/AGMUTIL_GSTATE_r_xfer xdf
	/AGMUTIL_GSTATE_ht currenthalftone def
	/AGMUTIL_GSTATE_flt currentflat def
	end
}def
/set_gstate
{
	AGMUTIL_GSTATE begin
	AGMUTIL_GSTATE_clr_spc setcolorspace
	AGMUTIL_GSTATE_clr_indx{AGMUTIL_GSTATE_clr_comps AGMUTIL_GSTATE_clr_indx 1 sub get
	/AGMUTIL_GSTATE_clr_indx AGMUTIL_GSTATE_clr_indx 1 sub def}repeat setcolor
	AGMUTIL_GSTATE_fnt setfont
	AGMUTIL_GSTATE_lw setlinewidth
	AGMUTIL_GSTATE_lc setlinecap
	AGMUTIL_GSTATE_lj setlinejoin
	AGMUTIL_GSTATE_ml setmiterlimit
	AGMUTIL_GSTATE_da AGMUTIL_GSTATE_do setdash
	AGMUTIL_GSTATE_sa setstrokeadjust
	AGMUTIL_GSTATE_clr_rnd setcolorrendering
	AGMUTIL_GSTATE_op setoverprint
	AGMUTIL_GSTATE_bg cvx setblackgeneration
	AGMUTIL_GSTATE_ucr cvx setundercolorremoval
	AGMUTIL_GSTATE_r_xfer cvx AGMUTIL_GSTATE_g_xfer cvx AGMUTIL_GSTATE_b_xfer cvx
		AGMUTIL_GSTATE_gy_xfer cvx setcolortransfer
	AGMUTIL_GSTATE_ht/HalftoneType get dup 9 eq exch 100 eq or
		{
		currenthalftone/HalftoneType get AGMUTIL_GSTATE_ht/HalftoneType get ne
			{
			 mark AGMUTIL_GSTATE_ht{sethalftone}stopped cleartomark
			}if
		}{
		AGMUTIL_GSTATE_ht sethalftone
		}ifelse
	AGMUTIL_GSTATE_flt setflat
	end
}def
/get_gstate_and_matrix
{
	AGMUTIL_GSTATE begin
	/AGMUTIL_GSTATE_ctm matrix currentmatrix def
	end
	get_gstate
}def
/set_gstate_and_matrix
{
	set_gstate
	AGMUTIL_GSTATE begin
	AGMUTIL_GSTATE_ctm setmatrix
	end
}def
/AGMUTIL_str256 256 string def
/AGMUTIL_src256 256 string def
/AGMUTIL_dst64 64 string def
/AGMUTIL_srcLen nd
/AGMUTIL_ndx nd
/AGMUTIL_cpd nd
/capture_cpd{
	//Adobe_AGM_Utils/AGMUTIL_cpd currentpagedevice ddf
}def
/thold_halftone
{
	level3
		{sethalftone currenthalftone}
		{
			dup/HalftoneType get 3 eq
			{
				sethalftone currenthalftone
			}{
				begin
				Width Height mul{
					Thresholds read{pop}if
				}repeat
				end
				currenthalftone
			}ifelse
		}ifelse
}def 
/rdcmntline
{
	currentfile AGMUTIL_str256 readline pop
	(%)anchorsearch{pop}if
}bdf
/filter_cmyk
{	
	dup type/filetype ne{
		exch()/SubFileDecode filter
	}{
		exch pop
	}
	ifelse
	[
	exch
	{
		AGMUTIL_src256 readstring pop
		dup length/AGMUTIL_srcLen exch def
		/AGMUTIL_ndx 0 def
		AGMCORE_plate_ndx 4 AGMUTIL_srcLen 1 sub{
			1 index exch get
			AGMUTIL_dst64 AGMUTIL_ndx 3 -1 roll put
			/AGMUTIL_ndx AGMUTIL_ndx 1 add def
		}for
		pop
		AGMUTIL_dst64 0 AGMUTIL_ndx getinterval
	}
	bind
	/exec cvx
	]cvx
}bdf
/filter_indexed_devn
{
	cvi Names length mul names_index add Lookup exch get
}bdf
/filter_devn
{	
	4 dict begin
	/srcStr xdf
	/dstStr xdf
	dup type/filetype ne{
		0()/SubFileDecode filter
	}if
	[
	exch
		[
			/devicen_colorspace_dict/AGMCORE_gget cvx/begin cvx
			currentdict/srcStr get/readstring cvx/pop cvx
			/dup cvx/length cvx 0/gt cvx[
				Adobe_AGM_Utils/AGMUTIL_ndx 0/ddf cvx
				names_index Names length currentdict/srcStr get length 1 sub{
					1/index cvx/exch cvx/get cvx
					currentdict/dstStr get/AGMUTIL_ndx/load cvx 3 -1/roll cvx/put cvx
					Adobe_AGM_Utils/AGMUTIL_ndx/AGMUTIL_ndx/load cvx 1/add cvx/ddf cvx
				}for
				currentdict/dstStr get 0/AGMUTIL_ndx/load cvx/getinterval cvx
			]cvx/if cvx
			/end cvx
		]cvx
		bind
		/exec cvx
	]cvx
	end
}bdf
/AGMUTIL_imagefile nd
/read_image_file
{
	AGMUTIL_imagefile 0 setfileposition
	10 dict begin
	/imageDict xdf
	/imbufLen Width BitsPerComponent mul 7 add 8 idiv def
	/imbufIdx 0 def
	/origDataSource imageDict/DataSource get def
	/origMultipleDataSources imageDict/MultipleDataSources get def
	/origDecode imageDict/Decode get def
	/dstDataStr imageDict/Width get colorSpaceElemCnt mul string def
	imageDict/MultipleDataSources known{MultipleDataSources}{false}ifelse
	{
		/imbufCnt imageDict/DataSource get length def
		/imbufs imbufCnt array def
		0 1 imbufCnt 1 sub{
			/imbufIdx xdf
			imbufs imbufIdx imbufLen string put
			imageDict/DataSource get imbufIdx[AGMUTIL_imagefile imbufs imbufIdx get/readstring cvx/pop cvx]cvx put
		}for
		DeviceN_PS2{
			imageDict begin
		 	/DataSource[DataSource/devn_sep_datasource cvx]cvx def
			/MultipleDataSources false def
			/Decode[0 1]def
			end
		}if
	}{
		/imbuf imbufLen string def
		Indexed_DeviceN level3 not and DeviceN_NoneName or{
			/srcDataStrs[imageDict begin
				currentdict/MultipleDataSources known{MultipleDataSources{DataSource length}{1}ifelse}{1}ifelse
				{
					Width Decode length 2 div mul cvi string
				}repeat
				end]def		
			imageDict begin
		 	/DataSource[AGMUTIL_imagefile Decode BitsPerComponent false 1/filter_indexed_devn load dstDataStr srcDataStrs devn_alt_datasource/exec cvx]cvx def
			/Decode[0 1]def
			end
		}{
			imageDict/DataSource[1 string dup 0 AGMUTIL_imagefile Decode length 2 idiv string/readstring cvx/pop cvx names_index/get cvx/put cvx]cvx put
			imageDict/Decode[0 1]put
		}ifelse
	}ifelse
	imageDict exch
	load exec
	imageDict/DataSource origDataSource put
	imageDict/MultipleDataSources origMultipleDataSources put
	imageDict/Decode origDecode put	
	end
}bdf
/write_image_file
{
	begin
	{(AGMUTIL_imagefile)(w+)file}stopped{
		false
	}{
		Adobe_AGM_Utils/AGMUTIL_imagefile xddf 
		2 dict begin
		/imbufLen Width BitsPerComponent mul 7 add 8 idiv def
		MultipleDataSources{DataSource 0 get}{DataSource}ifelse type/filetype eq{
			/imbuf imbufLen string def
		}if
		1 1 Height MultipleDataSources not{Decode length 2 idiv mul}if{
			pop
			MultipleDataSources{
			 	0 1 DataSource length 1 sub{
					DataSource type dup
					/arraytype eq{
						pop DataSource exch gx
					}{
						/filetype eq{
							DataSource exch get imbuf readstring pop
						}{
							DataSource exch get
						}ifelse
					}ifelse
					AGMUTIL_imagefile exch writestring
				}for
			}{
				DataSource type dup
				/arraytype eq{
					pop DataSource exec
				}{
					/filetype eq{
						DataSource imbuf readstring pop
					}{
						DataSource
					}ifelse
				}ifelse
				AGMUTIL_imagefile exch writestring
			}ifelse
		}for
		end
		true
	}ifelse
	end
}bdf
/close_image_file
{
	AGMUTIL_imagefile closefile(AGMUTIL_imagefile)deletefile
}def
statusdict/product known userdict/AGMP_current_show known not and{
	/pstr statusdict/product get def
	pstr(HP LaserJet 2200)eq 	
	pstr(HP LaserJet 4000 Series)eq or
	pstr(HP LaserJet 4050 Series )eq or
	pstr(HP LaserJet 8000 Series)eq or
	pstr(HP LaserJet 8100 Series)eq or
	pstr(HP LaserJet 8150 Series)eq or
	pstr(HP LaserJet 5000 Series)eq or
	pstr(HP LaserJet 5100 Series)eq or
	pstr(HP Color LaserJet 4500)eq or
	pstr(HP Color LaserJet 4600)eq or
	pstr(HP LaserJet 5Si)eq or
	pstr(HP LaserJet 1200 Series)eq or
	pstr(HP LaserJet 1300 Series)eq or
	pstr(HP LaserJet 4100 Series)eq or 
	{
 		userdict/AGMP_current_show/show load put
		userdict/show{
		 currentcolorspace 0 get
		 /Pattern eq
		 {false charpath f}
		 {AGMP_current_show}ifelse
		}put
	}if
	currentdict/pstr undef
}if
/consumeimagedata
{
	begin
	AGMIMG_init_common
	currentdict/MultipleDataSources known not
		{/MultipleDataSources false def}if
	MultipleDataSources
		{
		DataSource 0 get type
		dup/filetype eq
			{
			1 dict begin
			/flushbuffer Width cvi string def
			1 1 Height cvi
				{
				pop
				0 1 DataSource length 1 sub
					{
					DataSource exch get
					flushbuffer readstring pop pop
					}for
				}for
			end
			}if
		dup/arraytype eq exch/packedarraytype eq or DataSource 0 get xcheck and
			{
			Width Height mul cvi
				{
				0 1 DataSource length 1 sub
					{dup DataSource exch gx length exch 0 ne{pop}if}for
				dup 0 eq
					{pop exit}if
				sub dup 0 le
					{exit}if
				}loop
			pop
			}if		
		}
		{
		/DataSource load type 
		dup/filetype eq
			{
			1 dict begin
			/flushbuffer Width Decode length 2 idiv mul cvi string def
			1 1 Height{pop DataSource flushbuffer readstring pop pop}for
			end
			}if
		dup/arraytype eq exch/packedarraytype eq or/DataSource load xcheck and
			{
				Height Width BitsPerComponent mul 8 BitsPerComponent sub add 8 idiv Decode length 2 idiv mul mul
					{
					DataSource length dup 0 eq
						{pop exit}if
					sub dup 0 le
						{exit}if
					}loop
				pop
			}if
		}ifelse
	end
}bdf
/addprocs
{
	 2{/exec load}repeat
	 3 1 roll
	 [5 1 roll]bind cvx
}def
/modify_halftone_xfer
{
	currenthalftone dup length dict copy begin
	 currentdict 2 index known{
	 	1 index load dup length dict copy begin
		currentdict/TransferFunction known{
			/TransferFunction load
		}{
			currenttransfer
		}ifelse
		 addprocs/TransferFunction xdf 
		 currentdict end def
		currentdict end sethalftone
	}{
		currentdict/TransferFunction known{
			/TransferFunction load 
		}{
			currenttransfer
		}ifelse
		addprocs/TransferFunction xdf
		currentdict end sethalftone		
		pop
	}ifelse
}def
/clonearray
{
	dup xcheck exch
	dup length array exch
	Adobe_AGM_Core/AGMCORE_tmp -1 ddf 
	{
	Adobe_AGM_Core/AGMCORE_tmp 2 copy get 1 add ddf 
	dup type/dicttype eq
		{
			Adobe_AGM_Core/AGMCORE_tmp get
			exch
			clonedict
			Adobe_AGM_Core/AGMCORE_tmp 4 -1 roll ddf 
		}if
	dup type/arraytype eq
		{
			Adobe_AGM_Core/AGMCORE_tmp get exch
			clonearray
			Adobe_AGM_Core/AGMCORE_tmp 4 -1 roll ddf 
		}if
	exch dup
	Adobe_AGM_Core/AGMCORE_tmp get 4 -1 roll put
	}forall
	exch{cvx}if
}bdf
/clonedict
{
	dup length dict
	begin
	{
		dup type/dicttype eq
			{clonedict}if
		dup type/arraytype eq
			{clonearray}if
		def
	}forall
	currentdict
	end
}bdf
/DeviceN_PS2
{
	/currentcolorspace AGMCORE_gget 0 get/DeviceN eq level3 not and
}bdf
/Indexed_DeviceN
{
	/indexed_colorspace_dict AGMCORE_gget dup null ne{
		dup/CSDBase known{
			/CSDBase get/CSD get_res/Names known 
		}{
			pop false
		}ifelse
	}{
		pop false
	}ifelse
}bdf
/DeviceN_NoneName
{	
	/Names where{
		pop
		false Names
		{
			(None)eq or
		}forall
	}{
		false
	}ifelse
}bdf
/DeviceN_PS2_inRip_seps
{
	/AGMCORE_in_rip_sep where
	{
		pop dup type dup/arraytype eq exch/packedarraytype eq or
		{
			dup 0 get/DeviceN eq level3 not and AGMCORE_in_rip_sep and
			{
				/currentcolorspace exch AGMCORE_gput
				false
			}{
				true
			}ifelse
		}{
			true
		}ifelse
	}{
		true
	}ifelse
}bdf
/base_colorspace_type
{
	dup type/arraytype eq{0 get}if
}bdf
/currentdistillerparams where{pop currentdistillerparams/CoreDistVersion get 5000 lt}{true}ifelse
{
	/pdfmark_5{cleartomark}bind def
}{
	/pdfmark_5{pdfmark}bind def
}ifelse
/ReadBypdfmark_5
{
	currentfile exch 0 exch/SubFileDecode filter
	/currentdistillerparams where 
	{pop currentdistillerparams/CoreDistVersion get 5000 lt}{true}ifelse
	{flushfile cleartomark}
	{/PUT pdfmark}ifelse 	
}bdf
/ReadBypdfmark_5_string
{
	2 dict begin
	/makerString exch def string/tmpString exch def
	{
		currentfile tmpString readline not{pop exit}if
		makerString anchorsearch
		{
			pop pop cleartomark exit
		}{
			3 copy/PUT pdfmark_5 pop 2 copy(\n)/PUT pdfmark_5
		}ifelse
	}loop
	end
}bdf
/xpdfm
{
	{
		dup 0 get/Label eq
		{
			aload length[exch 1 add 1 roll/PAGELABEL
		}{
			aload pop
			[{ThisPage}<<5 -2 roll>>/PUT
		}ifelse
		pdfmark_5
	}forall
}bdf
/lmt{
	dup 2 index le{exch}if pop dup 2 index ge{exch}if pop
}bdf
/int{
	dup 2 index sub 3 index 5 index sub div 6 -2 roll sub mul exch pop add exch pop
}bdf
/ds{
	Adobe_AGM_Utils begin
}bdf
/dt{
	currentdict Adobe_AGM_Utils eq{
		end
	}if
}bdf
systemdict/setpacking known
{setpacking}if
%%EndResource
%%BeginResource: procset Adobe_AGM_Core 2.0 0
%%Version: 2.0 0
%%Copyright: Copyright(C)1997-2007 Adobe Systems, Inc. All Rights Reserved.
systemdict/setpacking known
{
	currentpacking
	true setpacking
}if
userdict/Adobe_AGM_Core 209 dict dup begin put
/Adobe_AGM_Core_Id/Adobe_AGM_Core_2.0_0 def
/AGMCORE_str256 256 string def
/AGMCORE_save nd
/AGMCORE_graphicsave nd
/AGMCORE_c 0 def
/AGMCORE_m 0 def
/AGMCORE_y 0 def
/AGMCORE_k 0 def
/AGMCORE_cmykbuf 4 array def
/AGMCORE_screen[currentscreen]cvx def
/AGMCORE_tmp 0 def
/AGMCORE_&setgray nd
/AGMCORE_&setcolor nd
/AGMCORE_&setcolorspace nd
/AGMCORE_&setcmykcolor nd
/AGMCORE_cyan_plate nd
/AGMCORE_magenta_plate nd
/AGMCORE_yellow_plate nd
/AGMCORE_black_plate nd
/AGMCORE_plate_ndx nd
/AGMCORE_get_ink_data nd
/AGMCORE_is_cmyk_sep nd
/AGMCORE_host_sep nd
/AGMCORE_avoid_L2_sep_space nd
/AGMCORE_distilling nd
/AGMCORE_composite_job nd
/AGMCORE_producing_seps nd
/AGMCORE_ps_level -1 def
/AGMCORE_ps_version -1 def
/AGMCORE_environ_ok nd
/AGMCORE_CSD_cache 0 dict def
/AGMCORE_currentoverprint false def
/AGMCORE_deltaX nd
/AGMCORE_deltaY nd
/AGMCORE_name nd
/AGMCORE_sep_special nd
/AGMCORE_err_strings 4 dict def
/AGMCORE_cur_err nd
/AGMCORE_current_spot_alias false def
/AGMCORE_inverting false def
/AGMCORE_feature_dictCount nd
/AGMCORE_feature_opCount nd
/AGMCORE_feature_ctm nd
/AGMCORE_ConvertToProcess false def
/AGMCORE_Default_CTM matrix def
/AGMCORE_Default_PageSize nd
/AGMCORE_Default_flatness nd
/AGMCORE_currentbg nd
/AGMCORE_currentucr nd
/AGMCORE_pattern_paint_type 0 def
/knockout_unitsq nd
currentglobal true setglobal
[/CSA/Gradient/Procedure]
{
	/Generic/Category findresource dup length dict copy/Category defineresource pop
}forall
setglobal
/AGMCORE_key_known
{
	where{
		/Adobe_AGM_Core_Id known
	}{
		false
	}ifelse
}ndf
/flushinput
{
	save
	2 dict begin
	/CompareBuffer 3 -1 roll def
	/readbuffer 256 string def
	mark
	{
	currentfile readbuffer{readline}stopped
		{cleartomark mark}
		{
		not
			{pop exit}
		if
		CompareBuffer eq
			{exit}
		if
		}ifelse
	}loop
	cleartomark
	end
	restore
}bdf
/getspotfunction
{
	AGMCORE_screen exch pop exch pop
	dup type/dicttype eq{
		dup/HalftoneType get 1 eq{
			/SpotFunction get
		}{
			dup/HalftoneType get 2 eq{
				/GraySpotFunction get
			}{
				pop
				{
					abs exch abs 2 copy add 1 gt{
						1 sub dup mul exch 1 sub dup mul add 1 sub
					}{
						dup mul exch dup mul add 1 exch sub
					}ifelse
				}bind
			}ifelse
		}ifelse
	}if
}def
/np
{newpath}bdf
/clp_npth
{clip np}def
/eoclp_npth
{eoclip np}def
/npth_clp
{np clip}def
/graphic_setup
{
	/AGMCORE_graphicsave save store
	concat
	0 setgray
	0 setlinecap
	0 setlinejoin
	1 setlinewidth
	[]0 setdash
	10 setmiterlimit
	np
	false setoverprint
	false setstrokeadjust
	//Adobe_AGM_Core/spot_alias gx
	/Adobe_AGM_Image where{
		pop
		Adobe_AGM_Image/spot_alias 2 copy known{
			gx
		}{
			pop pop
		}ifelse
	}if
	/sep_colorspace_dict null AGMCORE_gput
	100 dict begin
	/dictstackcount countdictstack def
	/showpage{}def
	mark
}def
/graphic_cleanup
{
	cleartomark
	dictstackcount 1 countdictstack 1 sub{end}for
	end
	AGMCORE_graphicsave restore
}def
/compose_error_msg
{
	grestoreall initgraphics	
	/Helvetica findfont 10 scalefont setfont
	/AGMCORE_deltaY 100 def
	/AGMCORE_deltaX 310 def
	clippath pathbbox np pop pop 36 add exch 36 add exch moveto
	0 AGMCORE_deltaY rlineto AGMCORE_deltaX 0 rlineto
	0 AGMCORE_deltaY neg rlineto AGMCORE_deltaX neg 0 rlineto closepath
	0 AGMCORE_&setgray
	gsave 1 AGMCORE_&setgray fill grestore 
	1 setlinewidth gsave stroke grestore
	currentpoint AGMCORE_deltaY 15 sub add exch 8 add exch moveto
	/AGMCORE_deltaY 12 def
	/AGMCORE_tmp 0 def
	AGMCORE_err_strings exch get
		{
		dup 32 eq
			{
			pop
			AGMCORE_str256 0 AGMCORE_tmp getinterval
			stringwidth pop currentpoint pop add AGMCORE_deltaX 28 add gt
				{
				currentpoint AGMCORE_deltaY sub exch pop
				clippath pathbbox pop pop pop 44 add exch moveto
				}if
			AGMCORE_str256 0 AGMCORE_tmp getinterval show( )show
			0 1 AGMCORE_str256 length 1 sub
				{
				AGMCORE_str256 exch 0 put
				}for
			/AGMCORE_tmp 0 def
			}{
				AGMCORE_str256 exch AGMCORE_tmp xpt
				/AGMCORE_tmp AGMCORE_tmp 1 add def
			}ifelse
		}forall
}bdf
/AGMCORE_CMYKDeviceNColorspaces[
	[/Separation/None/DeviceCMYK{0 0 0}]
	[/Separation(Black)/DeviceCMYK{0 0 0 4 -1 roll}bind]
	[/Separation(Yellow)/DeviceCMYK{0 0 3 -1 roll 0}bind]
	[/DeviceN[(Yellow)(Black)]/DeviceCMYK{0 0 4 2 roll}bind]
	[/Separation(Magenta)/DeviceCMYK{0 exch 0 0}bind]
	[/DeviceN[(Magenta)(Black)]/DeviceCMYK{0 3 1 roll 0 exch}bind]
	[/DeviceN[(Magenta)(Yellow)]/DeviceCMYK{0 3 1 roll 0}bind]
	[/DeviceN[(Magenta)(Yellow)(Black)]/DeviceCMYK{0 4 1 roll}bind]
	[/Separation(Cyan)/DeviceCMYK{0 0 0}]
	[/DeviceN[(Cyan)(Black)]/DeviceCMYK{0 0 3 -1 roll}bind]
	[/DeviceN[(Cyan)(Yellow)]/DeviceCMYK{0 exch 0}bind]
	[/DeviceN[(Cyan)(Yellow)(Black)]/DeviceCMYK{0 3 1 roll}bind]
	[/DeviceN[(Cyan)(Magenta)]/DeviceCMYK{0 0}]
	[/DeviceN[(Cyan)(Magenta)(Black)]/DeviceCMYK{0 exch}bind]
	[/DeviceN[(Cyan)(Magenta)(Yellow)]/DeviceCMYK{0}]
	[/DeviceCMYK]
]def
/ds{
	Adobe_AGM_Core begin
	/currentdistillerparams where
		{
		pop currentdistillerparams/CoreDistVersion get 5000 lt
			{<</DetectBlends false>>setdistillerparams}if
		}if	
	/AGMCORE_ps_version xdf
	/AGMCORE_ps_level xdf
	errordict/AGM_handleerror known not{
		errordict/AGM_handleerror errordict/handleerror get put
		errordict/handleerror{
			Adobe_AGM_Core begin
			$error/newerror get AGMCORE_cur_err null ne and{
				$error/newerror false put
				AGMCORE_cur_err compose_error_msg
			}if
			$error/newerror true put
			end
			errordict/AGM_handleerror get exec
			}bind put
		}if
	/AGMCORE_environ_ok 
		ps_level AGMCORE_ps_level ge
		ps_version AGMCORE_ps_version ge and 
		AGMCORE_ps_level -1 eq or
	def
	AGMCORE_environ_ok not
		{/AGMCORE_cur_err/AGMCORE_bad_environ def}if
	/AGMCORE_&setgray systemdict/setgray get def
	level2{
		/AGMCORE_&setcolor systemdict/setcolor get def
		/AGMCORE_&setcolorspace systemdict/setcolorspace get def
	}if
	/AGMCORE_currentbg currentblackgeneration def
	/AGMCORE_currentucr currentundercolorremoval def
	/AGMCORE_Default_flatness currentflat def
	/AGMCORE_distilling
		/product where{
			pop systemdict/setdistillerparams known product(Adobe PostScript Parser)ne and
		}{
			false
		}ifelse
	def
	/AGMCORE_GSTATE AGMCORE_key_known not{
		/AGMCORE_GSTATE 21 dict def
		/AGMCORE_tmpmatrix matrix def
		/AGMCORE_gstack 64 array def
		/AGMCORE_gstackptr 0 def
		/AGMCORE_gstacksaveptr 0 def
		/AGMCORE_gstackframekeys 14 def
		/AGMCORE_&gsave/gsave ldf
		/AGMCORE_&grestore/grestore ldf
		/AGMCORE_&grestoreall/grestoreall ldf
		/AGMCORE_&save/save ldf
		/AGMCORE_&setoverprint/setoverprint ldf
		/AGMCORE_gdictcopy{
			begin
			{def}forall
			end
		}def
		/AGMCORE_gput{
			AGMCORE_gstack AGMCORE_gstackptr get
			3 1 roll
			put
		}def
		/AGMCORE_gget{
			AGMCORE_gstack AGMCORE_gstackptr get
			exch
			get
		}def
		/gsave{
			AGMCORE_&gsave
			AGMCORE_gstack AGMCORE_gstackptr get
			AGMCORE_gstackptr 1 add
			dup 64 ge{limitcheck}if
			/AGMCORE_gstackptr exch store
			AGMCORE_gstack AGMCORE_gstackptr get
			AGMCORE_gdictcopy
		}def
		/grestore{
			AGMCORE_&grestore
			AGMCORE_gstackptr 1 sub
			dup AGMCORE_gstacksaveptr lt{1 add}if
			dup AGMCORE_gstack exch get dup/AGMCORE_currentoverprint known
				{/AGMCORE_currentoverprint get setoverprint}{pop}ifelse
			/AGMCORE_gstackptr exch store
		}def
		/grestoreall{
			AGMCORE_&grestoreall
			/AGMCORE_gstackptr AGMCORE_gstacksaveptr store 
		}def
		/save{
			AGMCORE_&save
			AGMCORE_gstack AGMCORE_gstackptr get
			AGMCORE_gstackptr 1 add
			dup 64 ge{limitcheck}if
			/AGMCORE_gstackptr exch store
			/AGMCORE_gstacksaveptr AGMCORE_gstackptr store
			AGMCORE_gstack AGMCORE_gstackptr get
			AGMCORE_gdictcopy
		}def
		/setoverprint{
			dup/AGMCORE_currentoverprint exch AGMCORE_gput AGMCORE_&setoverprint
		}def	
		0 1 AGMCORE_gstack length 1 sub{
				AGMCORE_gstack exch AGMCORE_gstackframekeys dict put
		}for
	}if
	level3/AGMCORE_&sysshfill AGMCORE_key_known not and
	{
		/AGMCORE_&sysshfill systemdict/shfill get def
		/AGMCORE_&sysmakepattern systemdict/makepattern get def
		/AGMCORE_&usrmakepattern/makepattern load def
	}if
	/currentcmykcolor[0 0 0 0]AGMCORE_gput
	/currentstrokeadjust false AGMCORE_gput
	/currentcolorspace[/DeviceGray]AGMCORE_gput
	/sep_tint 0 AGMCORE_gput
	/devicen_tints[0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0]AGMCORE_gput
	/sep_colorspace_dict null AGMCORE_gput
	/devicen_colorspace_dict null AGMCORE_gput
	/indexed_colorspace_dict null AGMCORE_gput
	/currentcolor_intent()AGMCORE_gput
	/customcolor_tint 1 AGMCORE_gput
	/absolute_colorimetric_crd null AGMCORE_gput
	/relative_colorimetric_crd null AGMCORE_gput
	/saturation_crd null AGMCORE_gput
	/perceptual_crd null AGMCORE_gput
	currentcolortransfer cvlit/AGMCore_gray_xfer xdf cvlit/AGMCore_b_xfer xdf
		 cvlit/AGMCore_g_xfer xdf cvlit/AGMCore_r_xfer xdf
	<<
	/MaxPatternItem currentsystemparams/MaxPatternCache get
	>>
	setuserparams
	end
}def
/ps
{
	/setcmykcolor where{
		pop
		Adobe_AGM_Core/AGMCORE_&setcmykcolor/setcmykcolor load put
	}if
	Adobe_AGM_Core begin
	/setcmykcolor
	{
		4 copy AGMCORE_cmykbuf astore/currentcmykcolor exch AGMCORE_gput
		1 sub 4 1 roll
		3{
			3 index add neg dup 0 lt{
				pop 0
			}if
			3 1 roll
		}repeat
		setrgbcolor pop
	}ndf
	/currentcmykcolor
	{
		/currentcmykcolor AGMCORE_gget aload pop
	}ndf
	/setoverprint
	{pop}ndf
	/currentoverprint
	{false}ndf
	/AGMCORE_cyan_plate 1 0 0 0 test_cmyk_color_plate def
	/AGMCORE_magenta_plate 0 1 0 0 test_cmyk_color_plate def
	/AGMCORE_yellow_plate 0 0 1 0 test_cmyk_color_plate def
	/AGMCORE_black_plate 0 0 0 1 test_cmyk_color_plate def
	/AGMCORE_plate_ndx 
		AGMCORE_cyan_plate{
			0
		}{
			AGMCORE_magenta_plate{
				1
			}{
				AGMCORE_yellow_plate{
					2
				}{
					AGMCORE_black_plate{
						3
					}{
						4
					}ifelse
				}ifelse
			}ifelse
		}ifelse
		def
	/AGMCORE_have_reported_unsupported_color_space false def
	/AGMCORE_report_unsupported_color_space
	{
		AGMCORE_have_reported_unsupported_color_space false eq
		{
			(Warning: Job contains content that cannot be separated with on-host methods. This content appears on the black plate, and knocks out all other plates.)==
			Adobe_AGM_Core/AGMCORE_have_reported_unsupported_color_space true ddf
		}if
	}def
	/AGMCORE_composite_job
		AGMCORE_cyan_plate AGMCORE_magenta_plate and AGMCORE_yellow_plate and AGMCORE_black_plate and def
	/AGMCORE_in_rip_sep
		/AGMCORE_in_rip_sep where{
			pop AGMCORE_in_rip_sep
		}{
			AGMCORE_distilling 
			{
				false
			}{
				userdict/Adobe_AGM_OnHost_Seps known{
					false
				}{
					level2{
						currentpagedevice/Separations 2 copy known{
							get
						}{
							pop pop false
						}ifelse
					}{
						false
					}ifelse
				}ifelse
			}ifelse
		}ifelse
	def
	/AGMCORE_producing_seps AGMCORE_composite_job not AGMCORE_in_rip_sep or def
	/AGMCORE_host_sep AGMCORE_producing_seps AGMCORE_in_rip_sep not and def
	/AGM_preserve_spots 
		/AGM_preserve_spots where{
			pop AGM_preserve_spots
		}{
			AGMCORE_distilling AGMCORE_producing_seps or
		}ifelse
	def
	/AGM_is_distiller_preserving_spotimages
	{
		currentdistillerparams/PreserveOverprintSettings known
		{
			currentdistillerparams/PreserveOverprintSettings get
				{
					currentdistillerparams/ColorConversionStrategy known
					{
						currentdistillerparams/ColorConversionStrategy get
						/sRGB ne
					}{
						true
					}ifelse
				}{
					false
				}ifelse
		}{
			false
		}ifelse
	}def
	/convert_spot_to_process where{pop}{
		/convert_spot_to_process
		{
			//Adobe_AGM_Core begin
			dup map_alias{
				/Name get exch pop
			}if
			dup dup(None)eq exch(All)eq or
				{
				pop false
				}{
				AGMCORE_host_sep
				{
					gsave
					1 0 0 0 setcmykcolor currentgray 1 exch sub
					0 1 0 0 setcmykcolor currentgray 1 exch sub
					0 0 1 0 setcmykcolor currentgray 1 exch sub
					0 0 0 1 setcmykcolor currentgray 1 exch sub
					add add add 0 eq
					{
						pop false
					}{
						false setoverprint
						current_spot_alias false set_spot_alias
						1 1 1 1 6 -1 roll findcmykcustomcolor 1 setcustomcolor
						set_spot_alias
						currentgray 1 ne
					}ifelse
					grestore
				}{
					AGMCORE_distilling
					{
						pop AGM_is_distiller_preserving_spotimages not
					}{
						//Adobe_AGM_Core/AGMCORE_name xddf
						false
						//Adobe_AGM_Core/AGMCORE_pattern_paint_type get 0 eq
						AGMUTIL_cpd/OverrideSeparations known and
						{
							AGMUTIL_cpd/OverrideSeparations get
							{
								/HqnSpots/ProcSet resourcestatus
								{
									pop pop pop true
								}if
							}if
						}if					
						{
							AGMCORE_name/HqnSpots/ProcSet findresource/TestSpot gx not
						}{
							gsave
							[/Separation AGMCORE_name/DeviceGray{}]AGMCORE_&setcolorspace
							false
							AGMUTIL_cpd/SeparationColorNames 2 copy known
							{
								get
								{AGMCORE_name eq or}forall
								not
							}{
								pop pop pop true
							}ifelse
							grestore
						}ifelse
					}ifelse
				}ifelse
			}ifelse
			end
		}def
	}ifelse
	/convert_to_process where{pop}{
		/convert_to_process
		{
			dup length 0 eq
				{
				pop false
				}{
				AGMCORE_host_sep
				{
				dup true exch
					{
					dup(Cyan)eq exch
					dup(Magenta)eq 3 -1 roll or exch
					dup(Yellow)eq 3 -1 roll or exch
					dup(Black)eq 3 -1 roll or
						{pop}
						{convert_spot_to_process and}ifelse
					}
				forall
					{
					true exch
						{
						dup(Cyan)eq exch
						dup(Magenta)eq 3 -1 roll or exch
						dup(Yellow)eq 3 -1 roll or exch
						(Black)eq or and
						}forall
						not
					}{pop false}ifelse
				}{
				false exch
					{
					/PhotoshopDuotoneList where{pop false}{true}ifelse
						{
						dup(Cyan)eq exch
						dup(Magenta)eq 3 -1 roll or exch
						dup(Yellow)eq 3 -1 roll or exch
						dup(Black)eq 3 -1 roll or
						{pop}
						{convert_spot_to_process or}ifelse
						}
						{
						convert_spot_to_process or
						}
					ifelse
					}
				forall
				}ifelse
			}ifelse
		}def
	}ifelse	
	/AGMCORE_avoid_L2_sep_space 
		version cvr 2012 lt 
		level2 and 
		AGMCORE_producing_seps not and
	def
	/AGMCORE_is_cmyk_sep
		AGMCORE_cyan_plate AGMCORE_magenta_plate or AGMCORE_yellow_plate or AGMCORE_black_plate or
	def
	/AGM_avoid_0_cmyk where{
		pop AGM_avoid_0_cmyk
	}{
		AGM_preserve_spots 
		userdict/Adobe_AGM_OnHost_Seps known 
		userdict/Adobe_AGM_InRip_Seps known or
		not and
	}ifelse
	{
		/setcmykcolor[
			{
				4 copy add add add 0 eq currentoverprint and{
					pop 0.0005
				}if
			}/exec cvx
			/AGMCORE_&setcmykcolor load dup type/operatortype ne{
				/exec cvx
			}if
		]cvx def
	}if
	/AGMCORE_IsSeparationAProcessColor
		{
		dup(Cyan)eq exch dup(Magenta)eq exch dup(Yellow)eq exch(Black)eq or or or
		}def
	AGMCORE_host_sep{
		/setcolortransfer
		{
			AGMCORE_cyan_plate{
				pop pop pop
			}{
			 	AGMCORE_magenta_plate{
			 		4 3 roll pop pop pop
			 	}{
			 		AGMCORE_yellow_plate{
			 			4 2 roll pop pop pop
			 		}{
			 			4 1 roll pop pop pop
			 		}ifelse
			 	}ifelse
			}ifelse
			settransfer 
		}	
		def
		/AGMCORE_get_ink_data
			AGMCORE_cyan_plate{
				{pop pop pop}
			}{
			 	AGMCORE_magenta_plate{
			 		{4 3 roll pop pop pop}
			 	}{
			 		AGMCORE_yellow_plate{
			 			{4 2 roll pop pop pop}
			 		}{
			 			{4 1 roll pop pop pop}
			 		}ifelse
			 	}ifelse
			}ifelse
		def
		/AGMCORE_RemoveProcessColorNames
			{
			1 dict begin
			/filtername
				{
				dup/Cyan eq 1 index(Cyan)eq or
					{pop(_cyan_)}if
				dup/Magenta eq 1 index(Magenta)eq or
					{pop(_magenta_)}if
				dup/Yellow eq 1 index(Yellow)eq or
					{pop(_yellow_)}if
				dup/Black eq 1 index(Black)eq or
					{pop(_black_)}if
				}def
			dup type/arraytype eq
				{[exch{filtername}forall]}
				{filtername}ifelse
			end
			}def
		level3{
			/AGMCORE_IsCurrentColor
				{
				dup AGMCORE_IsSeparationAProcessColor
					{
					AGMCORE_plate_ndx 0 eq
						{dup(Cyan)eq exch/Cyan eq or}if
					AGMCORE_plate_ndx 1 eq
						{dup(Magenta)eq exch/Magenta eq or}if
					AGMCORE_plate_ndx 2 eq
						{dup(Yellow)eq exch/Yellow eq or}if
					AGMCORE_plate_ndx 3 eq
						{dup(Black)eq exch/Black eq or}if
					AGMCORE_plate_ndx 4 eq
						{pop false}if
					}{
					gsave
					false setoverprint
					current_spot_alias false set_spot_alias
					1 1 1 1 6 -1 roll findcmykcustomcolor 1 setcustomcolor
					set_spot_alias
					currentgray 1 ne
					grestore
					}ifelse
				}def
			/AGMCORE_filter_functiondatasource
				{	
				5 dict begin
				/data_in xdf
				data_in type/stringtype eq
					{
					/ncomp xdf
					/comp xdf
					/string_out data_in length ncomp idiv string def
					0 ncomp data_in length 1 sub
						{
						string_out exch dup ncomp idiv exch data_in exch ncomp getinterval comp get 255 exch sub put
						}for
					string_out
					}{
					string/string_in xdf
					/string_out 1 string def
					/component xdf
					[
					data_in string_in/readstring cvx
						[component/get cvx 255/exch cvx/sub cvx string_out/exch cvx 0/exch cvx/put cvx string_out]cvx
						[/pop cvx()]cvx/ifelse cvx
					]cvx/ReusableStreamDecode filter
				}ifelse
				end
				}def
			/AGMCORE_separateShadingFunction
				{
				2 dict begin
				/paint? xdf
				/channel xdf
				dup type/dicttype eq
					{
					begin
					FunctionType 0 eq
						{
						/DataSource channel Range length 2 idiv DataSource AGMCORE_filter_functiondatasource def
						currentdict/Decode known
							{/Decode Decode channel 2 mul 2 getinterval def}if
						paint? not
							{/Decode[1 1]def}if
						}if
					FunctionType 2 eq
						{
						paint?
							{
							/C0[C0 channel get 1 exch sub]def
							/C1[C1 channel get 1 exch sub]def
							}{
							/C0[1]def
							/C1[1]def
							}ifelse			
						}if
					FunctionType 3 eq
						{
						/Functions[Functions{channel paint? AGMCORE_separateShadingFunction}forall]def			
						}if
					currentdict/Range known
						{/Range[0 1]def}if
					currentdict
					end}{
					channel get 0 paint? AGMCORE_separateShadingFunction
					}ifelse
				end
				}def
			/AGMCORE_separateShading
				{
				3 -1 roll begin
				currentdict/Function known
					{
					currentdict/Background known
						{[1 index{Background 3 index get 1 exch sub}{1}ifelse]/Background xdf}if
					Function 3 1 roll AGMCORE_separateShadingFunction/Function xdf
					/ColorSpace[/DeviceGray]def
					}{
					ColorSpace dup type/arraytype eq{0 get}if/DeviceCMYK eq
						{
						/ColorSpace[/DeviceN[/_cyan_/_magenta_/_yellow_/_black_]/DeviceCMYK{}]def
						}{
						ColorSpace dup 1 get AGMCORE_RemoveProcessColorNames 1 exch put
						}ifelse
					ColorSpace 0 get/Separation eq
						{
							{
								[1/exch cvx/sub cvx]cvx
							}{
								[/pop cvx 1]cvx
							}ifelse
							ColorSpace 3 3 -1 roll put
							pop
						}{
							{
								[exch ColorSpace 1 get length 1 sub exch sub/index cvx 1/exch cvx/sub cvx ColorSpace 1 get length 1 add 1/roll cvx ColorSpace 1 get length{/pop cvx}repeat]cvx
							}{
								pop[ColorSpace 1 get length{/pop cvx}repeat cvx 1]cvx
							}ifelse
							ColorSpace 3 3 -1 roll bind put
						}ifelse
					ColorSpace 2/DeviceGray put																		
					}ifelse
				end
				}def
			/AGMCORE_separateShadingDict
				{
				dup/ColorSpace get
				dup type/arraytype ne
					{[exch]}if
				dup 0 get/DeviceCMYK eq
					{
					exch begin 
					currentdict
					AGMCORE_cyan_plate
						{0 true}if
					AGMCORE_magenta_plate
						{1 true}if
					AGMCORE_yellow_plate
						{2 true}if
					AGMCORE_black_plate
						{3 true}if
					AGMCORE_plate_ndx 4 eq
						{0 false}if		
					dup not currentoverprint and
						{/AGMCORE_ignoreshade true def}if
					AGMCORE_separateShading
					currentdict
					end exch
					}if
				dup 0 get/Separation eq
					{
					exch begin
					ColorSpace 1 get dup/None ne exch/All ne and
						{
						ColorSpace 1 get AGMCORE_IsCurrentColor AGMCORE_plate_ndx 4 lt and ColorSpace 1 get AGMCORE_IsSeparationAProcessColor not and
							{
							ColorSpace 2 get dup type/arraytype eq{0 get}if/DeviceCMYK eq 
								{
								/ColorSpace
									[
									/Separation
									ColorSpace 1 get
									/DeviceGray
										[
										ColorSpace 3 get/exec cvx
										4 AGMCORE_plate_ndx sub -1/roll cvx
										4 1/roll cvx
										3[/pop cvx]cvx/repeat cvx
										1/exch cvx/sub cvx
										]cvx									
									]def
								}{
								AGMCORE_report_unsupported_color_space
								AGMCORE_black_plate not
									{
									currentdict 0 false AGMCORE_separateShading
									}if
								}ifelse
							}{
							currentdict ColorSpace 1 get AGMCORE_IsCurrentColor
							0 exch 
							dup not currentoverprint and
								{/AGMCORE_ignoreshade true def}if
							AGMCORE_separateShading
							}ifelse	
						}if			
					currentdict
					end exch
					}if
				dup 0 get/DeviceN eq
					{
					exch begin
					ColorSpace 1 get convert_to_process
						{
						ColorSpace 2 get dup type/arraytype eq{0 get}if/DeviceCMYK eq 
							{
							/ColorSpace
								[
								/DeviceN
								ColorSpace 1 get
								/DeviceGray
									[
									ColorSpace 3 get/exec cvx
									4 AGMCORE_plate_ndx sub -1/roll cvx
									4 1/roll cvx
									3[/pop cvx]cvx/repeat cvx
									1/exch cvx/sub cvx
									]cvx									
								]def
							}{
							AGMCORE_report_unsupported_color_space
							AGMCORE_black_plate not
								{
								currentdict 0 false AGMCORE_separateShading
								/ColorSpace[/DeviceGray]def
								}if
							}ifelse
						}{
						currentdict
						false -1 ColorSpace 1 get
							{
							AGMCORE_IsCurrentColor
								{
								1 add
								exch pop true exch exit
								}if
							1 add
							}forall
						exch 
						dup not currentoverprint and
							{/AGMCORE_ignoreshade true def}if
						AGMCORE_separateShading
						}ifelse
					currentdict
					end exch
					}if
				dup 0 get dup/DeviceCMYK eq exch dup/Separation eq exch/DeviceN eq or or not
					{
					exch begin
					ColorSpace dup type/arraytype eq
						{0 get}if
					/DeviceGray ne
						{
						AGMCORE_report_unsupported_color_space
						AGMCORE_black_plate not
							{
							ColorSpace 0 get/CIEBasedA eq
								{
								/ColorSpace[/Separation/_ciebaseda_/DeviceGray{}]def
								}if
							ColorSpace 0 get dup/CIEBasedABC eq exch dup/CIEBasedDEF eq exch/DeviceRGB eq or or
								{
								/ColorSpace[/DeviceN[/_red_/_green_/_blue_]/DeviceRGB{}]def
								}if
							ColorSpace 0 get/CIEBasedDEFG eq
								{
								/ColorSpace[/DeviceN[/_cyan_/_magenta_/_yellow_/_black_]/DeviceCMYK{}]def
								}if
							currentdict 0 false AGMCORE_separateShading
							}if
						}if
					currentdict
					end exch
					}if
				pop
				dup/AGMCORE_ignoreshade known
					{
					begin
					/ColorSpace[/Separation(None)/DeviceGray{}]def
					currentdict end
					}if
				}def
			/shfill
				{
				AGMCORE_separateShadingDict 
				dup/AGMCORE_ignoreshade known
					{pop}
					{AGMCORE_&sysshfill}ifelse
				}def
			/makepattern
				{
				exch
				dup/PatternType get 2 eq
					{
					clonedict
					begin
					/Shading Shading AGMCORE_separateShadingDict def
					Shading/AGMCORE_ignoreshade known
					currentdict end exch
					{pop<</PatternType 1/PaintProc{pop}/BBox[0 0 1 1]/XStep 1/YStep 1/PaintType 1/TilingType 3>>}if
					exch AGMCORE_&sysmakepattern
					}{
					exch AGMCORE_&usrmakepattern
					}ifelse
				}def
		}if
	}if
	AGMCORE_in_rip_sep{
		/setcustomcolor
		{
			exch aload pop
			dup 7 1 roll inRip_spot_has_ink not	{
				4{4 index mul 4 1 roll}
				repeat
				/DeviceCMYK setcolorspace
				6 -2 roll pop pop
			}{
				//Adobe_AGM_Core begin
					/AGMCORE_k xdf/AGMCORE_y xdf/AGMCORE_m xdf/AGMCORE_c xdf
				end
				[/Separation 4 -1 roll/DeviceCMYK
				{dup AGMCORE_c mul exch dup AGMCORE_m mul exch dup AGMCORE_y mul exch AGMCORE_k mul}
				]
				setcolorspace
			}ifelse
			setcolor
		}ndf
		/setseparationgray
		{
			[/Separation(All)/DeviceGray{}]setcolorspace_opt
			1 exch sub setcolor
		}ndf
	}{
		/setseparationgray
		{
			AGMCORE_&setgray
		}ndf
	}ifelse
	/findcmykcustomcolor
	{
		5 makereadonlyarray
	}ndf
	/setcustomcolor
	{
		exch aload pop pop
		4{4 index mul 4 1 roll}repeat
		setcmykcolor pop
	}ndf
	/has_color
		/colorimage where{
			AGMCORE_producing_seps{
				pop true
			}{
				systemdict eq
			}ifelse
		}{
			false
		}ifelse
	def
	/map_index
	{
		1 index mul exch getinterval{255 div}forall
	}bdf
	/map_indexed_devn
	{
		Lookup Names length 3 -1 roll cvi map_index
	}bdf
	/n_color_components
	{
		base_colorspace_type
		dup/DeviceGray eq{
			pop 1
		}{
			/DeviceCMYK eq{
				4
			}{
				3
			}ifelse
		}ifelse
	}bdf
	level2{
		/mo/moveto ldf
		/li/lineto ldf
		/cv/curveto ldf
		/knockout_unitsq
		{
			1 setgray
			0 0 1 1 rectfill
		}def
		level2/setcolorspace AGMCORE_key_known not and{
			/AGMCORE_&&&setcolorspace/setcolorspace ldf
			/AGMCORE_ReplaceMappedColor
			{
				dup type dup/arraytype eq exch/packedarraytype eq or
				{
					/AGMCORE_SpotAliasAry2 where{
						begin
						dup 0 get dup/Separation eq
						{
							pop
							dup length array copy
							dup dup 1 get
							current_spot_alias
							{
								dup map_alias
								{
									false set_spot_alias
									dup 1 exch setsepcolorspace
									true set_spot_alias
									begin
									/sep_colorspace_dict currentdict AGMCORE_gput
									pop pop	pop
									[
										/Separation Name 
										CSA map_csa
										MappedCSA 
										/sep_colorspace_proc load
									]
									dup Name
									end
								}if
							}if
							map_reserved_ink_name 1 xpt
						}{
							/DeviceN eq 
							{
								dup length array copy
								dup dup 1 get[
									exch{
										current_spot_alias{
											dup map_alias{
												/Name get exch pop
											}if
										}if
										map_reserved_ink_name
									}forall 
								]1 xpt
							}if
						}ifelse
						end
					}if
				}if
			}def
			/setcolorspace
			{
				dup type dup/arraytype eq exch/packedarraytype eq or
				{
					dup 0 get/Indexed eq
					{
						AGMCORE_distilling
						{
							/PhotoshopDuotoneList where
							{
								pop false
							}{
								true
							}ifelse
						}{
							true
						}ifelse
						{
							aload pop 3 -1 roll
							AGMCORE_ReplaceMappedColor
							3 1 roll 4 array astore
						}if
					}{
						AGMCORE_ReplaceMappedColor
					}ifelse
				}if
				DeviceN_PS2_inRip_seps{AGMCORE_&&&setcolorspace}if
			}def
		}if	
	}{
		/adj
		{
			currentstrokeadjust{
				transform
				0.25 sub round 0.25 add exch
				0.25 sub round 0.25 add exch
				itransform
			}if
		}def
		/mo{
			adj moveto
		}def
		/li{
			adj lineto
		}def
		/cv{
			6 2 roll adj
			6 2 roll adj
			6 2 roll adj curveto
		}def
		/knockout_unitsq
		{
			1 setgray
			8 8 1[8 0 0 8 0 0]{<ffffffffffffffff>}image
		}def
		/currentstrokeadjust{
			/currentstrokeadjust AGMCORE_gget
		}def
		/setstrokeadjust{
			/currentstrokeadjust exch AGMCORE_gput
		}def
		/setcolorspace
		{
			/currentcolorspace exch AGMCORE_gput
		}def
		/currentcolorspace
		{
			/currentcolorspace AGMCORE_gget
		}def
		/setcolor_devicecolor
		{
			base_colorspace_type
			dup/DeviceGray eq{
				pop setgray
			}{
				/DeviceCMYK eq{
					setcmykcolor
				}{
					setrgbcolor
				}ifelse
			}ifelse
		}def
		/setcolor
		{
			currentcolorspace 0 get
			dup/DeviceGray ne{
				dup/DeviceCMYK ne{
					dup/DeviceRGB ne{
						dup/Separation eq{
							pop
							currentcolorspace 3 gx
							currentcolorspace 2 get
						}{
							dup/Indexed eq{
								pop
								currentcolorspace 3 get dup type/stringtype eq{
									currentcolorspace 1 get n_color_components
									3 -1 roll map_index
								}{
									exec
								}ifelse
								currentcolorspace 1 get
							}{
								/AGMCORE_cur_err/AGMCORE_invalid_color_space def
								AGMCORE_invalid_color_space
							}ifelse
						}ifelse
					}if
				}if
			}if
			setcolor_devicecolor
		}def
	}ifelse
	/sop/setoverprint ldf
	/lw/setlinewidth ldf
	/lc/setlinecap ldf
	/lj/setlinejoin ldf
	/ml/setmiterlimit ldf
	/dsh/setdash ldf
	/sadj/setstrokeadjust ldf
	/gry/setgray ldf
	/rgb/setrgbcolor ldf
	/cmyk[
		/currentcolorspace[/DeviceCMYK]/AGMCORE_gput cvx
		/setcmykcolor load dup type/operatortype ne{/exec cvx}if
	]cvx bdf
	level3 AGMCORE_host_sep not and{
		/nzopmsc{
			6 dict begin
			/kk exch def
			/yy exch def
			/mm exch def
			/cc exch def
			/sum 0 def
			cc 0 ne{/sum sum 2#1000 or def cc}if
			mm 0 ne{/sum sum 2#0100 or def mm}if
			yy 0 ne{/sum sum 2#0010 or def yy}if
			kk 0 ne{/sum sum 2#0001 or def kk}if
			AGMCORE_CMYKDeviceNColorspaces sum get setcolorspace
			sum 0 eq{0}if
			end
			setcolor
		}bdf
	}{
		/nzopmsc/cmyk ldf
	}ifelse
	/sep/setsepcolor ldf
	/devn/setdevicencolor ldf
	/idx/setindexedcolor ldf
	/colr/setcolor ldf
	/csacrd/set_csa_crd ldf
	/sepcs/setsepcolorspace ldf
	/devncs/setdevicencolorspace ldf
	/idxcs/setindexedcolorspace ldf
	/cp/closepath ldf
	/clp/clp_npth ldf
	/eclp/eoclp_npth ldf
	/f/fill ldf
	/ef/eofill ldf
	/@/stroke ldf
	/nclp/npth_clp ldf
	/gset/graphic_setup ldf
	/gcln/graphic_cleanup ldf
	/ct/concat ldf
	/cf/currentfile ldf
	/fl/filter ldf
	/rs/readstring ldf
	/AGMCORE_def_ht currenthalftone def
	/clonedict Adobe_AGM_Utils begin/clonedict load end def
	/clonearray Adobe_AGM_Utils begin/clonearray load end def
	currentdict{
		dup xcheck 1 index type dup/arraytype eq exch/packedarraytype eq or and{
			bind
		}if
		def
	}forall
	/getrampcolor
	{
		/indx exch def
		0 1 NumComp 1 sub
		{
			dup
			Samples exch get
			dup type/stringtype eq{indx get}if
			exch
			Scaling exch get aload pop
			3 1 roll
			mul add
		}for
		ColorSpaceFamily/Separation eq 
		{sep}
		{
			ColorSpaceFamily/DeviceN eq
			{devn}{setcolor}ifelse
		}ifelse
	}bdf
	/sssetbackground{
		aload pop 
		ColorSpaceFamily/Separation eq 
		{sep}
		{
			ColorSpaceFamily/DeviceN eq
			{devn}{setcolor}ifelse
		}ifelse	
	}bdf
	/RadialShade
	{
		40 dict begin
		/ColorSpaceFamily xdf
		/background xdf
		/ext1 xdf
		/ext0 xdf
		/BBox xdf
		/r2 xdf
		/c2y xdf
		/c2x xdf
		/r1 xdf
		/c1y xdf
		/c1x xdf
		/rampdict xdf
		/setinkoverprint where{pop/setinkoverprint{pop}def}if
		gsave
		BBox length 0 gt
		{
			np
			BBox 0 get BBox 1 get moveto
			BBox 2 get BBox 0 get sub 0 rlineto
			0 BBox 3 get BBox 1 get sub rlineto
			BBox 2 get BBox 0 get sub neg 0 rlineto
			closepath
			clip
			np
		}if
		c1x c2x eq
		{
			c1y c2y lt{/theta 90 def}{/theta 270 def}ifelse
		}{
			/slope c2y c1y sub c2x c1x sub div def
			/theta slope 1 atan def
			c2x c1x lt c2y c1y ge and{/theta theta 180 sub def}if
			c2x c1x lt c2y c1y lt and{/theta theta 180 add def}if
		}ifelse
		gsave
		clippath
		c1x c1y translate
		theta rotate
		-90 rotate
		{pathbbox}stopped
		{0 0 0 0}if
		/yMax xdf
		/xMax xdf
		/yMin xdf
		/xMin xdf
		grestore
		xMax xMin eq yMax yMin eq or
		{
			grestore
			end
		}{
			/max{2 copy gt{pop}{exch pop}ifelse}bdf
			/min{2 copy lt{pop}{exch pop}ifelse}bdf
			rampdict begin
			40 dict begin
			background length 0 gt{background sssetbackground gsave clippath fill grestore}if
			gsave
			c1x c1y translate
			theta rotate
			-90 rotate
			/c2y c1x c2x sub dup mul c1y c2y sub dup mul add sqrt def
			/c1y 0 def
			/c1x 0 def
			/c2x 0 def
			ext0
			{
				0 getrampcolor
				c2y r2 add r1 sub 0.0001 lt
				{
					c1x c1y r1 360 0 arcn
					pathbbox
					/aymax exch def
					/axmax exch def
					/aymin exch def
					/axmin exch def
					/bxMin xMin axmin min def
					/byMin yMin aymin min def
					/bxMax xMax axmax max def
					/byMax yMax aymax max def
					bxMin byMin moveto
					bxMax byMin lineto
					bxMax byMax lineto
					bxMin byMax lineto
					bxMin byMin lineto
					eofill
				}{
					c2y r1 add r2 le
					{
						c1x c1y r1 0 360 arc
						fill
					}
					{
						c2x c2y r2 0 360 arc fill
						r1 r2 eq
						{
							/p1x r1 neg def
							/p1y c1y def
							/p2x r1 def
							/p2y c1y def
							p1x p1y moveto p2x p2y lineto p2x yMin lineto p1x yMin lineto
							fill
						}{
							/AA r2 r1 sub c2y div def
							AA -1 eq
							{/theta 89.99 def}
							{/theta AA 1 AA dup mul sub sqrt div 1 atan def}
							ifelse
							/SS1 90 theta add dup sin exch cos div def
							/p1x r1 SS1 SS1 mul SS1 SS1 mul 1 add div sqrt mul neg def
							/p1y p1x SS1 div neg def
							/SS2 90 theta sub dup sin exch cos div def
							/p2x r1 SS2 SS2 mul SS2 SS2 mul 1 add div sqrt mul def
							/p2y p2x SS2 div neg def
							r1 r2 gt
							{
								/L1maxX p1x yMin p1y sub SS1 div add def
								/L2maxX p2x yMin p2y sub SS2 div add def
							}{
								/L1maxX 0 def
								/L2maxX 0 def
							}ifelse
							p1x p1y moveto p2x p2y lineto L2maxX L2maxX p2x sub SS2 mul p2y add lineto
							L1maxX L1maxX p1x sub SS1 mul p1y add lineto
							fill
						}ifelse
					}ifelse
				}ifelse
			}if
		c1x c2x sub dup mul
		c1y c2y sub dup mul
		add 0.5 exp
		0 dtransform
		dup mul exch dup mul add 0.5 exp 72 div
		0 72 matrix defaultmatrix dtransform dup mul exch dup mul add sqrt
		72 0 matrix defaultmatrix dtransform dup mul exch dup mul add sqrt
		1 index 1 index lt{exch}if pop
		/hires xdf
		hires mul
		/numpix xdf
		/numsteps NumSamples def
		/rampIndxInc 1 def
		/subsampling false def
		numpix 0 ne
		{
			NumSamples numpix div 0.5 gt
			{
				/numsteps numpix 2 div round cvi dup 1 le{pop 2}if def
				/rampIndxInc NumSamples 1 sub numsteps div def
				/subsampling true def
			}if
		}if
		/xInc c2x c1x sub numsteps div def
		/yInc c2y c1y sub numsteps div def
		/rInc r2 r1 sub numsteps div def
		/cx c1x def
		/cy c1y def
		/radius r1 def
		np
		xInc 0 eq yInc 0 eq rInc 0 eq and and
		{
			0 getrampcolor
			cx cy radius 0 360 arc
			stroke
			NumSamples 1 sub getrampcolor
			cx cy radius 72 hires div add 0 360 arc
			0 setlinewidth
			stroke
		}{
			0
			numsteps
			{
				dup
				subsampling{round cvi}if
				getrampcolor
				cx cy radius 0 360 arc
				/cx cx xInc add def
				/cy cy yInc add def
				/radius radius rInc add def
				cx cy radius 360 0 arcn
				eofill
				rampIndxInc add
			}repeat
			pop
		}ifelse
		ext1
		{
			c2y r2 add r1 lt
			{
				c2x c2y r2 0 360 arc
				fill
			}{
				c2y r1 add r2 sub 0.0001 le
				{
					c2x c2y r2 360 0 arcn
					pathbbox
					/aymax exch def
					/axmax exch def
					/aymin exch def
					/axmin exch def
					/bxMin xMin axmin min def
					/byMin yMin aymin min def
					/bxMax xMax axmax max def
					/byMax yMax aymax max def
					bxMin byMin moveto
					bxMax byMin lineto
					bxMax byMax lineto
					bxMin byMax lineto
					bxMin byMin lineto
					eofill
				}{
					c2x c2y r2 0 360 arc fill
					r1 r2 eq
					{
						/p1x r2 neg def
						/p1y c2y def
						/p2x r2 def
						/p2y c2y def
						p1x p1y moveto p2x p2y lineto p2x yMax lineto p1x yMax lineto
						fill
					}{
						/AA r2 r1 sub c2y div def
						AA -1 eq
						{/theta 89.99 def}
						{/theta AA 1 AA dup mul sub sqrt div 1 atan def}
						ifelse
						/SS1 90 theta add dup sin exch cos div def
						/p1x r2 SS1 SS1 mul SS1 SS1 mul 1 add div sqrt mul neg def
						/p1y c2y p1x SS1 div sub def
						/SS2 90 theta sub dup sin exch cos div def
						/p2x r2 SS2 SS2 mul SS2 SS2 mul 1 add div sqrt mul def
						/p2y c2y p2x SS2 div sub def
						r1 r2 lt
						{
							/L1maxX p1x yMax p1y sub SS1 div add def
							/L2maxX p2x yMax p2y sub SS2 div add def
						}{
							/L1maxX 0 def
							/L2maxX 0 def
						}ifelse
						p1x p1y moveto p2x p2y lineto L2maxX L2maxX p2x sub SS2 mul p2y add lineto
						L1maxX L1maxX p1x sub SS1 mul p1y add lineto
						fill
					}ifelse
				}ifelse
			}ifelse
		}if
		grestore
		grestore
		end
		end
		end
		}ifelse
	}bdf
	/GenStrips
	{
		40 dict begin
		/ColorSpaceFamily xdf
		/background xdf
		/ext1 xdf
		/ext0 xdf
		/BBox xdf
		/y2 xdf
		/x2 xdf
		/y1 xdf
		/x1 xdf
		/rampdict xdf
		/setinkoverprint where{pop/setinkoverprint{pop}def}if
		gsave
		BBox length 0 gt
		{
			np
			BBox 0 get BBox 1 get moveto
			BBox 2 get BBox 0 get sub 0 rlineto
			0 BBox 3 get BBox 1 get sub rlineto
			BBox 2 get BBox 0 get sub neg 0 rlineto
			closepath
			clip
			np
		}if
		x1 x2 eq
		{
			y1 y2 lt{/theta 90 def}{/theta 270 def}ifelse
		}{
			/slope y2 y1 sub x2 x1 sub div def
			/theta slope 1 atan def
			x2 x1 lt y2 y1 ge and{/theta theta 180 sub def}if
			x2 x1 lt y2 y1 lt and{/theta theta 180 add def}if
		}
		ifelse
		gsave
		clippath
		x1 y1 translate
		theta rotate
		{pathbbox}stopped
		{0 0 0 0}if
		/yMax exch def
		/xMax exch def
		/yMin exch def
		/xMin exch def
		grestore
		xMax xMin eq yMax yMin eq or
		{
			grestore
			end
		}{
			rampdict begin
			20 dict begin
			background length 0 gt{background sssetbackground gsave clippath fill grestore}if
			gsave
			x1 y1 translate
			theta rotate
			/xStart 0 def
			/xEnd x2 x1 sub dup mul y2 y1 sub dup mul add 0.5 exp def
			/ySpan yMax yMin sub def
			/numsteps NumSamples def
			/rampIndxInc 1 def
			/subsampling false def
			xStart 0 transform
			xEnd 0 transform
			3 -1 roll
			sub dup mul
			3 1 roll
			sub dup mul
			add 0.5 exp 72 div
			0 72 matrix defaultmatrix dtransform dup mul exch dup mul add sqrt
			72 0 matrix defaultmatrix dtransform dup mul exch dup mul add sqrt
			1 index 1 index lt{exch}if pop
			mul
			/numpix xdf
			numpix 0 ne
			{
				NumSamples numpix div 0.5 gt
				{
					/numsteps numpix 2 div round cvi dup 1 le{pop 2}if def
					/rampIndxInc NumSamples 1 sub numsteps div def
					/subsampling true def
				}if
			}if
			ext0
			{
				0 getrampcolor
				xMin xStart lt
				{
					xMin yMin xMin neg ySpan rectfill
				}if
			}if
			/xInc xEnd xStart sub numsteps div def
			/x xStart def
			0
			numsteps
			{
				dup
				subsampling{round cvi}if
				getrampcolor
				x yMin xInc ySpan rectfill
				/x x xInc add def
				rampIndxInc add
			}repeat
			pop
			ext1{
				xMax xEnd gt
				{
					xEnd yMin xMax xEnd sub ySpan rectfill
				}if
			}if
			grestore
			grestore
			end
			end
			end
		}ifelse
	}bdf
}def
/pt
{
	end
}def
/dt{
}def
/pgsv{
	//Adobe_AGM_Core/AGMCORE_save save put
}def
/pgrs{
	//Adobe_AGM_Core/AGMCORE_save get restore
}def
systemdict/findcolorrendering known{
	/findcolorrendering systemdict/findcolorrendering get def
}if
systemdict/setcolorrendering known{
	/setcolorrendering systemdict/setcolorrendering get def
}if
/test_cmyk_color_plate
{
	gsave
	setcmykcolor currentgray 1 ne
	grestore
}def
/inRip_spot_has_ink
{
	dup//Adobe_AGM_Core/AGMCORE_name xddf
	convert_spot_to_process not
}def
/map255_to_range
{
	1 index sub
	3 -1 roll 255 div mul add
}def
/set_csa_crd
{
	/sep_colorspace_dict null AGMCORE_gput
	begin
		CSA get_csa_by_name setcolorspace_opt
		set_crd
	end
}
def
/map_csa
{
	currentdict/MappedCSA known{MappedCSA null ne}{false}ifelse
	{pop}{get_csa_by_name/MappedCSA xdf}ifelse
}def
/setsepcolor
{
	/sep_colorspace_dict AGMCORE_gget begin
		dup/sep_tint exch AGMCORE_gput
		TintProc
	end
}def
/setdevicencolor
{
	/devicen_colorspace_dict AGMCORE_gget begin
		Names length copy
		Names length 1 sub -1 0
		{
			/devicen_tints AGMCORE_gget 3 1 roll xpt
		}for
		TintProc
	end
}def
/sep_colorspace_proc
{
	/AGMCORE_tmp exch store
	/sep_colorspace_dict AGMCORE_gget begin
	currentdict/Components known{
		Components aload pop 
		TintMethod/Lab eq{
			2{AGMCORE_tmp mul NComponents 1 roll}repeat
			LMax sub AGMCORE_tmp mul LMax add NComponents 1 roll
		}{
			TintMethod/Subtractive eq{
				NComponents{
					AGMCORE_tmp mul NComponents 1 roll
				}repeat
			}{
				NComponents{
					1 sub AGMCORE_tmp mul 1 add NComponents 1 roll
				}repeat
			}ifelse
		}ifelse
	}{
		ColorLookup AGMCORE_tmp ColorLookup length 1 sub mul round cvi get
		aload pop
	}ifelse
	end
}def
/sep_colorspace_gray_proc
{
	/AGMCORE_tmp exch store
	/sep_colorspace_dict AGMCORE_gget begin
	GrayLookup AGMCORE_tmp GrayLookup length 1 sub mul round cvi get
	end
}def
/sep_proc_name
{
	dup 0 get 
	dup/DeviceRGB eq exch/DeviceCMYK eq or level2 not and has_color not and{
		pop[/DeviceGray]
		/sep_colorspace_gray_proc
	}{
		/sep_colorspace_proc
	}ifelse
}def
/setsepcolorspace
{
	current_spot_alias{
		dup begin
			Name map_alias{
				exch pop
			}if
		end
	}if
	dup/sep_colorspace_dict exch AGMCORE_gput
	begin
	CSA map_csa
	/AGMCORE_sep_special Name dup()eq exch(All)eq or store
	AGMCORE_avoid_L2_sep_space{
		[/Indexed MappedCSA sep_proc_name 255 exch 
			{255 div}/exec cvx 3 -1 roll[4 1 roll load/exec cvx]cvx 
		]setcolorspace_opt
		/TintProc{
			255 mul round cvi setcolor
		}bdf
	}{
		MappedCSA 0 get/DeviceCMYK eq 
		currentdict/Components known and 
		AGMCORE_sep_special not and{
			/TintProc[
				Components aload pop Name findcmykcustomcolor 
				/exch cvx/setcustomcolor cvx
			]cvx bdf
		}{
 			AGMCORE_host_sep Name(All)eq and{
 				/TintProc{
					1 exch sub setseparationgray 
				}bdf
 			}{
				AGMCORE_in_rip_sep MappedCSA 0 get/DeviceCMYK eq and 
				AGMCORE_host_sep or
				Name()eq and{
					/TintProc[
						MappedCSA sep_proc_name exch 0 get/DeviceCMYK eq{
							cvx/setcmykcolor cvx
						}{
							cvx/setgray cvx
						}ifelse
					]cvx bdf
				}{
					AGMCORE_producing_seps MappedCSA 0 get dup/DeviceCMYK eq exch/DeviceGray eq or and AGMCORE_sep_special not and{
	 					/TintProc[
							/dup cvx
							MappedCSA sep_proc_name cvx exch
							0 get/DeviceGray eq{
								1/exch cvx/sub cvx 0 0 0 4 -1/roll cvx
							}if
							/Name cvx/findcmykcustomcolor cvx/exch cvx
							AGMCORE_host_sep{
								AGMCORE_is_cmyk_sep
								/Name cvx 
								/AGMCORE_IsSeparationAProcessColor load/exec cvx
								/not cvx/and cvx 
							}{
								Name inRip_spot_has_ink not
							}ifelse
							[
		 						/pop cvx 1
							]cvx/if cvx
							/setcustomcolor cvx
						]cvx bdf
 					}{
						/TintProc{setcolor}bdf
						[/Separation Name MappedCSA sep_proc_name load]setcolorspace_opt
					}ifelse
				}ifelse
			}ifelse
		}ifelse
	}ifelse
	set_crd
	setsepcolor
	end
}def
/additive_blend
{
 	3 dict begin
 	/numarrays xdf
 	/numcolors xdf
 	0 1 numcolors 1 sub
 		{
 		/c1 xdf
 		1
 		0 1 numarrays 1 sub
 			{
			1 exch add/index cvx
 			c1/get cvx/mul cvx
 			}for
 		numarrays 1 add 1/roll cvx 
 		}for
 	numarrays[/pop cvx]cvx/repeat cvx
 	end
}def
/subtractive_blend
{
	3 dict begin
	/numarrays xdf
	/numcolors xdf
	0 1 numcolors 1 sub
		{
		/c1 xdf
		1 1
		0 1 numarrays 1 sub
			{
			1 3 3 -1 roll add/index cvx 
			c1/get cvx/sub cvx/mul cvx
			}for
		/sub cvx
		numarrays 1 add 1/roll cvx
		}for
	numarrays[/pop cvx]cvx/repeat cvx
	end
}def
/exec_tint_transform
{
	/TintProc[
		/TintTransform cvx/setcolor cvx
	]cvx bdf
	MappedCSA setcolorspace_opt
}bdf
/devn_makecustomcolor
{
	2 dict begin
	/names_index xdf
	/Names xdf
	1 1 1 1 Names names_index get findcmykcustomcolor
	/devicen_tints AGMCORE_gget names_index get setcustomcolor
	Names length{pop}repeat
	end
}bdf
/setdevicencolorspace
{
	dup/AliasedColorants known{false}{true}ifelse 
	current_spot_alias and{
		7 dict begin
		/names_index 0 def
		dup/names_len exch/Names get length def
		/new_names names_len array def
		/new_LookupTables names_len array def
		/alias_cnt 0 def
		dup/Names get
		{
			dup map_alias{
				exch pop
				dup/ColorLookup known{
					dup begin
					new_LookupTables names_index ColorLookup put
					end
				}{
					dup/Components known{
						dup begin
						new_LookupTables names_index Components put
						end
					}{
						dup begin
						new_LookupTables names_index[null null null null]put
						end
					}ifelse
				}ifelse
				new_names names_index 3 -1 roll/Name get put
				/alias_cnt alias_cnt 1 add def 
			}{
				/name xdf				
				new_names names_index name put
				dup/LookupTables known{
					dup begin
					new_LookupTables names_index LookupTables names_index get put
					end
				}{
					dup begin
					new_LookupTables names_index[null null null null]put
					end
				}ifelse
			}ifelse
			/names_index names_index 1 add def 
		}forall
		alias_cnt 0 gt{
			/AliasedColorants true def
			/lut_entry_len new_LookupTables 0 get dup length 256 ge{0 get length}{length}ifelse def
			0 1 names_len 1 sub{
				/names_index xdf
				new_LookupTables names_index get dup length 256 ge{0 get length}{length}ifelse lut_entry_len ne{
					/AliasedColorants false def
					exit
				}{
					new_LookupTables names_index get 0 get null eq{
						dup/Names get names_index get/name xdf
						name(Cyan)eq name(Magenta)eq name(Yellow)eq name(Black)eq
						or or or not{
							/AliasedColorants false def
							exit
						}if
					}if
				}ifelse
			}for
			lut_entry_len 1 eq{
				/AliasedColorants false def
			}if
			AliasedColorants{
				dup begin
				/Names new_names def
				/LookupTables new_LookupTables def
				/AliasedColorants true def
				/NComponents lut_entry_len def
				/TintMethod NComponents 4 eq{/Subtractive}{/Additive}ifelse def
				/MappedCSA TintMethod/Additive eq{/DeviceRGB}{/DeviceCMYK}ifelse def
				currentdict/TTTablesIdx known not{
					/TTTablesIdx -1 def
				}if
				end
			}if
		}if
		end
	}if
	dup/devicen_colorspace_dict exch AGMCORE_gput
	begin
	currentdict/AliasedColorants known{
		AliasedColorants
	}{
		false
	}ifelse
	dup not{
		CSA map_csa
	}if
	/TintTransform load type/nulltype eq or{
		/TintTransform[
			0 1 Names length 1 sub
				{
				/TTTablesIdx TTTablesIdx 1 add def
				dup LookupTables exch get dup 0 get null eq
					{
					1 index
					Names exch get
					dup(Cyan)eq
						{
						pop exch
						LookupTables length exch sub
						/index cvx
						0 0 0
						}
						{
						dup(Magenta)eq
							{
							pop exch
							LookupTables length exch sub
							/index cvx
							0/exch cvx 0 0
							}{
							(Yellow)eq
								{
								exch
								LookupTables length exch sub
								/index cvx
								0 0 3 -1/roll cvx 0
								}{
								exch
								LookupTables length exch sub
								/index cvx
								0 0 0 4 -1/roll cvx
								}ifelse
							}ifelse
						}ifelse
					5 -1/roll cvx/astore cvx
					}{
					dup length 1 sub
					LookupTables length 4 -1 roll sub 1 add
					/index cvx/mul cvx/round cvx/cvi cvx/get cvx
					}ifelse
					Names length TTTablesIdx add 1 add 1/roll cvx
				}for
			Names length[/pop cvx]cvx/repeat cvx
			NComponents Names length
 			TintMethod/Subtractive eq
 				{
 				subtractive_blend
 				}{
 				additive_blend
 				}ifelse
		]cvx bdf
	}if
	AGMCORE_host_sep{
		Names convert_to_process{
			exec_tint_transform
		}
		{	
			currentdict/AliasedColorants known{
				AliasedColorants not
			}{
				false
			}ifelse
			5 dict begin
			/AvoidAliasedColorants xdf
			/painted? false def
			/names_index 0 def
			/names_len Names length def
			AvoidAliasedColorants{
				/currentspotalias current_spot_alias def
				false set_spot_alias
			}if
			Names{
				AGMCORE_is_cmyk_sep{
					dup(Cyan)eq AGMCORE_cyan_plate and exch
					dup(Magenta)eq AGMCORE_magenta_plate and exch
					dup(Yellow)eq AGMCORE_yellow_plate and exch
					(Black)eq AGMCORE_black_plate and or or or{
						/devicen_colorspace_dict AGMCORE_gget/TintProc[
							Names names_index/devn_makecustomcolor cvx
						]cvx ddf
						/painted? true def
					}if
					painted?{exit}if
				}{
					0 0 0 0 5 -1 roll findcmykcustomcolor 1 setcustomcolor currentgray 0 eq{
					/devicen_colorspace_dict AGMCORE_gget/TintProc[
						Names names_index/devn_makecustomcolor cvx
					]cvx ddf
					/painted? true def
					exit
					}if
				}ifelse
				/names_index names_index 1 add def
			}forall
			AvoidAliasedColorants{
				currentspotalias set_spot_alias
			}if
			painted?{
				/devicen_colorspace_dict AGMCORE_gget/names_index names_index put
			}{
				/devicen_colorspace_dict AGMCORE_gget/TintProc[
					names_len[/pop cvx]cvx/repeat cvx 1/setseparationgray cvx
 					0 0 0 0/setcmykcolor cvx
				]cvx ddf
			}ifelse
			end
		}ifelse
	}
	{
		AGMCORE_in_rip_sep{
			Names convert_to_process not
		}{
			level3
		}ifelse
		{
			[/DeviceN Names MappedCSA/TintTransform load]setcolorspace_opt
			/TintProc level3 not AGMCORE_in_rip_sep and{
				[
					Names/length cvx[/pop cvx]cvx/repeat cvx
				]cvx bdf
			}{
				{setcolor}bdf
			}ifelse
		}{
			exec_tint_transform
		}ifelse
	}ifelse
	set_crd
	/AliasedColorants false def
	end
}def
/setindexedcolorspace
{
	dup/indexed_colorspace_dict exch AGMCORE_gput
	begin
		currentdict/CSDBase known{
			CSDBase/CSD get_res begin
			currentdict/Names known{
				currentdict devncs
			}{
				1 currentdict sepcs
			}ifelse
			AGMCORE_host_sep{
				4 dict begin
				/compCnt/Names where{pop Names length}{1}ifelse def
				/NewLookup HiVal 1 add string def
				0 1 HiVal{
					/tableIndex xdf
					Lookup dup type/stringtype eq{
						compCnt tableIndex map_index
					}{
						exec
					}ifelse
					/Names where{
						pop setdevicencolor
					}{
						setsepcolor
					}ifelse
					currentgray
					tableIndex exch
					255 mul cvi 
					NewLookup 3 1 roll put
				}for
				[/Indexed currentcolorspace HiVal NewLookup]setcolorspace_opt
				end
			}{
				level3
				{
					currentdict/Names known{
						[/Indexed[/DeviceN Names MappedCSA/TintTransform load]HiVal Lookup]setcolorspace_opt
					}{
						[/Indexed[/Separation Name MappedCSA sep_proc_name load]HiVal Lookup]setcolorspace_opt
					}ifelse
				}{
				[/Indexed MappedCSA HiVal
					[
					currentdict/Names known{
						Lookup dup type/stringtype eq
							{/exch cvx CSDBase/CSD get_res/Names get length dup/mul cvx exch/getinterval cvx{255 div}/forall cvx}
							{/exec cvx}ifelse
							/TintTransform load/exec cvx
					}{
						Lookup dup type/stringtype eq
							{/exch cvx/get cvx 255/div cvx}
							{/exec cvx}ifelse
							CSDBase/CSD get_res/MappedCSA get sep_proc_name exch pop/load cvx/exec cvx
					}ifelse
					]cvx
				]setcolorspace_opt
				}ifelse
			}ifelse
			end
			set_crd
		}
		{
			CSA map_csa
			AGMCORE_host_sep level2 not and{
				0 0 0 0 setcmykcolor
			}{
				[/Indexed MappedCSA 
				level2 not has_color not and{
					dup 0 get dup/DeviceRGB eq exch/DeviceCMYK eq or{
						pop[/DeviceGray]
					}if
					HiVal GrayLookup
				}{
					HiVal 
					currentdict/RangeArray known{
						{
							/indexed_colorspace_dict AGMCORE_gget begin
							Lookup exch 
							dup HiVal gt{
								pop HiVal
							}if
							NComponents mul NComponents getinterval{}forall
							NComponents 1 sub -1 0{
								RangeArray exch 2 mul 2 getinterval aload pop map255_to_range
								NComponents 1 roll
							}for
							end
						}bind
					}{
						Lookup
					}ifelse
				}ifelse
				]setcolorspace_opt
				set_crd
			}ifelse
		}ifelse
	end
}def
/setindexedcolor
{
	AGMCORE_host_sep{
		/indexed_colorspace_dict AGMCORE_gget
		begin
		currentdict/CSDBase known{
			CSDBase/CSD get_res begin
			currentdict/Names known{
				map_indexed_devn
				devn
			}
			{
				Lookup 1 3 -1 roll map_index
				sep
			}ifelse
			end
		}{
			Lookup MappedCSA/DeviceCMYK eq{4}{1}ifelse 3 -1 roll
			map_index
			MappedCSA/DeviceCMYK eq{setcmykcolor}{setgray}ifelse
		}ifelse
		end
	}{
		level3 not AGMCORE_in_rip_sep and/indexed_colorspace_dict AGMCORE_gget/CSDBase known and{
			/indexed_colorspace_dict AGMCORE_gget/CSDBase get/CSD get_res begin
			map_indexed_devn
			devn
			end
		}
		{
			setcolor
		}ifelse
	}ifelse
}def
/ignoreimagedata
{
	currentoverprint not{
		gsave
		dup clonedict begin
		1 setgray
		/Decode[0 1]def
		/DataSource<FF>def
		/MultipleDataSources false def
		/BitsPerComponent 8 def
		currentdict end
		systemdict/image gx
		grestore
		}if
	consumeimagedata
}def
/add_res
{
	dup/CSD eq{
		pop 
		//Adobe_AGM_Core begin
		/AGMCORE_CSD_cache load 3 1 roll put
		end
	}{
		defineresource pop
	}ifelse
}def
/del_res
{
	{
		aload pop exch
		dup/CSD eq{
			pop 
			{//Adobe_AGM_Core/AGMCORE_CSD_cache get exch undef}forall
		}{
			exch
			{1 index undefineresource}forall
			pop
		}ifelse
	}forall
}def
/get_res
{
	dup/CSD eq{
		pop
		dup type dup/nametype eq exch/stringtype eq or{
			AGMCORE_CSD_cache exch get
		}if
	}{
		findresource
	}ifelse
}def
/get_csa_by_name
{
	dup type dup/nametype eq exch/stringtype eq or{
		/CSA get_res
	}if
}def
/paintproc_buf_init
{
	/count get 0 0 put
}def
/paintproc_buf_next
{
	dup/count get dup 0 get
	dup 3 1 roll
	1 add 0 xpt
	get				
}def
/cachepaintproc_compress
{
	5 dict begin
	currentfile exch 0 exch/SubFileDecode filter/ReadFilter exch def
	/ppdict 20 dict def
	/string_size 16000 def
	/readbuffer string_size string def
	currentglobal true setglobal 
	ppdict 1 array dup 0 1 put/count xpt
	setglobal
	/LZWFilter 
	{
		exch
		dup length 0 eq{
			pop
		}{
			ppdict dup length 1 sub 3 -1 roll put
		}ifelse
		{string_size}{0}ifelse string
	}/LZWEncode filter def
	{		
		ReadFilter readbuffer readstring
		exch LZWFilter exch writestring
		not{exit}if
	}loop
	LZWFilter closefile
	ppdict				
	end
}def
/cachepaintproc
{
	2 dict begin
	currentfile exch 0 exch/SubFileDecode filter/ReadFilter exch def
	/ppdict 20 dict def
	currentglobal true setglobal 
	ppdict 1 array dup 0 1 put/count xpt
	setglobal
	{
		ReadFilter 16000 string readstring exch
		ppdict dup length 1 sub 3 -1 roll put
		not{exit}if
	}loop
	ppdict dup dup length 1 sub()put					
	end	
}def
/make_pattern
{
	exch clonedict exch
	dup matrix currentmatrix matrix concatmatrix 0 0 3 2 roll itransform
	exch 3 index/XStep get 1 index exch 2 copy div cvi mul sub sub
	exch 3 index/YStep get 1 index exch 2 copy div cvi mul sub sub
	matrix translate exch matrix concatmatrix
			 1 index begin
		BBox 0 get XStep div cvi XStep mul/xshift exch neg def
		BBox 1 get YStep div cvi YStep mul/yshift exch neg def
		BBox 0 get xshift add
		BBox 1 get yshift add
		BBox 2 get xshift add
		BBox 3 get yshift add
		4 array astore
		/BBox exch def
		[xshift yshift/translate load null/exec load]dup
		3/PaintProc load put cvx/PaintProc exch def
		end
	gsave 0 setgray
	makepattern
	grestore
}def
/set_pattern
{
	dup/PatternType get 1 eq{
		dup/PaintType get 1 eq{
			currentoverprint sop[/DeviceGray]setcolorspace 0 setgray
		}if
	}if
	setpattern
}def
/setcolorspace_opt
{
	dup currentcolorspace eq{pop}{setcolorspace}ifelse
}def
/updatecolorrendering
{
	currentcolorrendering/RenderingIntent known{
		currentcolorrendering/RenderingIntent get
	}
	{
		Intent/AbsoluteColorimetric eq 
		{
			/absolute_colorimetric_crd AGMCORE_gget dup null eq
		}
		{
			Intent/RelativeColorimetric eq
			{
				/relative_colorimetric_crd AGMCORE_gget dup null eq
			}
			{
				Intent/Saturation eq
				{
					/saturation_crd AGMCORE_gget dup null eq
				}
				{
					/perceptual_crd AGMCORE_gget dup null eq
				}ifelse
			}ifelse
		}ifelse
		{
			pop null	
		}
		{
			/RenderingIntent known{null}{Intent}ifelse
		}ifelse
	}ifelse
	Intent ne{
		Intent/ColorRendering{findresource}stopped
		{
			pop pop systemdict/findcolorrendering known
			{
 				Intent findcolorrendering
 				{
 					/ColorRendering findresource true exch
 				}
 				{
 					/ColorRendering findresource
					product(Xerox Phaser 5400)ne
					exch
 				}ifelse
				dup Intent/AbsoluteColorimetric eq 
				{
					/absolute_colorimetric_crd exch AGMCORE_gput
				}
				{
					Intent/RelativeColorimetric eq
					{
						/relative_colorimetric_crd exch AGMCORE_gput
					}
					{
						Intent/Saturation eq
						{
							/saturation_crd exch AGMCORE_gput
						}
						{
							Intent/Perceptual eq
							{
								/perceptual_crd exch AGMCORE_gput
							}
							{
								pop
							}ifelse
						}ifelse
					}ifelse
				}ifelse
				1 index{exch}{pop}ifelse
			}
			{false}ifelse
		}
		{true}ifelse
		{
			dup begin
			currentdict/TransformPQR known{
				currentdict/TransformPQR get aload pop
				3{{}eq 3 1 roll}repeat or or
			}
			{true}ifelse
			currentdict/MatrixPQR known{
				currentdict/MatrixPQR get aload pop
				1.0 eq 9 1 roll 0.0 eq 9 1 roll 0.0 eq 9 1 roll
				0.0 eq 9 1 roll 1.0 eq 9 1 roll 0.0 eq 9 1 roll
				0.0 eq 9 1 roll 0.0 eq 9 1 roll 1.0 eq
				and and and and and and and and
			}
			{true}ifelse
			end
			or
			{
				clonedict begin
				/TransformPQR[
					{4 -1 roll 3 get dup 3 1 roll sub 5 -1 roll 3 get 3 -1 roll sub div
					3 -1 roll 3 get 3 -1 roll 3 get dup 4 1 roll sub mul add}bind
					{4 -1 roll 4 get dup 3 1 roll sub 5 -1 roll 4 get 3 -1 roll sub div
					3 -1 roll 4 get 3 -1 roll 4 get dup 4 1 roll sub mul add}bind
					{4 -1 roll 5 get dup 3 1 roll sub 5 -1 roll 5 get 3 -1 roll sub div
					3 -1 roll 5 get 3 -1 roll 5 get dup 4 1 roll sub mul add}bind
				]def
				/MatrixPQR[0.8951 -0.7502 0.0389 0.2664 1.7135 -0.0685 -0.1614 0.0367 1.0296]def
				/RangePQR[-0.3227950745 2.3229645538 -1.5003771057 3.5003465881 -0.1369979095 2.136967392]def
				currentdict end
			}if
			setcolorrendering_opt
		}if		
	}if
}def
/set_crd
{
	AGMCORE_host_sep not level2 and{
		currentdict/ColorRendering known{
			ColorRendering/ColorRendering{findresource}stopped not{setcolorrendering_opt}if
		}{
			currentdict/Intent known{
				updatecolorrendering
			}if
		}ifelse
		currentcolorspace dup type/arraytype eq
			{0 get}if
		/DeviceRGB eq
			{
			currentdict/UCR known
				{/UCR}{/AGMCORE_currentucr}ifelse
			load setundercolorremoval
			currentdict/BG known 
				{/BG}{/AGMCORE_currentbg}ifelse
			load setblackgeneration
			}if
	}if
}def
/set_ucrbg
{
	dup null eq {pop /AGMCORE_currentbg load}{/Procedure get_res}ifelse
	dup currentblackgeneration eq {pop}{setblackgeneration}ifelse
	dup null eq {pop /AGMCORE_currentucr load}{/Procedure get_res}ifelse
	dup currentundercolorremoval eq {pop}{setundercolorremoval}ifelse
}def
/setcolorrendering_opt
{
	dup currentcolorrendering eq{
		pop
	}{
		product(HP Color LaserJet 2605)anchorsearch{
			pop pop pop
		}{
			pop
			clonedict
			begin
				/Intent Intent def
				currentdict
			end
			setcolorrendering
		}ifelse
	}ifelse
}def
/cpaint_gcomp
{
	convert_to_process//Adobe_AGM_Core/AGMCORE_ConvertToProcess xddf
	//Adobe_AGM_Core/AGMCORE_ConvertToProcess get not
	{
		(%end_cpaint_gcomp)flushinput
	}if
}def
/cpaint_gsep
{
	//Adobe_AGM_Core/AGMCORE_ConvertToProcess get
	{	
		(%end_cpaint_gsep)flushinput
	}if
}def
/cpaint_gend
{np}def
/T1_path
{
	currentfile token pop currentfile token pop mo
	{
		currentfile token pop dup type/stringtype eq
			{pop exit}if 
		0 exch rlineto 
		currentfile token pop dup type/stringtype eq
			{pop exit}if 
		0 rlineto
	}loop
}def
/T1_gsave
	level3
	{/clipsave}
	{/gsave}ifelse
	load def
/T1_grestore
	level3
	{/cliprestore}
	{/grestore}ifelse 
	load def
/set_spot_alias_ary
{
	dup inherit_aliases
	//Adobe_AGM_Core/AGMCORE_SpotAliasAry xddf
}def
/set_spot_normalization_ary
{
	dup inherit_aliases
	dup length
	/AGMCORE_SpotAliasAry where{pop AGMCORE_SpotAliasAry length add}if
	array
	//Adobe_AGM_Core/AGMCORE_SpotAliasAry2 xddf
	/AGMCORE_SpotAliasAry where{
		pop
		AGMCORE_SpotAliasAry2 0 AGMCORE_SpotAliasAry putinterval
		AGMCORE_SpotAliasAry length
	}{0}ifelse
	AGMCORE_SpotAliasAry2 3 1 roll exch putinterval
	true set_spot_alias
}def
/inherit_aliases
{
	{dup/Name get map_alias{/CSD put}{pop}ifelse}forall
}def
/set_spot_alias
{
	/AGMCORE_SpotAliasAry2 where{
		/AGMCORE_current_spot_alias 3 -1 roll put
	}{
		pop
	}ifelse
}def
/current_spot_alias
{
	/AGMCORE_SpotAliasAry2 where{
		/AGMCORE_current_spot_alias get
	}{
		false
	}ifelse
}def
/map_alias
{
	/AGMCORE_SpotAliasAry2 where{
		begin
			/AGMCORE_name xdf
			false	
			AGMCORE_SpotAliasAry2{
				dup/Name get AGMCORE_name eq{
					/CSD get/CSD get_res
					exch pop true
					exit
				}{
					pop
				}ifelse
			}forall
		end
	}{
		pop false
	}ifelse
}bdf
/spot_alias
{
	true set_spot_alias
	/AGMCORE_&setcustomcolor AGMCORE_key_known not{
		//Adobe_AGM_Core/AGMCORE_&setcustomcolor/setcustomcolor load put
	}if
	/customcolor_tint 1 AGMCORE_gput
	//Adobe_AGM_Core begin
	/setcustomcolor
	{
		//Adobe_AGM_Core begin
		dup/customcolor_tint exch AGMCORE_gput
		1 index aload pop pop 1 eq exch 1 eq and exch 1 eq and exch 1 eq and not
		current_spot_alias and{1 index 4 get map_alias}{false}ifelse
		{
			false set_spot_alias
			/sep_colorspace_dict AGMCORE_gget null ne
			{/sep_colorspace_dict AGMCORE_gget/ForeignContent known not}{false}ifelse
			3 1 roll 2 index{
				exch pop/sep_tint AGMCORE_gget exch
			}if
			mark 3 1 roll
			setsepcolorspace
			counttomark 0 ne{
				setsepcolor
			}if
			pop
			not{/sep_tint 1.0 AGMCORE_gput/sep_colorspace_dict AGMCORE_gget/ForeignContent true put}if
			pop
			true set_spot_alias
		}{
			AGMCORE_&setcustomcolor
		}ifelse
		end
	}bdf
	end
}def
/begin_feature
{
	Adobe_AGM_Core/AGMCORE_feature_dictCount countdictstack put
	count Adobe_AGM_Core/AGMCORE_feature_opCount 3 -1 roll put
	{Adobe_AGM_Core/AGMCORE_feature_ctm matrix currentmatrix put}if
}def
/end_feature
{
	2 dict begin
	/spd/setpagedevice load def
	/setpagedevice{get_gstate spd set_gstate}def
	stopped{$error/newerror false put}if
	end
	count Adobe_AGM_Core/AGMCORE_feature_opCount get sub dup 0 gt{{pop}repeat}{pop}ifelse
	countdictstack Adobe_AGM_Core/AGMCORE_feature_dictCount get sub dup 0 gt{{end}repeat}{pop}ifelse
	{Adobe_AGM_Core/AGMCORE_feature_ctm get setmatrix}if
}def
/set_negative
{
	//Adobe_AGM_Core begin
	/AGMCORE_inverting exch def
	level2{
		currentpagedevice/NegativePrint known AGMCORE_distilling not and{
			currentpagedevice/NegativePrint get//Adobe_AGM_Core/AGMCORE_inverting get ne{
				true begin_feature true{
						<</NegativePrint//Adobe_AGM_Core/AGMCORE_inverting get>>setpagedevice
				}end_feature
			}if
			/AGMCORE_inverting false def
		}if
	}if
	AGMCORE_inverting{
		[{1 exch sub}/exec load dup currenttransfer exch]cvx bind settransfer
 		AGMCORE_distilling{
 			erasepage
 		}{
 			gsave np clippath 1/setseparationgray where{pop setseparationgray}{setgray}ifelse
 			/AGMIRS_&fill where{pop AGMIRS_&fill}{fill}ifelse grestore
 		}ifelse
	}if
	end
}def
/lw_save_restore_override{
	/md where{
		pop
		md begin
		initializepage
		/initializepage{}def
		/pmSVsetup{}def
		/endp{}def
		/pse{}def
		/psb{}def
		/orig_showpage where
			{pop}
			{/orig_showpage/showpage load def}
		ifelse
		/showpage{orig_showpage gR}def
		end
	}if
}def
/pscript_showpage_override{
	/NTPSOct95 where
	{
		begin
		showpage
		save
		/showpage/restore load def
		/restore{exch pop}def
		end
	}if
}def
/driver_media_override
{
	/md where{
		pop
		md/initializepage known{
			md/initializepage{}put
		}if
		md/rC known{
			md/rC{4{pop}repeat}put
		}if
	}if
	/mysetup where{
		/mysetup[1 0 0 1 0 0]put
	}if
	Adobe_AGM_Core/AGMCORE_Default_CTM matrix currentmatrix put
	level2
		{Adobe_AGM_Core/AGMCORE_Default_PageSize currentpagedevice/PageSize get put}if
}def
/capture_mysetup
{
	/Pscript_Win_Data where{
		pop
		Pscript_Win_Data/mysetup known{
			Adobe_AGM_Core/save_mysetup Pscript_Win_Data/mysetup get put
		}if
	}if
}def
/restore_mysetup
{
	/Pscript_Win_Data where{
		pop
		Pscript_Win_Data/mysetup known{
			Adobe_AGM_Core/save_mysetup known{
				Pscript_Win_Data/mysetup Adobe_AGM_Core/save_mysetup get put
				Adobe_AGM_Core/save_mysetup undef
			}if
		}if
	}if
}def
/driver_check_media_override
{
 	/PrepsDict where
 		{pop}
		{
		Adobe_AGM_Core/AGMCORE_Default_CTM get matrix currentmatrix ne
		Adobe_AGM_Core/AGMCORE_Default_PageSize get type/arraytype eq
			{
			Adobe_AGM_Core/AGMCORE_Default_PageSize get 0 get currentpagedevice/PageSize get 0 get eq and
			Adobe_AGM_Core/AGMCORE_Default_PageSize get 1 get currentpagedevice/PageSize get 1 get eq and
			}if
			{
			Adobe_AGM_Core/AGMCORE_Default_CTM get setmatrix
			}if
		}ifelse
}def
AGMCORE_err_strings begin
	/AGMCORE_bad_environ(Environment not satisfactory for this job. Ensure that the PPD is correct or that the PostScript level requested is supported by this printer. )def
	/AGMCORE_color_space_onhost_seps(This job contains colors that will not separate with on-host methods. )def
	/AGMCORE_invalid_color_space(This job contains an invalid color space. )def
end
/set_def_ht
{AGMCORE_def_ht sethalftone}def
/set_def_flat
{AGMCORE_Default_flatness setflat}def
end
systemdict/setpacking known
{setpacking}if
%%EndResource
%%BeginResource: procset Adobe_CoolType_Core 2.31 0
%%Copyright: Copyright 1997-2006 Adobe Systems Incorporated. All Rights Reserved.
%%Version: 2.31 0
10 dict begin
/Adobe_CoolType_Passthru currentdict def
/Adobe_CoolType_Core_Defined userdict/Adobe_CoolType_Core known def
Adobe_CoolType_Core_Defined
	{/Adobe_CoolType_Core userdict/Adobe_CoolType_Core get def}
if
userdict/Adobe_CoolType_Core 70 dict dup begin put
/Adobe_CoolType_Version 2.31 def
/Level2?
	systemdict/languagelevel known dup
		{pop systemdict/languagelevel get 2 ge}
	if def
Level2? not
	{
	/currentglobal false def
	/setglobal/pop load def
	/gcheck{pop false}bind def
	/currentpacking false def
	/setpacking/pop load def
	/SharedFontDirectory 0 dict def
	}
if
currentpacking
true setpacking
currentglobal false setglobal
userdict/Adobe_CoolType_Data 2 copy known not
	{2 copy 10 dict put}
if
get
	 begin
	/@opStackCountByLevel 32 dict def
	/@opStackLevel 0 def
	/@dictStackCountByLevel 32 dict def
	/@dictStackLevel 0 def
	 end
setglobal
currentglobal true setglobal
userdict/Adobe_CoolType_GVMFonts known not
	{userdict/Adobe_CoolType_GVMFonts 10 dict put}
if
setglobal
currentglobal false setglobal
userdict/Adobe_CoolType_LVMFonts known not
	{userdict/Adobe_CoolType_LVMFonts 10 dict put}
if
setglobal
/ct_VMDictPut
	{
	dup gcheck{Adobe_CoolType_GVMFonts}{Adobe_CoolType_LVMFonts}ifelse
	3 1 roll put
	}bind def
/ct_VMDictUndef
	{
	dup Adobe_CoolType_GVMFonts exch known
		{Adobe_CoolType_GVMFonts exch undef}
		{
			dup Adobe_CoolType_LVMFonts exch known
			{Adobe_CoolType_LVMFonts exch undef}
			{pop}
			ifelse
		}ifelse
	}bind def
/ct_str1 1 string def
/ct_xshow
{
	/_ct_na exch def
	/_ct_i 0 def
	currentpoint
	/_ct_y exch def
	/_ct_x exch def
	{
		pop pop
		ct_str1 exch 0 exch put
		ct_str1 show
		{_ct_na _ct_i get}stopped 
		{pop pop}
		{
			_ct_x _ct_y moveto
			0
			rmoveto
		}
		ifelse
		/_ct_i _ct_i 1 add def
		currentpoint
		/_ct_y exch def
		/_ct_x exch def
	}
	exch
	@cshow
}bind def
/ct_yshow
{
	/_ct_na exch def
	/_ct_i 0 def
	currentpoint
	/_ct_y exch def
	/_ct_x exch def
	{
		pop pop
		ct_str1 exch 0 exch put
		ct_str1 show
		{_ct_na _ct_i get}stopped 
		{pop pop}
		{
			_ct_x _ct_y moveto
			0 exch
			rmoveto
		}
		ifelse
		/_ct_i _ct_i 1 add def
		currentpoint
		/_ct_y exch def
		/_ct_x exch def
	}
	exch
	@cshow
}bind def
/ct_xyshow
{
	/_ct_na exch def
	/_ct_i 0 def
	currentpoint
	/_ct_y exch def
	/_ct_x exch def
	{
		pop pop
		ct_str1 exch 0 exch put
		ct_str1 show
		{_ct_na _ct_i get}stopped 
		{pop pop}
		{
			{_ct_na _ct_i 1 add get}stopped 
			{pop pop pop}
			{
				_ct_x _ct_y moveto
				rmoveto
			}
			ifelse
		}
		ifelse
		/_ct_i _ct_i 2 add def
		currentpoint
		/_ct_y exch def
		/_ct_x exch def
	}
	exch
	@cshow
}bind def
/xsh{{@xshow}stopped{Adobe_CoolType_Data begin ct_xshow end}if}bind def
/ysh{{@yshow}stopped{Adobe_CoolType_Data begin ct_yshow end}if}bind def
/xysh{{@xyshow}stopped{Adobe_CoolType_Data begin ct_xyshow end}if}bind def
currentglobal true setglobal
/ct_T3Defs
{
/BuildChar
{
	1 index/Encoding get exch get
	1 index/BuildGlyph get exec
}bind def
/BuildGlyph
{
	exch begin
	GlyphProcs exch get exec
	end
}bind def
}bind def
setglobal
/@_SaveStackLevels
	{
	Adobe_CoolType_Data
		begin
		/@vmState currentglobal def false setglobal
		@opStackCountByLevel
		@opStackLevel
		2 copy known not
			{
			2 copy
			3 dict dup/args
			7 index
			5 add array put
			put get
			}
			{
			get dup/args get dup length 3 index lt
				{
				dup length 5 add array exch
				1 index exch 0 exch putinterval
				1 index exch/args exch put
				}
				{pop}
			ifelse
			}
		ifelse
			begin
			count 1 sub
			1 index lt
				{pop count}
			if
			dup/argCount exch def
			dup 0 gt
				{
				args exch 0 exch getinterval 
			astore pop
				}
				{pop}
			ifelse
			count
			/restCount exch def
			end
		/@opStackLevel @opStackLevel 1 add def
		countdictstack 1 sub
		@dictStackCountByLevel exch @dictStackLevel exch put
		/@dictStackLevel @dictStackLevel 1 add def
		@vmState setglobal
		end
	}bind def
/@_RestoreStackLevels
	{
	Adobe_CoolType_Data
		begin
		/@opStackLevel @opStackLevel 1 sub def
		@opStackCountByLevel @opStackLevel get
			begin
			count restCount sub dup 0 gt
				{{pop}repeat}
				{pop}
			ifelse
			args 0 argCount getinterval{}forall
			end
		/@dictStackLevel @dictStackLevel 1 sub def
		@dictStackCountByLevel @dictStackLevel get
		end
	countdictstack exch sub dup 0 gt
		{{end}repeat}
		{pop}
	ifelse
	}bind def
/@_PopStackLevels
	{
	Adobe_CoolType_Data
		begin
		/@opStackLevel @opStackLevel 1 sub def
		/@dictStackLevel @dictStackLevel 1 sub def
		end
	}bind def
/@Raise
	{
	exch cvx exch errordict exch get exec
	stop
	}bind def
/@ReRaise
	{
	cvx $error/errorname get errordict exch get exec
	stop
	}bind def
/@Stopped
	{
	0 @#Stopped
	}bind def
/@#Stopped
	{
	@_SaveStackLevels
	stopped
		{@_RestoreStackLevels true}
		{@_PopStackLevels false}
	ifelse
	}bind def
/@Arg
	{
	Adobe_CoolType_Data
		begin
		@opStackCountByLevel @opStackLevel 1 sub get
		begin
		args exch
		argCount 1 sub exch sub get
		end
		end
	}bind def
currentglobal true setglobal
/CTHasResourceForAllBug
	Level2?
		{
		1 dict dup
				/@shouldNotDisappearDictValue true def
				Adobe_CoolType_Data exch/@shouldNotDisappearDict exch put
				begin
				count @_SaveStackLevels
					{(*){pop stop}128 string/Category resourceforall}
				stopped pop
				@_RestoreStackLevels
				currentdict Adobe_CoolType_Data/@shouldNotDisappearDict get dup 3 1 roll ne dup 3 1 roll
					{
						 /@shouldNotDisappearDictValue known
								{
										 {
												end
												currentdict 1 index eq
													{pop exit}
												if
										 }
									 loop
								}
						 if
					}
					{
						 pop
						 end
					}
				ifelse
		}
		{false}
	ifelse
	def
true setglobal
/CTHasResourceStatusBug
	Level2?
		{
		mark
			{/steveamerige/Category resourcestatus}
		stopped
			{cleartomark true}
			{cleartomark currentglobal not}
		ifelse
		}
		{false}
	ifelse
	def
setglobal
/CTResourceStatus
		{
		mark 3 1 roll
		/Category findresource
			begin
			({ResourceStatus}stopped)0()/SubFileDecode filter cvx exec
				{cleartomark false}
				{{3 2 roll pop true}{cleartomark false}ifelse}
			ifelse
			end
		}bind def
/CTWorkAroundBugs
	{
	Level2?
		{
		/cid_PreLoad/ProcSet resourcestatus
			{
			pop pop
			currentglobal
			mark
				{
				(*)
					{
					dup/CMap CTHasResourceStatusBug
						{CTResourceStatus}
						{resourcestatus}
					ifelse
						{
						pop dup 0 eq exch 1 eq or
							{
							dup/CMap findresource gcheck setglobal
							/CMap undefineresource
							}
							{
							pop CTHasResourceForAllBug
								{exit}
								{stop}
							ifelse
							}
						ifelse
						}
						{pop}
					ifelse
					}
				128 string/CMap resourceforall
				}
			stopped
				{cleartomark}
			stopped pop
			setglobal
			}
		if
		}
	if
	}bind def
/ds
	{
	Adobe_CoolType_Core
		begin
		CTWorkAroundBugs
		/mo/moveto load def
		/nf/newencodedfont load def
		/msf{makefont setfont}bind def
		/uf{dup undefinefont ct_VMDictUndef}bind def
		/ur/undefineresource load def
		/chp/charpath load def
		/awsh/awidthshow load def
		/wsh/widthshow load def
		/ash/ashow load def
		/@xshow/xshow load def
		/@yshow/yshow load def
		/@xyshow/xyshow load def
		/@cshow/cshow load def
		/sh/show load def
		/rp/repeat load def
		/.n/.notdef def
		end
		currentglobal false setglobal
	 userdict/Adobe_CoolType_Data 2 copy known not
		 {2 copy 10 dict put}
		if
		get
		begin
		/AddWidths? false def
		/CC 0 def
		/charcode 2 string def
		/@opStackCountByLevel 32 dict def
		/@opStackLevel 0 def
		/@dictStackCountByLevel 32 dict def
		/@dictStackLevel 0 def
		/InVMFontsByCMap 10 dict def
		/InVMDeepCopiedFonts 10 dict def
		end
		setglobal
	}bind def
/dt
	{
	currentdict Adobe_CoolType_Core eq
		{end}
	if
	}bind def
/ps
	{
	Adobe_CoolType_Core begin
	Adobe_CoolType_GVMFonts begin
	Adobe_CoolType_LVMFonts begin
	SharedFontDirectory begin
	}bind def
/pt
	{
	end
	end
	end
	end
	}bind def
/unload
	{
	systemdict/languagelevel known
		{
		systemdict/languagelevel get 2 ge
			{
			userdict/Adobe_CoolType_Core 2 copy known
				{undef}
				{pop pop}
			ifelse
			}
		if
		}
	if
	}bind def
/ndf
	{
	1 index where
		{pop pop pop}
		{dup xcheck{bind}if def}
	ifelse
	}def
/findfont systemdict
	begin
	userdict
		begin
		/globaldict where{/globaldict get begin}if
			dup where pop exch get
		/globaldict where{pop end}if
		end
	end
Adobe_CoolType_Core_Defined
	{/systemfindfont exch def}
	{
	/findfont 1 index def
	/systemfindfont exch def
	}
ifelse
/undefinefont
	{pop}ndf
/copyfont
	{
	currentglobal 3 1 roll
	1 index gcheck setglobal
	dup null eq{0}{dup length}ifelse
	2 index length add 1 add dict
		begin
		exch
			{
			1 index/FID eq
				{pop pop}
				{def}
			ifelse
			}
		forall
		dup null eq
			{pop}
			{{def}forall}
		ifelse
		currentdict
		end
	exch setglobal
	}bind def
/copyarray
	{
	currentglobal exch
	dup gcheck setglobal
	dup length array copy
	exch setglobal
	}bind def
/newencodedfont
	{
	currentglobal
		{
		SharedFontDirectory 3 index known
			{SharedFontDirectory 3 index get/FontReferenced known}
			{false}
		ifelse
		}
		{
		FontDirectory 3 index known
			{FontDirectory 3 index get/FontReferenced known}
			{
			SharedFontDirectory 3 index known
				{SharedFontDirectory 3 index get/FontReferenced known}
				{false}
			ifelse
			}
		ifelse
		}
	ifelse
	dup
		{
		3 index findfont/FontReferenced get
		2 index dup type/nametype eq
			{findfont}
		if ne
			{pop false}
		if
		}
	if
	dup
		{
		1 index dup type/nametype eq
			{findfont}
		 if
		dup/CharStrings known
			{
			/CharStrings get length
			4 index findfont/CharStrings get length
			ne
				{
				pop false
				}
			if 
			}
			{pop}
			ifelse
		}
	if
		{
		pop
		1 index findfont
		/Encoding get exch
		0 1 255
			{2 copy get 3 index 3 1 roll put}
		for
		pop pop pop
		}
		{
		currentglobal
	 4 1 roll
		dup type/nametype eq
		 {findfont}
	 if
	 dup gcheck setglobal
		dup dup maxlength 2 add dict
			begin
			exch
				{
				1 index/FID ne
				2 index/Encoding ne and
					{def}
					{pop pop}
				ifelse
				}
			forall
			/FontReferenced exch def
			/Encoding exch dup length array copy def
			/FontName 1 index dup type/stringtype eq{cvn}if def dup
			currentdict
			end
		definefont ct_VMDictPut
		setglobal
		}
	ifelse
	}bind def
/SetSubstituteStrategy
	{
	$SubstituteFont
		begin
		dup type/dicttype ne
			{0 dict}
		if
		currentdict/$Strategies known
			{
			exch $Strategies exch 
			2 copy known
				{
				get
				2 copy maxlength exch maxlength add dict
					begin
					{def}forall
					{def}forall
					currentdict
					dup/$Init known
						{dup/$Init get exec}
					if
					end
				/$Strategy exch def
				}
				{pop pop pop}
			ifelse
			}
			{pop pop}
		ifelse
		end
	}bind def
/scff
	{
	$SubstituteFont
		begin
		dup type/stringtype eq
			{dup length exch}
			{null}
		ifelse
		/$sname exch def
		/$slen exch def
		/$inVMIndex
			$sname null eq
				{
				1 index $str cvs
				dup length $slen sub $slen getinterval cvn
				}
				{$sname}
			ifelse def
		end
		{findfont}
	@Stopped
		{
		dup length 8 add string exch
		1 index 0(BadFont:)putinterval
		1 index exch 8 exch dup length string cvs putinterval cvn
			{findfont}
		@Stopped
			{pop/Courier findfont}
		if
		}
	if
	$SubstituteFont
		begin
		/$sname null def
		/$slen 0 def
		/$inVMIndex null def
		end
	}bind def
/isWidthsOnlyFont
	{
	dup/WidthsOnly known
		{pop pop true}
		{
		dup/FDepVector known
			{/FDepVector get{isWidthsOnlyFont dup{exit}if}forall}
			{
			dup/FDArray known
				{/FDArray get{isWidthsOnlyFont dup{exit}if}forall}
				{pop}
			ifelse
			}
		ifelse
		}
	ifelse
	}bind def
/ct_StyleDicts 4 dict dup begin
		 /Adobe-Japan1 4 dict dup begin
					 Level2?
								{
								/Serif
								/HeiseiMin-W3-83pv-RKSJ-H/Font resourcestatus
								{pop pop/HeiseiMin-W3}
								{
							/CIDFont/Category resourcestatus
							{
								pop pop
								/HeiseiMin-W3/CIDFont resourcestatus
								{pop pop/HeiseiMin-W3}
								{/Ryumin-Light}
								ifelse
							}
							{/Ryumin-Light}
							ifelse
								}
								ifelse
								def
								/SansSerif
								/HeiseiKakuGo-W5-83pv-RKSJ-H/Font resourcestatus
								{pop pop/HeiseiKakuGo-W5}
								{
							/CIDFont/Category resourcestatus
							{
								pop pop
								/HeiseiKakuGo-W5/CIDFont resourcestatus
								{pop pop/HeiseiKakuGo-W5}
								{/GothicBBB-Medium}
								ifelse
							}
							{/GothicBBB-Medium}
							ifelse
								}
								ifelse
								def
								/HeiseiMaruGo-W4-83pv-RKSJ-H/Font resourcestatus
								{pop pop/HeiseiMaruGo-W4}
								{
							/CIDFont/Category resourcestatus
							{
								pop pop
								/HeiseiMaruGo-W4/CIDFont resourcestatus
								{pop pop/HeiseiMaruGo-W4}
								{
									/Jun101-Light-RKSJ-H/Font resourcestatus
									{pop pop/Jun101-Light}
									{SansSerif}
									ifelse
								}
								ifelse
							}
							{
								/Jun101-Light-RKSJ-H/Font resourcestatus
								{pop pop/Jun101-Light}
								{SansSerif}
								ifelse
							}
							ifelse
								}
								ifelse
								/RoundSansSerif exch def
								/Default Serif def
								}
								{
								/Serif/Ryumin-Light def
								/SansSerif/GothicBBB-Medium def
								{
								(fonts/Jun101-Light-83pv-RKSJ-H)status
								}stopped
								{pop}{
										 {pop pop pop pop/Jun101-Light}
										 {SansSerif}
										 ifelse
										 /RoundSansSerif exch def
								}ifelse
								/Default Serif def
								}
					 ifelse
		 end
		 def
		 /Adobe-Korea1 4 dict dup begin
					/Serif/HYSMyeongJo-Medium def
					/SansSerif/HYGoThic-Medium def
					/RoundSansSerif SansSerif def
					/Default Serif def
		 end
		 def
		 /Adobe-GB1 4 dict dup begin
					/Serif/STSong-Light def
					/SansSerif/STHeiti-Regular def
					/RoundSansSerif SansSerif def
					/Default Serif def
		 end
		 def
		 /Adobe-CNS1 4 dict dup begin
					/Serif/MKai-Medium def
					/SansSerif/MHei-Medium def
					/RoundSansSerif SansSerif def
					/Default Serif def
		 end
		 def
end
def
Level2?{currentglobal true setglobal}if
/ct_BoldRomanWidthProc 
	{
	stringwidth 1 index 0 ne{exch .03 add exch}if setcharwidth
	0 0
	}bind def
/ct_Type0WidthProc 
	{
	 dup stringwidth 0 0 moveto 
	 2 index true charpath pathbbox
	 0 -1 
	 7 index 2 div .88 
	 setcachedevice2
	 pop
	0 0
	}bind def
/ct_Type0WMode1WidthProc 
	{
	 dup stringwidth 
	 pop 2 div neg -0.88
	2 copy
	moveto 
	0 -1
	 5 -1 roll true charpath pathbbox
	 setcachedevice
	}bind def
/cHexEncoding
[/c00/c01/c02/c03/c04/c05/c06/c07/c08/c09/c0A/c0B/c0C/c0D/c0E/c0F/c10/c11/c12
/c13/c14/c15/c16/c17/c18/c19/c1A/c1B/c1C/c1D/c1E/c1F/c20/c21/c22/c23/c24/c25
/c26/c27/c28/c29/c2A/c2B/c2C/c2D/c2E/c2F/c30/c31/c32/c33/c34/c35/c36/c37/c38
/c39/c3A/c3B/c3C/c3D/c3E/c3F/c40/c41/c42/c43/c44/c45/c46/c47/c48/c49/c4A/c4B
/c4C/c4D/c4E/c4F/c50/c51/c52/c53/c54/c55/c56/c57/c58/c59/c5A/c5B/c5C/c5D/c5E
/c5F/c60/c61/c62/c63/c64/c65/c66/c67/c68/c69/c6A/c6B/c6C/c6D/c6E/c6F/c70/c71
/c72/c73/c74/c75/c76/c77/c78/c79/c7A/c7B/c7C/c7D/c7E/c7F/c80/c81/c82/c83/c84
/c85/c86/c87/c88/c89/c8A/c8B/c8C/c8D/c8E/c8F/c90/c91/c92/c93/c94/c95/c96/c97
/c98/c99/c9A/c9B/c9C/c9D/c9E/c9F/cA0/cA1/cA2/cA3/cA4/cA5/cA6/cA7/cA8/cA9/cAA
/cAB/cAC/cAD/cAE/cAF/cB0/cB1/cB2/cB3/cB4/cB5/cB6/cB7/cB8/cB9/cBA/cBB/cBC/cBD
/cBE/cBF/cC0/cC1/cC2/cC3/cC4/cC5/cC6/cC7/cC8/cC9/cCA/cCB/cCC/cCD/cCE/cCF/cD0
/cD1/cD2/cD3/cD4/cD5/cD6/cD7/cD8/cD9/cDA/cDB/cDC/cDD/cDE/cDF/cE0/cE1/cE2/cE3
/cE4/cE5/cE6/cE7/cE8/cE9/cEA/cEB/cEC/cED/cEE/cEF/cF0/cF1/cF2/cF3/cF4/cF5/cF6
/cF7/cF8/cF9/cFA/cFB/cFC/cFD/cFE/cFF]def
/ct_BoldBaseFont 
	 11 dict begin
		/FontType 3 def
		/FontMatrix[1 0 0 1 0 0]def
		/FontBBox[0 0 1 1]def
		/Encoding cHexEncoding def 
		/_setwidthProc/ct_BoldRomanWidthProc load def
		/_bcstr1 1 string def
		/BuildChar
		{
			exch begin
				_basefont setfont
				_bcstr1 dup 0 4 -1 roll put
				dup 
				_setwidthProc
				3 copy 
				moveto				
				show
				_basefonto setfont
				moveto
				show
			end
		}bind def
		 currentdict
	 end 
def
systemdict/composefont known
{
/ct_DefineIdentity-H
{
	/Identity-H/CMap resourcestatus
	{
		pop pop
	}
	{
		/CIDInit/ProcSet findresource begin
		 12 dict begin
		 begincmap
		 /CIDSystemInfo 3 dict dup begin
			 /Registry(Adobe)def
			 /Ordering(Identity)def
			 /Supplement 0 def
		 end def
		 /CMapName/Identity-H def
		 /CMapVersion 1.000 def
		 /CMapType 1 def
		 1 begincodespacerange
		 <0000><FFFF>
		 endcodespacerange
		 1 begincidrange
		 <0000><FFFF>0
		 endcidrange
		 endcmap
		 CMapName currentdict/CMap defineresource pop
		 end
		 end
	 }
	 ifelse
}
def
/ct_BoldBaseCIDFont 
	 11 dict begin
		/CIDFontType 1 def
		/CIDFontName/ct_BoldBaseCIDFont def
		/FontMatrix[1 0 0 1 0 0]def
		/FontBBox[0 0 1 1]def
		/_setwidthProc/ct_Type0WidthProc load def
		/_bcstr2 2 string def
		/BuildGlyph
		{
			exch begin		 
				_basefont setfont
				_bcstr2 1 2 index 256 mod put
				_bcstr2 0 3 -1 roll 256 idiv put
				_bcstr2 dup _setwidthProc		 
				3 copy 
				moveto
				show
				_basefonto setfont
				moveto
				show
			end
		}bind def
		 currentdict
	 end 
def
}if
Level2?{setglobal}if
/ct_CopyFont{
	{
		1 index/FID ne 2 index/UniqueID ne and
		{def}{pop pop}ifelse
	}forall
}bind def
/ct_Type0CopyFont 
{
	exch
	dup length dict
	begin
	ct_CopyFont
	[
	exch
	FDepVector 
	{
		 dup/FontType get 0 eq
		{	
		1 index ct_Type0CopyFont 
		/_ctType0 exch definefont
		}
		{
		/_ctBaseFont exch
		2 index exec
		}
		 ifelse 
		 exch
	}
	forall 
	pop
	]				
	/FDepVector exch def
	currentdict
	end
}bind def
/ct_MakeBoldFont
{
	 dup/ct_SyntheticBold known
	{
		dup length 3 add dict begin 
		ct_CopyFont 
		/ct_StrokeWidth .03 0 FontMatrix idtransform pop def 
		/ct_SyntheticBold true def
		currentdict 
		end 
		definefont
	}
	{
		dup dup length 3 add dict
		begin
			ct_CopyFont
			/PaintType 2 def
			/StrokeWidth .03 0 FontMatrix idtransform pop def
			/dummybold currentdict
		end
		definefont
		dup/FontType get dup 9 ge exch 11 le and 
		{
			ct_BoldBaseCIDFont
			dup length 3 add dict copy begin
			dup/CIDSystemInfo get/CIDSystemInfo exch def
			ct_DefineIdentity-H
			/_Type0Identity/Identity-H 3 -1 roll[exch]composefont
			/_basefont exch def
			/_Type0Identity/Identity-H 3 -1 roll[exch]composefont
			/_basefonto exch def
			currentdict
			end
			/CIDFont defineresource
		}
		{
			ct_BoldBaseFont
			dup length 3 add dict copy begin
			/_basefont exch def
			/_basefonto exch def
			currentdict
			end
			definefont
		}
		ifelse
	}
	ifelse
}bind def
/ct_MakeBold{
	1 index 
	1 index
	findfont
	currentglobal 5 1 roll
	dup gcheck setglobal
		dup
		 /FontType get 0 eq
			{
				dup/WMode known{dup/WMode get 1 eq}{false}ifelse
				version length 4 ge
				and
					{version 0 4 getinterval cvi 2015 ge}
					{true}
				ifelse 
					{/ct_Type0WidthProc}
					{/ct_Type0WMode1WidthProc}
				ifelse
				ct_BoldBaseFont/_setwidthProc 3 -1 roll load put
						{ct_MakeBoldFont}ct_Type0CopyFont definefont
			}
			{
				dup/_fauxfont known not 1 index/SubstMaster known not and
				{
					 ct_BoldBaseFont/_setwidthProc /ct_BoldRomanWidthProc load put
					 ct_MakeBoldFont 
				}
				{
				2 index 2 index eq
					{exch pop	}
					{
						dup length dict begin
						ct_CopyFont
						currentdict
						end
						definefont 
					}
				ifelse
				}
			ifelse
			}
		 ifelse
		 pop pop pop
		 setglobal
}bind def
/?str1 256 string def
/?set
	{
	$SubstituteFont
		begin
		/$substituteFound false def
		/$fontname 1 index def
		/$doSmartSub false def
		end
	dup
	 findfont
	$SubstituteFont
		begin
		$substituteFound
			{false}
			{
			dup/FontName known
				{
				dup/FontName get $fontname eq
				1 index/DistillerFauxFont known not and
				/currentdistillerparams where
					{pop false 2 index isWidthsOnlyFont not and}
				if
				}
				{false}
			ifelse
			}
		ifelse
		exch pop
		/$doSmartSub true def
		end
		{
		5 1 roll pop pop pop pop
		findfont
		}
		{
		1 index
		findfont
		dup/FontType get 3 eq
		{
			6 1 roll pop pop pop pop pop false
		}
		{pop true}
		ifelse
		{
		$SubstituteFont
		begin
		pop pop
		/$styleArray 1 index def
		/$regOrdering 2 index def
		pop pop
		0 1 $styleArray length 1 sub
		{
			$styleArray exch get
			ct_StyleDicts $regOrdering
			2 copy known
			{
				get
				exch 2 copy known not
				{pop/Default}
				if
				get
				dup type/nametype eq
				{
				?str1 cvs length dup 1 add exch
				?str1 exch(-)putinterval
				exch dup length exch ?str1 exch 3 index exch putinterval
				add ?str1 exch 0 exch getinterval cvn
				}
				{
				pop pop/Unknown
				}
				ifelse
			}
			{
				pop pop pop pop/Unknown
			}
			ifelse
		}
		for
		end
		findfont 
		}if
		}
	ifelse
	currentglobal false setglobal 3 1 roll
	null copyfont definefont pop
	setglobal
	}bind def
setpacking
userdict/$SubstituteFont 25 dict put
1 dict
	begin
	/SubstituteFont
		dup $error exch 2 copy known
			{get}
			{pop pop{pop/Courier}bind}
		ifelse def
	/currentdistillerparams where dup
		{
		pop pop
		currentdistillerparams/CannotEmbedFontPolicy 2 copy known
			{get/Error eq}
			{pop pop false}
		ifelse
		}
	if not
		{
		countdictstack array dictstack 0 get
			begin
			userdict
				begin
				$SubstituteFont
					begin
					/$str 128 string def
					/$fontpat 128 string def
					/$slen 0 def
					/$sname null def
					/$match false def
					/$fontname null def
					/$substituteFound false def
					/$inVMIndex null def
					/$doSmartSub true def
					/$depth 0 def
					/$fontname null def
					/$italicangle 26.5 def
					/$dstack null def
					/$Strategies 10 dict dup
						begin
						/$Type3Underprint
							{
							currentglobal exch false setglobal
							11 dict
								begin
								/UseFont exch
									$WMode 0 ne
										{
										dup length dict copy
										dup/WMode $WMode put
										/UseFont exch definefont
										}
									if def
								/FontName $fontname dup type/stringtype eq{cvn}if def
								/FontType 3 def
								/FontMatrix[.001 0 0 .001 0 0]def
								/Encoding 256 array dup 0 1 255{/.notdef put dup}for pop def
								/FontBBox[0 0 0 0]def
								/CCInfo 7 dict dup
									begin
									/cc null def
									/x 0 def
									/y 0 def
									end def
								/BuildChar
									{
									exch
										begin
										CCInfo
											begin
											1 string dup 0 3 index put exch pop
											/cc exch def
											UseFont 1000 scalefont setfont
											cc stringwidth/y exch def/x exch def
											x y setcharwidth
											$SubstituteFont/$Strategy get/$Underprint get exec
											0 0 moveto cc show
											x y moveto
											end
										end
									}bind def
								currentdict
								end
							exch setglobal
							}bind def
						/$GetaTint
							2 dict dup
								begin
								/$BuildFont
									{
									dup/WMode known
										{dup/WMode get}
										{0}
									ifelse
									/$WMode exch def
									$fontname exch
									dup/FontName known
										{
										dup/FontName get
										dup type/stringtype eq{cvn}if
										}
										{/unnamedfont}
									ifelse
									exch
									Adobe_CoolType_Data/InVMDeepCopiedFonts get
									1 index/FontName get known
										{
										pop
										Adobe_CoolType_Data/InVMDeepCopiedFonts get
										1 index get
										null copyfont
										}
										{$deepcopyfont}
									ifelse
									exch 1 index exch/FontBasedOn exch put
									dup/FontName $fontname dup type/stringtype eq{cvn}if put
									definefont
									Adobe_CoolType_Data/InVMDeepCopiedFonts get
										begin
										dup/FontBasedOn get 1 index def
										end
									}bind def
								/$Underprint
									{
									gsave
									x abs y abs gt
										{/y 1000 def}
										{/x -1000 def 500 120 translate}
									ifelse
									Level2?
										{
										[/Separation(All)/DeviceCMYK{0 0 0 1 pop}]
										setcolorspace
										}
										{0 setgray}
									ifelse
									10 setlinewidth
									x .8 mul
									[7 3]
										{
										y mul 8 div 120 sub x 10 div exch moveto
										0 y 4 div neg rlineto
										dup 0 rlineto
										0 y 4 div rlineto
										closepath
										gsave
										Level2?
											{.2 setcolor}
											{.8 setgray}
										ifelse
										fill grestore
										stroke
										}
									forall
									pop
									grestore
									}bind def
								end def
						/$Oblique
							1 dict dup
								begin
								/$BuildFont
									{
									currentglobal exch dup gcheck setglobal
									null copyfont
										begin
										/FontBasedOn
										currentdict/FontName known
											{
											FontName
											dup type/stringtype eq{cvn}if
											}
											{/unnamedfont}
										ifelse
										def
										/FontName $fontname dup type/stringtype eq{cvn}if def
										/currentdistillerparams where
											{pop}
											{
											/FontInfo currentdict/FontInfo known
												{FontInfo null copyfont}
												{2 dict}
											ifelse
											dup
												begin
												/ItalicAngle $italicangle def
												/FontMatrix FontMatrix
												[1 0 ItalicAngle dup sin exch cos div 1 0 0]
												matrix concatmatrix readonly
												end
											4 2 roll def
											def
											}
										ifelse
										FontName currentdict
										end
									definefont
									exch setglobal
									}bind def
								end def
						/$None
							1 dict dup
								begin
								/$BuildFont{}bind def
								end def
						end def
					/$Oblique SetSubstituteStrategy
					/$findfontByEnum
						{
						dup type/stringtype eq{cvn}if
						dup/$fontname exch def
						$sname null eq
							{$str cvs dup length $slen sub $slen getinterval}
							{pop $sname}
						ifelse
						$fontpat dup 0(fonts/*)putinterval exch 7 exch putinterval
						/$match false def
						$SubstituteFont/$dstack countdictstack array dictstack put
						mark
							{
							$fontpat 0 $slen 7 add getinterval
								{/$match exch def exit}
							$str filenameforall
							}
						stopped
							{
							cleardictstack
							currentdict
							true
							$SubstituteFont/$dstack get
								{
								exch
									{
									1 index eq
										{pop false}
										{true}
									ifelse
									}
									{begin false}
								ifelse
								}
							forall
							pop
							}
						if
						cleartomark
						/$slen 0 def
						$match false ne
							{$match(fonts/)anchorsearch pop pop cvn}
							{/Courier}
						ifelse
						}bind def
					/$ROS 1 dict dup
						begin
						/Adobe 4 dict dup
							begin
							/Japan1 [/Ryumin-Light/HeiseiMin-W3
										 /GothicBBB-Medium/HeiseiKakuGo-W5
										 /HeiseiMaruGo-W4/Jun101-Light]def
							/Korea1 [/HYSMyeongJo-Medium/HYGoThic-Medium]def
							/GB1	 [/STSong-Light/STHeiti-Regular]def
							/CNS1	[/MKai-Medium/MHei-Medium]def
							end def
						end def
					/$cmapname null def
					/$deepcopyfont
						{
						dup/FontType get 0 eq
							{
							1 dict dup/FontName/copied put copyfont
								begin
								/FDepVector FDepVector copyarray
								0 1 2 index length 1 sub
									{
									2 copy get $deepcopyfont
									dup/FontName/copied put
									/copied exch definefont
									3 copy put pop pop
									}
								for
								def
								currentdict
								end
							}
							{$Strategies/$Type3Underprint get exec}
						ifelse
						}bind def
					/$buildfontname
						{
						dup/CIDFont findresource/CIDSystemInfo get
							begin
							Registry length Ordering length Supplement 8 string cvs
							3 copy length 2 add add add string
							dup 5 1 roll dup 0 Registry putinterval
							dup 4 index(-)putinterval
							dup 4 index 1 add Ordering putinterval
							4 2 roll add 1 add 2 copy(-)putinterval
							end
						1 add 2 copy 0 exch getinterval $cmapname $fontpat cvs exch
						anchorsearch
							{pop pop 3 2 roll putinterval cvn/$cmapname exch def}
							{pop pop pop pop pop}
						ifelse
						length
						$str 1 index(-)putinterval 1 add
						$str 1 index $cmapname $fontpat cvs putinterval
						$cmapname length add
						$str exch 0 exch getinterval cvn
						}bind def
					/$findfontByROS
						{
						/$fontname exch def
						$ROS Registry 2 copy known
							{
							get Ordering 2 copy known
								{get}
								{pop pop[]}
							ifelse
							}
							{pop pop[]}
						ifelse
						false exch
							{
							dup/CIDFont resourcestatus
								{
								pop pop
								save
								1 index/CIDFont findresource
								dup/WidthsOnly known
									{dup/WidthsOnly get}
									{false}
								ifelse
								exch pop
								exch restore
									{pop}
									{exch pop true exit}
								ifelse
								}
								{pop}
							ifelse
							}
						forall
							{$str cvs $buildfontname}
							{
							false(*)
								{
								save exch
								dup/CIDFont findresource
								dup/WidthsOnly known
									{dup/WidthsOnly get not}
									{true}
								ifelse
								exch/CIDSystemInfo get
								dup/Registry get Registry eq
								exch/Ordering get Ordering eq and and
									{exch restore exch pop true exit}
									{pop restore}
								ifelse
								}
							$str/CIDFont resourceforall
								{$buildfontname}
								{$fontname $findfontByEnum}
							ifelse
							}
						ifelse
						}bind def
					end
				end
				currentdict/$error known currentdict/languagelevel known and dup
					{pop $error/SubstituteFont known}
				if
				dup
					{$error}
					{Adobe_CoolType_Core}
				ifelse
				begin
					{
					/SubstituteFont
					/CMap/Category resourcestatus
						{
						pop pop
						{
						$SubstituteFont
							begin
							/$substituteFound true def
							dup length $slen gt
							$sname null ne or
							$slen 0 gt and
								{
								$sname null eq
									{dup $str cvs dup length $slen sub $slen getinterval cvn}
									{$sname}
								ifelse
								Adobe_CoolType_Data/InVMFontsByCMap get
								1 index 2 copy known
									{
									get
									false exch
										{
										pop
										currentglobal
											{
											GlobalFontDirectory 1 index known
												{exch pop true exit}
												{pop}
											ifelse
											}
											{
											FontDirectory 1 index known
												{exch pop true exit}
												{
												GlobalFontDirectory 1 index known
													{exch pop true exit}
													{pop}
												ifelse
												}
											ifelse
											}
										ifelse
										}
									forall
									}
									{pop pop false}
								ifelse
									{
									exch pop exch pop
									}
									{
									dup/CMap resourcestatus
										{
										pop pop
										dup/$cmapname exch def
										/CMap findresource/CIDSystemInfo get{def}forall
										$findfontByROS
										}
										{
										128 string cvs
										dup(-)search
											{
											3 1 roll search
												{
												3 1 roll pop
													{dup cvi}
												stopped
													{pop pop pop pop pop $findfontByEnum}
													{
													4 2 roll pop pop
													exch length
													exch
													2 index length
													2 index
													sub
													exch 1 sub -1 0
														{
														$str cvs dup length
														4 index
														0
														4 index
														4 3 roll add
														getinterval
														exch 1 index exch 3 index exch
														putinterval
														dup/CMap resourcestatus
															{
															pop pop
															4 1 roll pop pop pop
															dup/$cmapname exch def
															/CMap findresource/CIDSystemInfo get{def}forall
															$findfontByROS
															true exit
															}
															{pop}
														ifelse
														}
													for
													dup type/booleantype eq
														{pop}
														{pop pop pop $findfontByEnum}
													ifelse
													}
												ifelse
												}
												{pop pop pop $findfontByEnum}
											ifelse
											}
											{pop pop $findfontByEnum}
										ifelse
										}
									ifelse
									}
								ifelse
								}
								{//SubstituteFont exec}
							ifelse
							/$slen 0 def
							end
						}
						}
						{
						{
						$SubstituteFont
							begin
							/$substituteFound true def
							dup length $slen gt
							$sname null ne or
							$slen 0 gt and
								{$findfontByEnum}
								{//SubstituteFont exec}
							ifelse
							end
						}
						}
					ifelse
					bind readonly def
					Adobe_CoolType_Core/scfindfont/systemfindfont load put
					}
					{
					/scfindfont
						{
						$SubstituteFont
							begin
							dup systemfindfont
							dup/FontName known
								{dup/FontName get dup 3 index ne}
								{/noname true}
							ifelse
							dup
								{
								/$origfontnamefound 2 index def
								/$origfontname 4 index def/$substituteFound true def
								}
							if
							exch pop
								{
								$slen 0 gt
								$sname null ne
								3 index length $slen gt or and
									{
									pop dup $findfontByEnum findfont
									dup maxlength 1 add dict
										begin
											{1 index/FID eq{pop pop}{def}ifelse}
										forall
										currentdict
										end
									definefont
									dup/FontName known{dup/FontName get}{null}ifelse
									$origfontnamefound ne
										{
										$origfontname $str cvs print
										( substitution revised, using )print
										dup/FontName known
											{dup/FontName get}{(unspecified font)}
										ifelse
										$str cvs print(.\n)print
										}
									if
									}
									{exch pop}
								ifelse
								}
								{exch pop}
							ifelse
							end
						}bind def
					}
				ifelse
				end
			end
		Adobe_CoolType_Core_Defined not
			{
			Adobe_CoolType_Core/findfont
				{
				$SubstituteFont
					begin
					$depth 0 eq
						{
						/$fontname 1 index dup type/stringtype ne{$str cvs}if def
						/$substituteFound false def
						}
					if
					/$depth $depth 1 add def
					end
				scfindfont
				$SubstituteFont
					begin
					/$depth $depth 1 sub def
					$substituteFound $depth 0 eq and
						{
						$inVMIndex null ne
							{dup $inVMIndex $AddInVMFont}
						if
						$doSmartSub
							{
							currentdict/$Strategy known
								{$Strategy/$BuildFont get exec}
							if
							}
						if
						}
					if
					end
				}bind put
			}
		if
		}
	if
	end
/$AddInVMFont
	{
	exch/FontName 2 copy known
		{
		get
		1 dict dup begin exch 1 index gcheck def end exch
		Adobe_CoolType_Data/InVMFontsByCMap get exch
		$DictAdd
		}
		{pop pop pop}
	ifelse
	}bind def
/$DictAdd
	{
	2 copy known not
		{2 copy 4 index length dict put}
	if
	Level2? not
		{
		2 copy get dup maxlength exch length 4 index length add lt
		2 copy get dup length 4 index length add exch maxlength 1 index lt
			{
			2 mul dict
				begin
				2 copy get{forall}def
				2 copy currentdict put
				end
			}
			{pop}
		ifelse
		}
	if
	get
		begin
			{def}
		forall
		end
	}bind def
end
end
%%EndResource
currentglobal true setglobal
%%BeginResource: procset Adobe_CoolType_Utility_MAKEOCF 1.23 0
%%Copyright: Copyright 1987-2006 Adobe Systems Incorporated.
%%Version: 1.23 0
systemdict/languagelevel known dup
	{currentglobal false setglobal}
	{false}
ifelse
exch
userdict/Adobe_CoolType_Utility 2 copy known
	{2 copy get dup maxlength 27 add dict copy}
	{27 dict}
ifelse put
Adobe_CoolType_Utility
	begin
	/@eexecStartData
		 <BAB431EA07F209EB8C4348311481D9D3F76E3D15246555577D87BC510ED54E
		 118C39697FA9F6DB58128E60EB8A12FA24D7CDD2FA94D221FA9EC8DA3E5E6A1C
		 4ACECC8C2D39C54E7C946031DD156C3A6B4A09AD29E1867A>def
	/@recognizeCIDFont null def
	/ct_Level2? exch def
	/ct_Clone? 1183615869 internaldict dup
			/CCRun known not
			exch/eCCRun known not
			ct_Level2? and or def
ct_Level2?
	{globaldict begin currentglobal true setglobal}
if
	/ct_AddStdCIDMap
		ct_Level2?
			{{
				mark
				Adobe_CoolType_Utility/@recognizeCIDFont currentdict put
					{
					((Hex)57 StartData
					 0615 1e27 2c39 1c60 d8a8 cc31 fe2b f6e0
					 7aa3 e541 e21c 60d8 a8c9 c3d0 6d9e 1c60
					 d8a8 c9c2 02d7 9a1c 60d8 a849 1c60 d8a8
					 cc36 74f4 1144 b13b 77)0()/SubFileDecode filter cvx exec
					}
				stopped
					{
					 cleartomark
					 Adobe_CoolType_Utility/@recognizeCIDFont get
					 countdictstack dup array dictstack
					 exch 1 sub -1 0
						 {
						 2 copy get 3 index eq
								{1 index length exch sub 1 sub{end}repeat exit}
								{pop}
						 ifelse
						 }
					 for
					 pop pop
					 Adobe_CoolType_Utility/@eexecStartData get eexec
					}
					{cleartomark}
				ifelse
			}}
			{{
				Adobe_CoolType_Utility/@eexecStartData get eexec
			}}
		ifelse bind def
userdict/cid_extensions known
dup{cid_extensions/cid_UpdateDB known and}if
	{
	 cid_extensions
	 begin
	/cid_GetCIDSystemInfo
		{
		 1 index type/stringtype eq
			{exch cvn exch}
		 if
		 cid_extensions
			 begin
			 dup load 2 index known
				{
				 2 copy
				 cid_GetStatusInfo
				 dup null ne
					{
					 1 index load
					 3 index get
					 dup null eq
						 {pop pop cid_UpdateDB}
						 {
						 exch
						 1 index/Created get eq
							 {exch pop exch pop}
							 {pop cid_UpdateDB}
						 ifelse
						 }
					 ifelse
					}
					{pop cid_UpdateDB}
				 ifelse
				}
				{cid_UpdateDB}
			 ifelse
			 end
		}bind def
	 end
	}
if
ct_Level2?
	{end setglobal}
if
	/ct_UseNativeCapability? systemdict/composefont known def
	/ct_MakeOCF 35 dict def
	/ct_Vars 25 dict def
	/ct_GlyphDirProcs 6 dict def
	/ct_BuildCharDict 15 dict dup
		begin
		/charcode 2 string def
		/dst_string 1500 string def
		/nullstring()def
		/usewidths? true def
		end def
	ct_Level2?{setglobal}{pop}ifelse
	ct_GlyphDirProcs
		begin
		/GetGlyphDirectory
			{
			systemdict/languagelevel known
				{pop/CIDFont findresource/GlyphDirectory get}
				{
				1 index/CIDFont findresource/GlyphDirectory
				get dup type/dicttype eq
					{
					dup dup maxlength exch length sub 2 index lt
						{
						dup length 2 index add dict copy 2 index
						/CIDFont findresource/GlyphDirectory 2 index put
						}
					if
					}
				if
				exch pop exch pop
				}
			ifelse
			+
			}def
		/+
			{
			systemdict/languagelevel known
				{
				currentglobal false setglobal
				3 dict begin
					/vm exch def
				}
				{1 dict begin}
			ifelse
			/$ exch def
			systemdict/languagelevel known
				{
				vm setglobal
				/gvm currentglobal def
				$ gcheck setglobal
				}
			if
			?{$ begin}if
			}def
		/?{$ type/dicttype eq}def
		/|{
			userdict/Adobe_CoolType_Data known
				{
			Adobe_CoolType_Data/AddWidths? known
				{
				 currentdict Adobe_CoolType_Data
					begin
					 begin
						AddWidths?
								{
								Adobe_CoolType_Data/CC 3 index put
								?{def}{$ 3 1 roll put}ifelse
								CC charcode exch 1 index 0 2 index 256 idiv put
								1 index exch 1 exch 256 mod put
								stringwidth 2 array astore
								currentfont/Widths get exch CC exch put
								}
								{?{def}{$ 3 1 roll put}ifelse}
							ifelse
					end
				end
				}
				{?{def}{$ 3 1 roll put}ifelse}	ifelse
				}
				{?{def}{$ 3 1 roll put}ifelse}
			ifelse
			}def
		/!
			{
			?{end}if
			systemdict/languagelevel known
				{gvm setglobal}
			if
			end
			}def
		/:{string currentfile exch readstring pop}executeonly def
		end
	ct_MakeOCF
		begin
		/ct_cHexEncoding
		[/c00/c01/c02/c03/c04/c05/c06/c07/c08/c09/c0A/c0B/c0C/c0D/c0E/c0F/c10/c11/c12
		/c13/c14/c15/c16/c17/c18/c19/c1A/c1B/c1C/c1D/c1E/c1F/c20/c21/c22/c23/c24/c25
		/c26/c27/c28/c29/c2A/c2B/c2C/c2D/c2E/c2F/c30/c31/c32/c33/c34/c35/c36/c37/c38
		/c39/c3A/c3B/c3C/c3D/c3E/c3F/c40/c41/c42/c43/c44/c45/c46/c47/c48/c49/c4A/c4B
		/c4C/c4D/c4E/c4F/c50/c51/c52/c53/c54/c55/c56/c57/c58/c59/c5A/c5B/c5C/c5D/c5E
		/c5F/c60/c61/c62/c63/c64/c65/c66/c67/c68/c69/c6A/c6B/c6C/c6D/c6E/c6F/c70/c71
		/c72/c73/c74/c75/c76/c77/c78/c79/c7A/c7B/c7C/c7D/c7E/c7F/c80/c81/c82/c83/c84
		/c85/c86/c87/c88/c89/c8A/c8B/c8C/c8D/c8E/c8F/c90/c91/c92/c93/c94/c95/c96/c97
		/c98/c99/c9A/c9B/c9C/c9D/c9E/c9F/cA0/cA1/cA2/cA3/cA4/cA5/cA6/cA7/cA8/cA9/cAA
		/cAB/cAC/cAD/cAE/cAF/cB0/cB1/cB2/cB3/cB4/cB5/cB6/cB7/cB8/cB9/cBA/cBB/cBC/cBD
		/cBE/cBF/cC0/cC1/cC2/cC3/cC4/cC5/cC6/cC7/cC8/cC9/cCA/cCB/cCC/cCD/cCE/cCF/cD0
		/cD1/cD2/cD3/cD4/cD5/cD6/cD7/cD8/cD9/cDA/cDB/cDC/cDD/cDE/cDF/cE0/cE1/cE2/cE3
		/cE4/cE5/cE6/cE7/cE8/cE9/cEA/cEB/cEC/cED/cEE/cEF/cF0/cF1/cF2/cF3/cF4/cF5/cF6
		/cF7/cF8/cF9/cFA/cFB/cFC/cFD/cFE/cFF]def
		/ct_CID_STR_SIZE 8000 def
		/ct_mkocfStr100 100 string def
		/ct_defaultFontMtx[.001 0 0 .001 0 0]def
		/ct_1000Mtx[1000 0 0 1000 0 0]def
		/ct_raise{exch cvx exch errordict exch get exec stop}bind def
		/ct_reraise
			{cvx $error/errorname get(Error: )print dup(						 )cvs print
					errordict exch get exec stop
			}bind def
		/ct_cvnsi
			{
			1 index add 1 sub 1 exch 0 4 1 roll
				{
				2 index exch get
				exch 8 bitshift
				add
				}
			for
			exch pop
			}bind def
		/ct_GetInterval
			{
			Adobe_CoolType_Utility/ct_BuildCharDict get
				begin
				/dst_index 0 def
				dup dst_string length gt
					{dup string/dst_string exch def}
				if
				1 index ct_CID_STR_SIZE idiv
				/arrayIndex exch def
				2 index arrayIndex get
				2 index
				arrayIndex ct_CID_STR_SIZE mul
				sub
					{
					dup 3 index add 2 index length le
						{
						2 index getinterval
						dst_string dst_index 2 index putinterval
						length dst_index add/dst_index exch def
						exit
						}
						{
						1 index length 1 index sub
						dup 4 1 roll
						getinterval
						dst_string dst_index 2 index putinterval
						pop dup dst_index add/dst_index exch def
						sub
						/arrayIndex arrayIndex 1 add def
						2 index dup length arrayIndex gt
							 {arrayIndex get}
							 {
							 pop
							 exit
							 }
						ifelse
						0
						}
					ifelse
					}
				loop
				pop pop pop
				dst_string 0 dst_index getinterval
				end
			}bind def
		ct_Level2?
			{
			/ct_resourcestatus
			currentglobal mark true setglobal
				{/unknowninstancename/Category resourcestatus}
			stopped
				{cleartomark setglobal true}
				{cleartomark currentglobal not exch setglobal}
			ifelse
				{
					{
					mark 3 1 roll/Category findresource
						begin
						ct_Vars/vm currentglobal put
						({ResourceStatus}stopped)0()/SubFileDecode filter cvx exec
							{cleartomark false}
							{{3 2 roll pop true}{cleartomark false}ifelse}
						ifelse
						ct_Vars/vm get setglobal
						end
					}
				}
				{{resourcestatus}}
			ifelse bind def
			/CIDFont/Category ct_resourcestatus
				{pop pop}
				{
				currentglobal true setglobal
				/Generic/Category findresource
				dup length dict copy
				dup/InstanceType/dicttype put
				/CIDFont exch/Category defineresource pop
				setglobal
				}
			ifelse
			ct_UseNativeCapability?
				{
				/CIDInit/ProcSet findresource begin
				12 dict begin
				begincmap
				/CIDSystemInfo 3 dict dup begin
				 /Registry(Adobe)def
				 /Ordering(Identity)def
				 /Supplement 0 def
				end def
				/CMapName/Identity-H def
				/CMapVersion 1.000 def
				/CMapType 1 def
				1 begincodespacerange
				<0000><FFFF>
				endcodespacerange
				1 begincidrange
				<0000><FFFF>0
				endcidrange
				endcmap
				CMapName currentdict/CMap defineresource pop
				end
				end
				}
			if
			}
			{
			/ct_Category 2 dict begin
			/CIDFont 10 dict def
			/ProcSet	2 dict def
			currentdict
			end
			def
			/defineresource
				{
				ct_Category 1 index 2 copy known
					{
					get
					dup dup maxlength exch length eq
						{
						dup length 10 add dict copy
						ct_Category 2 index 2 index put
						}
					if
					3 index 3 index put
					pop exch pop
					}
					{pop pop/defineresource/undefined ct_raise}
				ifelse
				}bind def
			/findresource
				{
				ct_Category 1 index 2 copy known
					{
					get
					2 index 2 copy known
						{get 3 1 roll pop pop}
						{pop pop/findresource/undefinedresource ct_raise}
					ifelse
					}
					{pop pop/findresource/undefined ct_raise}
				ifelse
				}bind def
			/resourcestatus
				{
				ct_Category 1 index 2 copy known
					{
					get
					2 index known
					exch pop exch pop
						{
						0 -1 true
						}
						{
						false
						}
					ifelse
					}
					{pop pop/findresource/undefined ct_raise}
				ifelse
				}bind def
			/ct_resourcestatus/resourcestatus load def
			}
		ifelse
		/ct_CIDInit 2 dict
			begin
			/ct_cidfont_stream_init
				{
					{
					dup(Binary)eq
						{
						pop
						null
						currentfile
						ct_Level2?
							{
								{cid_BYTE_COUNT()/SubFileDecode filter}
							stopped
								{pop pop pop}
							if
							}
						if
						/readstring load
						exit
						}
					if
					dup(Hex)eq
						{
						pop
						currentfile
						ct_Level2?
							{
								{null exch/ASCIIHexDecode filter/readstring}
							stopped
								{pop exch pop(>)exch/readhexstring}
							if
							}
							{(>)exch/readhexstring}
						ifelse
						load
						exit
						}
					if
					/StartData/typecheck ct_raise
					}
				loop
				cid_BYTE_COUNT ct_CID_STR_SIZE le
					{
					2 copy cid_BYTE_COUNT string exch exec
					pop
					1 array dup
					3 -1 roll
					0 exch put
					}
					{
					cid_BYTE_COUNT ct_CID_STR_SIZE div ceiling cvi
					dup array exch 2 sub 0 exch 1 exch
						{
						2 copy
						5 index
						ct_CID_STR_SIZE
						string
						6 index exec
						pop
						put
						pop
						}
					for
					2 index
					cid_BYTE_COUNT ct_CID_STR_SIZE mod string
					3 index exec
					pop
					1 index exch
					1 index length 1 sub
					exch put
					}
				ifelse
				cid_CIDFONT exch/GlyphData exch put
				2 index null eq
					{
					pop pop pop
					}
					{
					pop/readstring load
					1 string exch
						{
						3 copy exec
						pop
						dup length 0 eq
							{
							pop pop pop pop pop
							true exit
							}
						if
						4 index
						eq
							{
							pop pop pop pop
							false exit
							}
						if
						}
					loop
					pop
					}
				ifelse
				}bind def
			/StartData
				{
				mark
					{
					currentdict
					dup/FDArray get 0 get/FontMatrix get
					0 get 0.001 eq
						{
						dup/CDevProc known not
							{
							/CDevProc 1183615869 internaldict/stdCDevProc 2 copy known
								{get}
								{
								pop pop
								{pop pop pop pop pop 0 -1000 7 index 2 div 880}
								}
							ifelse
							def
							}
						if
						}
						{
						/CDevProc
							{
							 pop pop pop pop pop
							 0
							 1 cid_temp/cid_CIDFONT get
							/FDArray get 0 get
							/FontMatrix get 0 get div
							 7 index 2 div
							 1 index 0.88 mul
							}def
						}
					ifelse
					/cid_temp 15 dict def
					cid_temp
						begin
						/cid_CIDFONT exch def
						3 copy pop
						dup/cid_BYTE_COUNT exch def 0 gt
							{
							ct_cidfont_stream_init
							FDArray
								{
								/Private get
								dup/SubrMapOffset known
									{
									begin
									/Subrs SubrCount array def
									Subrs
									SubrMapOffset
									SubrCount
									SDBytes
									ct_Level2?
										{
										currentdict dup/SubrMapOffset undef
										dup/SubrCount undef
										/SDBytes undef
										}
									if
									end
									/cid_SD_BYTES exch def
									/cid_SUBR_COUNT exch def
									/cid_SUBR_MAP_OFFSET exch def
									/cid_SUBRS exch def
									cid_SUBR_COUNT 0 gt
										{
										GlyphData cid_SUBR_MAP_OFFSET cid_SD_BYTES ct_GetInterval
										0 cid_SD_BYTES ct_cvnsi
										0 1 cid_SUBR_COUNT 1 sub
											{
											exch 1 index
											1 add
											cid_SD_BYTES mul cid_SUBR_MAP_OFFSET add
											GlyphData exch cid_SD_BYTES ct_GetInterval
											0 cid_SD_BYTES ct_cvnsi
											cid_SUBRS 4 2 roll
											GlyphData exch
											4 index
											1 index
											sub
											ct_GetInterval
											dup length string copy put
											}
										for
										pop
										}
									if
									}
									{pop}
								ifelse
								}
							forall
							}
						if
						cleartomark pop pop
						end
					CIDFontName currentdict/CIDFont defineresource pop
					end end
					}
				stopped
					{cleartomark/StartData ct_reraise}
				if
				}bind def
			currentdict
			end def
		/ct_saveCIDInit
			{
			/CIDInit/ProcSet ct_resourcestatus
				{true}
				{/CIDInitC/ProcSet ct_resourcestatus}
			ifelse
				{
				pop pop
				/CIDInit/ProcSet findresource
				ct_UseNativeCapability?
					{pop null}
					{/CIDInit ct_CIDInit/ProcSet defineresource pop}
				ifelse
				}
				{/CIDInit ct_CIDInit/ProcSet defineresource pop null}
			ifelse
			ct_Vars exch/ct_oldCIDInit exch put
			}bind def
		/ct_restoreCIDInit
			{
			ct_Vars/ct_oldCIDInit get dup null ne
				{/CIDInit exch/ProcSet defineresource pop}
				{pop}
			ifelse
			}bind def
		/ct_BuildCharSetUp
			{
			1 index
				begin
				CIDFont
					begin
					Adobe_CoolType_Utility/ct_BuildCharDict get
						begin
						/ct_dfCharCode exch def
						/ct_dfDict exch def
						CIDFirstByte ct_dfCharCode add
						dup CIDCount ge
							{pop 0}
						if
						/cid exch def
							{
							GlyphDirectory cid 2 copy known
								{get}
								{pop pop nullstring}
							ifelse
							dup length FDBytes sub 0 gt
								{
								dup
								FDBytes 0 ne
									{0 FDBytes ct_cvnsi}
									{pop 0}
								ifelse
								/fdIndex exch def
								dup length FDBytes sub FDBytes exch getinterval
								/charstring exch def
								exit
								}
								{
								pop
								cid 0 eq
									{/charstring nullstring def exit}
								if
								/cid 0 def
								}
							ifelse
							}
						loop
			}def
		/ct_SetCacheDevice
			{
			0 0 moveto
			dup stringwidth
			3 -1 roll
			true charpath
			pathbbox
			0 -1000
			7 index 2 div 880
			setcachedevice2
			0 0 moveto
			}def
		/ct_CloneSetCacheProc
			{
			1 eq
				{
				stringwidth
				pop -2 div -880
				0 -1000 setcharwidth
				moveto
				}
				{
				usewidths?
					{
					currentfont/Widths get cid
					2 copy known
						{get exch pop aload pop}
						{pop pop stringwidth}
					ifelse
					}
					{stringwidth}
				ifelse
				setcharwidth
				0 0 moveto
				}
			ifelse
			}def
		/ct_Type3ShowCharString
			{
			ct_FDDict fdIndex 2 copy known
				{get}
				{
				currentglobal 3 1 roll
				1 index gcheck setglobal
				ct_Type1FontTemplate dup maxlength dict copy
					begin
					FDArray fdIndex get
					dup/FontMatrix 2 copy known
						{get}
						{pop pop ct_defaultFontMtx}
					ifelse
					/FontMatrix exch dup length array copy def
					/Private get
					/Private exch def
					/Widths rootfont/Widths get def
					/CharStrings 1 dict dup/.notdef
						<d841272cf18f54fc13>dup length string copy put def
					currentdict
					end
				/ct_Type1Font exch definefont
				dup 5 1 roll put
				setglobal
				}
			ifelse
			dup/CharStrings get 1 index/Encoding get
			ct_dfCharCode get charstring put
			rootfont/WMode 2 copy known
				{get}
				{pop pop 0}
			ifelse
			exch
			1000 scalefont setfont
			ct_str1 0 ct_dfCharCode put
			ct_str1 exch ct_dfSetCacheProc
			ct_SyntheticBold
				{
				currentpoint
				ct_str1 show
				newpath
				moveto
				ct_str1 true charpath
				ct_StrokeWidth setlinewidth
				stroke
				}
				{ct_str1 show}
			ifelse
			}def
		/ct_Type4ShowCharString
			{
			ct_dfDict ct_dfCharCode charstring
			FDArray fdIndex get
			dup/FontMatrix get dup ct_defaultFontMtx ct_matrixeq not
				{ct_1000Mtx matrix concatmatrix concat}
				{pop}
			ifelse
			/Private get
			Adobe_CoolType_Utility/ct_Level2? get not
				{
				ct_dfDict/Private
				3 -1 roll
					{put}
				1183615869 internaldict/superexec get exec
				}
			if
			1183615869 internaldict
			Adobe_CoolType_Utility/ct_Level2? get
				{1 index}
				{3 index/Private get mark 6 1 roll}
			ifelse
			dup/RunInt known
				{/RunInt get}
				{pop/CCRun}
			ifelse
			get exec
			Adobe_CoolType_Utility/ct_Level2? get not
				{cleartomark}
			if
			}bind def
		/ct_BuildCharIncremental
			{
				{
				Adobe_CoolType_Utility/ct_MakeOCF get begin
				ct_BuildCharSetUp
				ct_ShowCharString
				}
			stopped
				{stop}
			if
			end
			end
			end
			end
			}bind def
		/BaseFontNameStr(BF00)def
		/ct_Type1FontTemplate 14 dict
			begin
			/FontType 1 def
			/FontMatrix [0.001 0 0 0.001 0 0]def
			/FontBBox [-250 -250 1250 1250]def
			/Encoding ct_cHexEncoding def
			/PaintType 0 def
			currentdict
			end def
		/BaseFontTemplate 11 dict
			begin
			/FontMatrix [0.001 0 0 0.001 0 0]def
			/FontBBox [-250 -250 1250 1250]def
			/Encoding ct_cHexEncoding def
			/BuildChar/ct_BuildCharIncremental load def
			ct_Clone?
				{
				/FontType 3 def
				/ct_ShowCharString/ct_Type3ShowCharString load def
				/ct_dfSetCacheProc/ct_CloneSetCacheProc load def
				/ct_SyntheticBold false def
				/ct_StrokeWidth 1 def
				}
				{
				/FontType 4 def
				/Private 1 dict dup/lenIV 4 put def
				/CharStrings 1 dict dup/.notdef<d841272cf18f54fc13>put def
				/PaintType 0 def
				/ct_ShowCharString/ct_Type4ShowCharString load def
				}
			ifelse
			/ct_str1 1 string def
			currentdict
			end def
		/BaseFontDictSize BaseFontTemplate length 5 add def
		/ct_matrixeq
			{
			true 0 1 5
				{
				dup 4 index exch get exch 3 index exch get eq and
				dup not
					{exit}
				if
				}
			for
			exch pop exch pop
			}bind def
		/ct_makeocf
			{
			15 dict
				begin
				exch/WMode exch def
				exch/FontName exch def
				/FontType 0 def
				/FMapType 2 def
			dup/FontMatrix known
				{dup/FontMatrix get/FontMatrix exch def}
				{/FontMatrix matrix def}
			ifelse
				/bfCount 1 index/CIDCount get 256 idiv 1 add
					dup 256 gt{pop 256}if def
				/Encoding
					256 array 0 1 bfCount 1 sub{2 copy dup put pop}for
					bfCount 1 255{2 copy bfCount put pop}for
					def
				/FDepVector bfCount dup 256 lt{1 add}if array def
				BaseFontTemplate BaseFontDictSize dict copy
					begin
					/CIDFont exch def
					CIDFont/FontBBox known
						{CIDFont/FontBBox get/FontBBox exch def}
					if
					CIDFont/CDevProc known
						{CIDFont/CDevProc get/CDevProc exch def}
					if
					currentdict
					end
				BaseFontNameStr 3(0)putinterval
				0 1 bfCount dup 256 eq{1 sub}if
					{
					FDepVector exch
					2 index BaseFontDictSize dict copy
						begin
						dup/CIDFirstByte exch 256 mul def
						FontType 3 eq
							{/ct_FDDict 2 dict def}
						if
						currentdict
						end
					1 index 16
					BaseFontNameStr 2 2 getinterval cvrs pop
					BaseFontNameStr exch definefont
					put
					}
				for
				ct_Clone?
					{/Widths 1 index/CIDFont get/GlyphDirectory get length dict def}
				if
				FontName
				currentdict
				end
			definefont
			ct_Clone?
				{
				gsave
				dup 1000 scalefont setfont
				ct_BuildCharDict
					begin
					/usewidths? false def
					currentfont/Widths get
						begin
						exch/CIDFont get/GlyphDirectory get
							{
							pop
							dup charcode exch 1 index 0 2 index 256 idiv put
							1 index exch 1 exch 256 mod put
							stringwidth 2 array astore def
							}
						forall
						end
					/usewidths? true def
					end
				grestore
				}
				{exch pop}
			ifelse
			}bind def
		currentglobal true setglobal
		/ct_ComposeFont
			{
			ct_UseNativeCapability?
				{				
				2 index/CMap ct_resourcestatus
					{pop pop exch pop}
					{
					/CIDInit/ProcSet findresource
						begin
						12 dict
							begin
							begincmap
							/CMapName 3 index def
							/CMapVersion 1.000 def
							/CMapType 1 def
							exch/WMode exch def
							/CIDSystemInfo 3 dict dup
								begin
								/Registry(Adobe)def
								/Ordering
								CMapName ct_mkocfStr100 cvs
								(Adobe-)search
									{
									pop pop
									(-)search
										{
										dup length string copy
										exch pop exch pop
										}
										{pop(Identity)}
									ifelse
									}
									{pop (Identity)}
								ifelse
								def
								/Supplement 0 def
								end def
							1 begincodespacerange
							<0000><FFFF>
							endcodespacerange
							1 begincidrange
							<0000><FFFF>0
							endcidrange
							endcmap
							CMapName currentdict/CMap defineresource pop
							end
						end
					}
				ifelse
				composefont
				}
				{
				3 2 roll pop
				0 get/CIDFont findresource
				ct_makeocf
				}
			ifelse
			}bind def
			setglobal
		/ct_MakeIdentity
			{
			ct_UseNativeCapability?
				{
				1 index/CMap ct_resourcestatus
					{pop pop}
					{
					/CIDInit/ProcSet findresource begin
					12 dict begin
					begincmap
					/CMapName 2 index def
					/CMapVersion 1.000 def
					/CMapType 1 def
					/CIDSystemInfo 3 dict dup
						begin
						/Registry(Adobe)def
						/Ordering
						CMapName ct_mkocfStr100 cvs
						(Adobe-)search
							{
							pop pop
							(-)search
								{dup length string copy exch pop exch pop}
								{pop(Identity)}
							ifelse
							}
							{pop(Identity)}
						ifelse
						def
						/Supplement 0 def
						end def
					1 begincodespacerange
					<0000><FFFF>
					endcodespacerange
					1 begincidrange
					<0000><FFFF>0
					endcidrange
					endcmap
					CMapName currentdict/CMap defineresource pop
					end
					end
					}
				ifelse
				composefont
				}
				{
				exch pop
				0 get/CIDFont findresource
				ct_makeocf
				}
			ifelse
			}bind def
		currentdict readonly pop
		end
	end
%%EndResource
setglobal
%%BeginResource: procset Adobe_CoolType_Utility_T42 1.0 0
%%Copyright: Copyright 1987-2004 Adobe Systems Incorporated.
%%Version: 1.0 0
userdict/ct_T42Dict 15 dict put
ct_T42Dict begin
/Is2015?
{
 version
 cvi
 2015
 ge
}bind def
/AllocGlyphStorage
{
 Is2015?
 {	
	pop
 }
 {
	{string}forall
 }ifelse
}bind def
/Type42DictBegin
{
25 dict begin
 /FontName exch def
 /CharStrings 256 dict 
begin
	 /.notdef 0 def
	 currentdict 
end def
 /Encoding exch def
 /PaintType 0 def
 /FontType 42 def
 /FontMatrix[1 0 0 1 0 0]def
 4 array astore cvx/FontBBox exch def
 /sfnts
}bind def
/Type42DictEnd 
{
 currentdict dup/FontName get exch definefont end
ct_T42Dict exch
dup/FontName get exch put
}bind def
/RD{string currentfile exch readstring pop}executeonly def
/PrepFor2015
{
Is2015?
{		 
	/GlyphDirectory 
	 16
	 dict def
	 sfnts 0 get
	 dup
	 2 index
	(glyx)
	 putinterval
	 2 index 
	(locx)
	 putinterval
	 pop
	 pop
}
{
	 pop
	 pop
}ifelse			
}bind def
/AddT42Char
{
Is2015?
{
	/GlyphDirectory get 
	begin
	def
	end
	pop
	pop
}
{
	/sfnts get
	4 index
	get
	3 index
 2 index
	putinterval
	pop
	pop
	pop
	pop
}ifelse
}bind def
/T0AddT42Mtx2
{
/CIDFont findresource/Metrics2 get begin def end
}bind def
end
%%EndResource
currentglobal true setglobal
%%BeginFile: MMFauxFont.prc
%%Copyright: Copyright 1987-2001 Adobe Systems Incorporated. 
%%All Rights Reserved.
userdict /ct_EuroDict 10 dict put
ct_EuroDict begin
/ct_CopyFont 
{
    { 1 index /FID ne {def} {pop pop} ifelse} forall
} def
/ct_GetGlyphOutline
{
   gsave
   initmatrix newpath
   exch findfont dup 
   length 1 add dict 
   begin 
		ct_CopyFont 
		/Encoding Encoding dup length array copy 
		dup
		4 -1 roll
		0 exch put   
		def
		currentdict
   end
   /ct_EuroFont exch definefont
   1000 scalefont setfont
   0 0 moveto
   [
       <00> stringwidth 
       <00> false charpath
       pathbbox
       [
       {/m cvx} {/l cvx} {/c cvx} {/cp cvx} pathforall
   grestore
   counttomark 8 add
}
def
/ct_MakeGlyphProc
{
   ] cvx
   /ct_PSBuildGlyph cvx
   ] cvx
} def
/ct_PSBuildGlyph 
{ 
 	gsave 
	8 -1 roll pop 
	7 1 roll 
        6 -2 roll ct_FontMatrix transform 6 2 roll
        4 -2 roll ct_FontMatrix transform 4 2 roll
        ct_FontMatrix transform 
	currentdict /PaintType 2 copy known {get 2 eq}{pop pop false} ifelse  
	dup  9 1 roll 
	{  
		currentdict /StrokeWidth 2 copy known  
		{   
			get 2 div   
			0 ct_FontMatrix dtransform pop
			5 1 roll  
			4 -1 roll 4 index sub   
			4 1 roll   
			3 -1 roll 4 index sub  
			3 1 roll   
			exch 4 index add exch  
			4 index add  
			5 -1 roll pop  
		}  
		{	 
			pop pop 
		}  
		ifelse  
	}       
    if  
	setcachedevice  
        ct_FontMatrix concat
        ct_PSPathOps begin 
		exec 
	end 
	{  
		currentdict /StrokeWidth 2 copy known  
			{ get }  
			{ pop pop 0 }  
  	    ifelse  
		setlinewidth stroke  
	}  
	{   
	    fill  
	}  
	ifelse  
    grestore
} def 
/ct_PSPathOps 4 dict dup begin 
	/m {moveto} def 
	/l {lineto} def 
	/c {curveto} def 
	/cp {closepath} def 
end 
def 
/ct_matrix1000 [1000 0 0 1000 0 0] def
/ct_AddGlyphProc  
{
   2 index findfont dup length 4 add dict 
   begin 
	ct_CopyFont 
	/CharStrings CharStrings dup length 1 add dict copy
      begin
         3 1 roll def  
         currentdict 
      end 
      def
      /ct_FontMatrix ct_matrix1000 FontMatrix matrix concatmatrix def
      /ct_PSBuildGlyph /ct_PSBuildGlyph load def
      /ct_PSPathOps /ct_PSPathOps load def
      currentdict
   end
   definefont pop
}
def
systemdict /languagelevel known
{
	/ct_AddGlyphToPrinterFont {
		2 copy
		ct_GetGlyphOutline 3 add -1 roll restore 
		ct_MakeGlyphProc 
		ct_AddGlyphProc
	} def
}
{
	/ct_AddGlyphToPrinterFont {
	    pop pop restore
		Adobe_CTFauxDict /$$$FONTNAME get
		/Euro
		Adobe_CTFauxDict /$$$SUBSTITUTEBASE get
		ct_EuroDict exch get
		ct_AddGlyphProc
	} def
} ifelse
/AdobeSansMM 
{ 
556 0 24 -19 541 703 
	{ 
	541 628 m 
	510 669 442 703 354 703 c 
	201 703 117 607 101 444 c 
	50 444 l 
	25 372 l 
	97 372 l 
	97 301 l 
	49 301 l 
	24 229 l 
	103 229 l 
	124 67 209 -19 350 -19 c 
	435 -19 501 25 509 32 c 
	509 131 l 
	492 105 417 60 343 60 c 
	267 60 204 127 197 229 c 
	406 229 l 
	430 301 l 
	191 301 l 
	191 372 l 
	455 372 l 
	479 444 l 
	194 444 l 
	201 531 245 624 348 624 c 
	433 624 484 583 509 534 c 
	cp 
	556 0 m 
	}
ct_PSBuildGlyph
} def
/AdobeSerifMM 
{ 
500 0 10 -12 484 692 
	{ 
	347 298 m 
	171 298 l 
	170 310 170 322 170 335 c 
	170 362 l 
	362 362 l 
	374 403 l 
	172 403 l 
	184 580 244 642 308 642 c 
	380 642 434 574 457 457 c 
	481 462 l 
	474 691 l 
	449 691 l 
	433 670 429 657 410 657 c 
	394 657 360 692 299 692 c 
	204 692 94 604 73 403 c 
	22 403 l 
	10 362 l 
	70 362 l 
	69 352 69 341 69 330 c 
	69 319 69 308 70 298 c 
	22 298 l 
	10 257 l 
	73 257 l 
	97 57 216 -12 295 -12 c 
	364 -12 427 25 484 123 c 
	458 142 l 
	425 101 384 37 316 37 c 
	256 37 189 84 173 257 c 
	335 257 l 
	cp 
	500 0 m 
	} 
ct_PSBuildGlyph 
} def 
end		
%%EndFile
setglobal
Adobe_CoolType_Core begin /$None SetSubstituteStrategy end
%%BeginResource: procset Adobe_AGM_Image 1.0 0
%%Version: 1.0 0
%%Copyright: Copyright(C)2000-2006 Adobe Systems, Inc. All Rights Reserved.
systemdict/setpacking known
{
	currentpacking
	true setpacking
}if
userdict/Adobe_AGM_Image 71 dict dup begin put
/Adobe_AGM_Image_Id/Adobe_AGM_Image_1.0_0 def
/nd{
	null def
}bind def
/AGMIMG_&image nd
/AGMIMG_&colorimage nd
/AGMIMG_&imagemask nd
/AGMIMG_mbuf()def
/AGMIMG_ybuf()def
/AGMIMG_kbuf()def
/AGMIMG_c 0 def
/AGMIMG_m 0 def
/AGMIMG_y 0 def
/AGMIMG_k 0 def
/AGMIMG_tmp nd
/AGMIMG_imagestring0 nd
/AGMIMG_imagestring1 nd
/AGMIMG_imagestring2 nd
/AGMIMG_imagestring3 nd
/AGMIMG_imagestring4 nd
/AGMIMG_imagestring5 nd
/AGMIMG_cnt nd
/AGMIMG_fsave nd
/AGMIMG_colorAry nd
/AGMIMG_override nd
/AGMIMG_name nd
/AGMIMG_maskSource nd
/AGMIMG_flushfilters nd
/invert_image_samples nd
/knockout_image_samples	nd
/img nd
/sepimg nd
/devnimg nd
/idximg nd
/ds
{
	Adobe_AGM_Core begin
	Adobe_AGM_Image begin
	/AGMIMG_&image systemdict/image get def
	/AGMIMG_&imagemask systemdict/imagemask get def
	/colorimage where{
		pop
		/AGMIMG_&colorimage/colorimage ldf
	}if
	end
	end
}def
/ps
{
	Adobe_AGM_Image begin
	/AGMIMG_ccimage_exists{/customcolorimage where 
		{
			pop
			/Adobe_AGM_OnHost_Seps where
			{
			pop false
			}{
			/Adobe_AGM_InRip_Seps where
				{
				pop false
				}{
					true
				}ifelse
			}ifelse
			}{
			false
		}ifelse 
	}bdf
	level2{
		/invert_image_samples
		{
			Adobe_AGM_Image/AGMIMG_tmp Decode length ddf
			/Decode[Decode 1 get Decode 0 get]def
		}def
		/knockout_image_samples
		{
			Operator/imagemask ne{
				/Decode[1 1]def
			}if
		}def
	}{	
		/invert_image_samples
		{
			{1 exch sub}currenttransfer addprocs settransfer
		}def
		/knockout_image_samples
		{
			{pop 1}currenttransfer addprocs settransfer
		}def
	}ifelse
	/img/imageormask ldf
	/sepimg/sep_imageormask ldf
	/devnimg/devn_imageormask ldf
	/idximg/indexed_imageormask ldf
	/_ctype 7 def
	currentdict{
		dup xcheck 1 index type dup/arraytype eq exch/packedarraytype eq or and{
			bind
		}if
		def
	}forall
}def
/pt
{
	end
}def
/dt
{
}def
/AGMIMG_flushfilters
{
	dup type/arraytype ne
		{1 array astore}if
	dup 0 get currentfile ne
		{dup 0 get flushfile}if
		{
		dup type/filetype eq
			{
			dup status 1 index currentfile ne and
				{closefile}
				{pop}
			ifelse
			}{pop}ifelse
		}forall
}def
/AGMIMG_init_common
{
	currentdict/T known{/ImageType/T ldf currentdict/T undef}if
	currentdict/W known{/Width/W ldf currentdict/W undef}if
	currentdict/H known{/Height/H ldf currentdict/H undef}if
	currentdict/M known{/ImageMatrix/M ldf currentdict/M undef}if
	currentdict/BC known{/BitsPerComponent/BC ldf currentdict/BC undef}if
	currentdict/D known{/Decode/D ldf currentdict/D undef}if
	currentdict/DS known{/DataSource/DS ldf currentdict/DS undef}if
	currentdict/O known{
		/Operator/O load 1 eq{
			/imagemask
		}{
			/O load 2 eq{
				/image 
			}{
				/colorimage
			}ifelse
		}ifelse
		def
		currentdict/O undef
	}if
	currentdict/HSCI known{/HostSepColorImage/HSCI ldf currentdict/HSCI undef}if
	currentdict/MD known{/MultipleDataSources/MD ldf currentdict/MD undef}if
	currentdict/I known{/Interpolate/I ldf currentdict/I undef}if
	currentdict/SI known{/SkipImageProc/SI ldf currentdict/SI undef}if
	/DataSource load xcheck not{
		DataSource type/arraytype eq{
			DataSource 0 get type/filetype eq{
				/_Filters DataSource def
				currentdict/MultipleDataSources known not{
					/DataSource DataSource dup length 1 sub get def 
				}if
			}if
		}if
		currentdict/MultipleDataSources known not{
			/MultipleDataSources DataSource type/arraytype eq{
				DataSource length 1 gt
			}
			{false}ifelse def
		}if
	}if
	/NComponents Decode length 2 div def
	currentdict/SkipImageProc known not{/SkipImageProc{false}def}if
}bdf
/imageormask_sys
{
	begin
		AGMIMG_init_common
		save mark
		level2{
			currentdict
			Operator/imagemask eq{
				AGMIMG_&imagemask
			}{
				use_mask{
					process_mask AGMIMG_&image
				}{
					AGMIMG_&image
				}ifelse
			}ifelse
		}{
			Width Height
			Operator/imagemask eq{
				Decode 0 get 1 eq Decode 1 get 0 eq	and
				ImageMatrix/DataSource load
				AGMIMG_&imagemask
			}{
				BitsPerComponent ImageMatrix/DataSource load
				AGMIMG_&image
			}ifelse
		}ifelse
		currentdict/_Filters known{_Filters AGMIMG_flushfilters}if
		cleartomark restore
	end
}def
/overprint_plate
{
	currentoverprint{
		0 get dup type/nametype eq{
			dup/DeviceGray eq{
				pop AGMCORE_black_plate not
			}{
				/DeviceCMYK eq{
					AGMCORE_is_cmyk_sep not
				}if
			}ifelse
		}{
			false exch
			{
				 AGMOHS_sepink eq or
			}forall
			not
		}ifelse
	}{
		pop false
	}ifelse
}def
/process_mask
{
	level3{
		dup begin
		/ImageType 1 def
		end
		4 dict begin
			/DataDict exch def
			/ImageType 3 def
			/InterleaveType 3 def
			/MaskDict 9 dict begin
				/ImageType 1 def
				/Width DataDict dup/MaskWidth known{/MaskWidth}{/Width}ifelse get def
				/Height DataDict dup/MaskHeight known{/MaskHeight}{/Height}ifelse get def
				/ImageMatrix[Width 0 0 Height neg 0 Height]def
				/NComponents 1 def
				/BitsPerComponent 1 def
				/Decode DataDict dup/MaskD known{/MaskD}{[1 0]}ifelse get def
				/DataSource Adobe_AGM_Core/AGMIMG_maskSource get def
			currentdict end def
		currentdict end
	}if
}def
/use_mask
{
	dup/Mask known	{dup/Mask get}{false}ifelse
}def
/imageormask
{
	begin
		AGMIMG_init_common
		SkipImageProc{
			currentdict consumeimagedata
		}
		{
			save mark
			level2 AGMCORE_host_sep not and{
				currentdict
				Operator/imagemask eq DeviceN_PS2 not and{
					imagemask
				}{
					AGMCORE_in_rip_sep currentoverprint and currentcolorspace 0 get/DeviceGray eq and{
						[/Separation/Black/DeviceGray{}]setcolorspace
						/Decode[Decode 1 get Decode 0 get]def
					}if
					use_mask{
						process_mask image
					}{
						DeviceN_NoneName DeviceN_PS2 Indexed_DeviceN level3 not and or or AGMCORE_in_rip_sep and 
						{
							Names convert_to_process not{
								2 dict begin
								/imageDict xdf
								/names_index 0 def
								gsave
								imageDict write_image_file{
									Names{
										dup(None)ne{
											[/Separation 3 -1 roll/DeviceGray{1 exch sub}]setcolorspace
											Operator imageDict read_image_file
											names_index 0 eq{true setoverprint}if
											/names_index names_index 1 add def
										}{
											pop
										}ifelse
									}forall
									close_image_file
								}if
								grestore
								end
							}{
								Operator/imagemask eq{
									imagemask
								}{
									image
								}ifelse
							}ifelse
						}{
							Operator/imagemask eq{
								imagemask
							}{
								image
							}ifelse
						}ifelse
					}ifelse
				}ifelse
			}{
				Width Height
				Operator/imagemask eq{
					Decode 0 get 1 eq Decode 1 get 0 eq	and
					ImageMatrix/DataSource load
					/Adobe_AGM_OnHost_Seps where{
						pop imagemask
					}{
						currentgray 1 ne{
							currentdict imageormask_sys
						}{
							currentoverprint not{
								1 AGMCORE_&setgray
								currentdict imageormask_sys
							}{
								currentdict ignoreimagedata
							}ifelse				 		
						}ifelse
					}ifelse
				}{
					BitsPerComponent ImageMatrix 
					MultipleDataSources{
						0 1 NComponents 1 sub{
							DataSource exch get
						}for
					}{
						/DataSource load
					}ifelse
					Operator/colorimage eq{
						AGMCORE_host_sep{
							MultipleDataSources level2 or NComponents 4 eq and{
								AGMCORE_is_cmyk_sep{
									MultipleDataSources{
										/DataSource DataSource 0 get xcheck
											{
											[
											DataSource 0 get/exec cvx
											DataSource 1 get/exec cvx
											DataSource 2 get/exec cvx
											DataSource 3 get/exec cvx
											/AGMCORE_get_ink_data cvx
											]cvx
											}{
											DataSource aload pop AGMCORE_get_ink_data
											}ifelse def
									}{
										/DataSource 
										Width BitsPerComponent mul 7 add 8 idiv Height mul 4 mul 
										/DataSource load
										filter_cmyk 0()/SubFileDecode filter def
									}ifelse
									/Decode[Decode 0 get Decode 1 get]def
									/MultipleDataSources false def
									/NComponents 1 def
									/Operator/image def
									invert_image_samples
						 			1 AGMCORE_&setgray
									currentdict imageormask_sys
								}{
									currentoverprint not Operator/imagemask eq and{
 			 							1 AGMCORE_&setgray
 			 							currentdict imageormask_sys
 			 						}{
 			 							currentdict ignoreimagedata
 			 						}ifelse
								}ifelse
							}{	
								MultipleDataSources NComponents AGMIMG_&colorimage						
							}ifelse
						}{
							true NComponents colorimage
						}ifelse
					}{
						Operator/image eq{
							AGMCORE_host_sep{
								/DoImage true def
								currentdict/HostSepColorImage known{HostSepColorImage not}{false}ifelse
								{
									AGMCORE_black_plate not Operator/imagemask ne and{
										/DoImage false def
										currentdict ignoreimagedata
					 				}if
								}if
						 		1 AGMCORE_&setgray
								DoImage
									{currentdict imageormask_sys}if
							}{
								use_mask{
									process_mask image
								}{
									image
								}ifelse
							}ifelse
						}{
							Operator/knockout eq{
								pop pop pop pop pop
								currentcolorspace overprint_plate not{
									knockout_unitsq
								}if
							}if
						}ifelse
					}ifelse
				}ifelse
			}ifelse
			cleartomark restore
		}ifelse
		currentdict/_Filters known{_Filters AGMIMG_flushfilters}if
	end
}def
/sep_imageormask
{
 	/sep_colorspace_dict AGMCORE_gget begin
	CSA map_csa
	begin
	AGMIMG_init_common
	SkipImageProc{
		currentdict consumeimagedata
	}{
		save mark 
		AGMCORE_avoid_L2_sep_space{
			/Decode[Decode 0 get 255 mul Decode 1 get 255 mul]def
		}if
 		AGMIMG_ccimage_exists 
		MappedCSA 0 get/DeviceCMYK eq and
		currentdict/Components known and 
		Name()ne and 
		Name(All)ne and 
		Operator/image eq and
		AGMCORE_producing_seps not and
		level2 not and
		{
			Width Height BitsPerComponent ImageMatrix 
			[
			/DataSource load/exec cvx
			{
				0 1 2 index length 1 sub{
					1 index exch
					2 copy get 255 xor put
				}for
			}/exec cvx
			]cvx bind
			MappedCSA 0 get/DeviceCMYK eq{
				Components aload pop
			}{
				0 0 0 Components aload pop 1 exch sub
			}ifelse
			Name findcmykcustomcolor
			customcolorimage
		}{
			AGMCORE_producing_seps not{
				level2{
 					//Adobe_AGM_Core/AGMCORE_pattern_paint_type get 2 ne AGMCORE_avoid_L2_sep_space not and currentcolorspace 0 get/Separation ne and{
						[/Separation Name MappedCSA sep_proc_name exch dup 0 get 15 string cvs(/Device)anchorsearch{pop pop 0 get}{pop}ifelse exch load]setcolorspace_opt
						/sep_tint AGMCORE_gget setcolor
					}if
					currentdict imageormask
				}{
					currentdict
					Operator/imagemask eq{
						imageormask
					}{
						sep_imageormask_lev1
					}ifelse
				}ifelse
 			}{
				AGMCORE_host_sep{
					Operator/knockout eq{
						currentdict/ImageMatrix get concat
						knockout_unitsq
					}{
						currentgray 1 ne{
 							AGMCORE_is_cmyk_sep Name(All)ne and{
 								level2{
 									Name AGMCORE_IsSeparationAProcessColor 
 									{
 										Operator/imagemask eq{
 											//Adobe_AGM_Core/AGMCORE_pattern_paint_type get 2 ne{
 												/sep_tint AGMCORE_gget 1 exch sub AGMCORE_&setcolor
 											}if
 										}{
											invert_image_samples
 										}ifelse
	 								}{
	 									//Adobe_AGM_Core/AGMCORE_pattern_paint_type get 2 ne{
	 										[/Separation Name[/DeviceGray]
	 										{
	 											sep_colorspace_proc AGMCORE_get_ink_data
												1 exch sub
	 										}bind
											]AGMCORE_&setcolorspace
											/sep_tint AGMCORE_gget AGMCORE_&setcolor
										}if
 									}ifelse
 									currentdict imageormask_sys
	 							}{
	 								currentdict
									Operator/imagemask eq{
										imageormask_sys
									}{
										sep_image_lev1_sep
									}ifelse
	 							}ifelse
 							}{
 								Operator/imagemask ne{
									invert_image_samples
 								}if
		 						currentdict imageormask_sys
 							}ifelse
 						}{
 							currentoverprint not Name(All)eq or Operator/imagemask eq and{
								currentdict imageormask_sys 
								}{
								currentoverprint not
									{
 									gsave 
 									knockout_unitsq
 									grestore
									}if
								currentdict consumeimagedata 
		 					}ifelse
 						}ifelse
		 			}ifelse
 				}{
					//Adobe_AGM_Core/AGMCORE_pattern_paint_type get 2 ne{
						currentcolorspace 0 get/Separation ne{
							[/Separation Name MappedCSA sep_proc_name exch 0 get exch load]setcolorspace_opt
							/sep_tint AGMCORE_gget setcolor
						}if
					}if
					currentoverprint 
					MappedCSA 0 get/DeviceCMYK eq and 
					Name AGMCORE_IsSeparationAProcessColor not and
					//Adobe_AGM_Core/AGMCORE_pattern_paint_type get 2 ne{Name inRip_spot_has_ink not and}{false}ifelse 
					Name(All)ne and{
						imageormask_l2_overprint
					}{
						currentdict imageormask
 					}ifelse
				}ifelse
			}ifelse
		}ifelse
		cleartomark restore
	}ifelse
	currentdict/_Filters known{_Filters AGMIMG_flushfilters}if
	end
	end
}def
/colorSpaceElemCnt
{
	mark currentcolor counttomark dup 2 add 1 roll cleartomark
}bdf
/devn_sep_datasource
{
	1 dict begin
	/dataSource xdf
	[
		0 1 dataSource length 1 sub{
			dup currentdict/dataSource get/exch cvx/get cvx/exec cvx
			/exch cvx names_index/ne cvx[/pop cvx]cvx/if cvx
		}for
	]cvx bind
	end
}bdf		
/devn_alt_datasource
{
	11 dict begin
	/convProc xdf
	/origcolorSpaceElemCnt xdf
	/origMultipleDataSources xdf
	/origBitsPerComponent xdf
	/origDecode xdf
	/origDataSource xdf
	/dsCnt origMultipleDataSources{origDataSource length}{1}ifelse def
	/DataSource origMultipleDataSources
		{
			[
			BitsPerComponent 8 idiv origDecode length 2 idiv mul string
			0 1 origDecode length 2 idiv 1 sub
				{
				dup 7 mul 1 add index exch dup BitsPerComponent 8 idiv mul exch
				origDataSource exch get 0()/SubFileDecode filter
				BitsPerComponent 8 idiv string/readstring cvx/pop cvx/putinterval cvx
				}for 
			]bind cvx
		}{origDataSource}ifelse 0()/SubFileDecode filter def		
	[
		origcolorSpaceElemCnt string
		0 2 origDecode length 2 sub
			{
			dup origDecode exch get dup 3 -1 roll 1 add origDecode exch get exch sub 2 BitsPerComponent exp 1 sub div
			1 BitsPerComponent 8 idiv{DataSource/read cvx/not cvx{0}/if cvx/mul cvx}repeat/mul cvx/add cvx
			}for
		/convProc load/exec cvx
		origcolorSpaceElemCnt 1 sub -1 0
			{
			/dup cvx 2/add cvx/index cvx
			3 1/roll cvx/exch cvx 255/mul cvx/cvi cvx/put cvx
			}for
	]bind cvx 0()/SubFileDecode filter
	end
}bdf
/devn_imageormask
{
 	/devicen_colorspace_dict AGMCORE_gget begin
	CSA map_csa
	2 dict begin
	dup
	/srcDataStrs[3 -1 roll begin
		AGMIMG_init_common
		currentdict/MultipleDataSources known{MultipleDataSources{DataSource length}{1}ifelse}{1}ifelse
		{
			Width Decode length 2 div mul cvi
			{
				dup 65535 gt{1 add 2 div cvi}{exit}ifelse
			}loop
			string
		}repeat
		end]def
	/dstDataStr srcDataStrs 0 get length string def
	begin
	AGMIMG_init_common
	SkipImageProc{
		currentdict consumeimagedata
	}{
		save mark 
		AGMCORE_producing_seps not{
			level3 not{
				Operator/imagemask ne{
					/DataSource[[
						DataSource Decode BitsPerComponent currentdict/MultipleDataSources known{MultipleDataSources}{false}ifelse
						colorSpaceElemCnt/devicen_colorspace_dict AGMCORE_gget/TintTransform get 
						devn_alt_datasource 1/string cvx/readstring cvx/pop cvx]cvx colorSpaceElemCnt 1 sub{dup}repeat]def				
					/MultipleDataSources true def
					/Decode colorSpaceElemCnt[exch{0 1}repeat]def
				}if
			}if
			currentdict imageormask
 		}{
			AGMCORE_host_sep{
				Names convert_to_process{
					CSA get_csa_by_name 0 get/DeviceCMYK eq{
						/DataSource
							Width BitsPerComponent mul 7 add 8 idiv Height mul 4 mul 
							DataSource Decode BitsPerComponent currentdict/MultipleDataSources known{MultipleDataSources}{false}ifelse
							4/devicen_colorspace_dict AGMCORE_gget/TintTransform get 
							devn_alt_datasource
						filter_cmyk 0()/SubFileDecode filter def
						/MultipleDataSources false def
						/Decode[1 0]def
						/DeviceGray setcolorspace
			 			currentdict imageormask_sys
 					}{
						AGMCORE_report_unsupported_color_space
						AGMCORE_black_plate{
							/DataSource
								DataSource Decode BitsPerComponent currentdict/MultipleDataSources known{MultipleDataSources}{false}ifelse
								CSA get_csa_by_name 0 get/DeviceRGB eq{3}{1}ifelse/devicen_colorspace_dict AGMCORE_gget/TintTransform get
								devn_alt_datasource
							/MultipleDataSources false def
							/Decode colorSpaceElemCnt[exch{0 1}repeat]def
				 			currentdict imageormask_sys
				 		}{
	 						gsave 
	 						knockout_unitsq
	 						grestore
							currentdict consumeimagedata 
						}ifelse
 					}ifelse
				}
				{	
					/devicen_colorspace_dict AGMCORE_gget/names_index known{
	 					Operator/imagemask ne{
	 						MultipleDataSources{
		 						/DataSource[DataSource devn_sep_datasource/exec cvx]cvx def
								/MultipleDataSources false def
	 						}{
								/DataSource/DataSource load dstDataStr srcDataStrs 0 get filter_devn def
	 						}ifelse
							invert_image_samples
	 					}if
			 			currentdict imageormask_sys
	 				}{
	 					currentoverprint not Operator/imagemask eq and{
							currentdict imageormask_sys 
							}{
							currentoverprint not
								{
	 							gsave 
	 							knockout_unitsq
	 							grestore
								}if
							currentdict consumeimagedata 
			 			}ifelse
	 				}ifelse
	 			}ifelse
 			}{
				currentdict imageormask
			}ifelse
		}ifelse
		cleartomark restore
	}ifelse
	currentdict/_Filters known{_Filters AGMIMG_flushfilters}if
	end
	end
	end
}def
/imageormask_l2_overprint
{
	currentdict
	currentcmykcolor add add add 0 eq{
		currentdict consumeimagedata
	}{
		level3{			
			currentcmykcolor 
			/AGMIMG_k xdf 
			/AGMIMG_y xdf 
			/AGMIMG_m xdf 
			/AGMIMG_c xdf
			Operator/imagemask eq{
				[/DeviceN[
				AGMIMG_c 0 ne{/Cyan}if
				AGMIMG_m 0 ne{/Magenta}if
				AGMIMG_y 0 ne{/Yellow}if
				AGMIMG_k 0 ne{/Black}if
				]/DeviceCMYK{}]setcolorspace
				AGMIMG_c 0 ne{AGMIMG_c}if
				AGMIMG_m 0 ne{AGMIMG_m}if
				AGMIMG_y 0 ne{AGMIMG_y}if
				AGMIMG_k 0 ne{AGMIMG_k}if
				setcolor			
			}{	
				/Decode[Decode 0 get 255 mul Decode 1 get 255 mul]def
				[/Indexed 				
					[
						/DeviceN[
							AGMIMG_c 0 ne{/Cyan}if
							AGMIMG_m 0 ne{/Magenta}if
							AGMIMG_y 0 ne{/Yellow}if
							AGMIMG_k 0 ne{/Black}if
						]
						/DeviceCMYK{
							AGMIMG_k 0 eq{0}if
							AGMIMG_y 0 eq{0 exch}if
							AGMIMG_m 0 eq{0 3 1 roll}if
							AGMIMG_c 0 eq{0 4 1 roll}if						
						}
					]
					255
					{
						255 div 
						mark exch
						dup	dup dup
						AGMIMG_k 0 ne{
							/sep_tint AGMCORE_gget mul MappedCSA sep_proc_name exch pop load exec 4 1 roll pop pop pop		
							counttomark 1 roll
						}{
							pop
						}ifelse
						AGMIMG_y 0 ne{
							/sep_tint AGMCORE_gget mul MappedCSA sep_proc_name exch pop load exec 4 2 roll pop pop pop		
							counttomark 1 roll
						}{
							pop
						}ifelse
						AGMIMG_m 0 ne{
							/sep_tint AGMCORE_gget mul MappedCSA sep_proc_name exch pop load exec 4 3 roll pop pop pop		
							counttomark 1 roll
						}{
							pop
						}ifelse
						AGMIMG_c 0 ne{
							/sep_tint AGMCORE_gget mul MappedCSA sep_proc_name exch pop load exec pop pop pop		
							counttomark 1 roll
						}{
							pop
						}ifelse
						counttomark 1 add -1 roll pop
					}
				]setcolorspace
			}ifelse
			imageormask_sys
		}{
	write_image_file{
		currentcmykcolor
		0 ne{
			[/Separation/Black/DeviceGray{}]setcolorspace
			gsave
			/Black
			[{1 exch sub/sep_tint AGMCORE_gget mul}/exec cvx MappedCSA sep_proc_name cvx exch pop{4 1 roll pop pop pop 1 exch sub}/exec cvx]
			cvx modify_halftone_xfer
			Operator currentdict read_image_file
			grestore
		}if
		0 ne{
			[/Separation/Yellow/DeviceGray{}]setcolorspace
			gsave
			/Yellow
			[{1 exch sub/sep_tint AGMCORE_gget mul}/exec cvx MappedCSA sep_proc_name cvx exch pop{4 2 roll pop pop pop 1 exch sub}/exec cvx]
			cvx modify_halftone_xfer
			Operator currentdict read_image_file
			grestore
		}if
		0 ne{
			[/Separation/Magenta/DeviceGray{}]setcolorspace
			gsave
			/Magenta
			[{1 exch sub/sep_tint AGMCORE_gget mul}/exec cvx MappedCSA sep_proc_name cvx exch pop{4 3 roll pop pop pop 1 exch sub}/exec cvx]
			cvx modify_halftone_xfer
			Operator currentdict read_image_file
			grestore
		}if
		0 ne{
			[/Separation/Cyan/DeviceGray{}]setcolorspace
			gsave
			/Cyan 
			[{1 exch sub/sep_tint AGMCORE_gget mul}/exec cvx MappedCSA sep_proc_name cvx exch pop{pop pop pop 1 exch sub}/exec cvx]
			cvx modify_halftone_xfer
			Operator currentdict read_image_file
			grestore
		}if
				close_image_file
			}{
				imageormask
			}ifelse
		}ifelse
	}ifelse
}def
/indexed_imageormask
{
	begin
		AGMIMG_init_common
		save mark 
 		currentdict
 		AGMCORE_host_sep{
			Operator/knockout eq{
				/indexed_colorspace_dict AGMCORE_gget dup/CSA known{
					/CSA get get_csa_by_name
				}{
					/Names get
				}ifelse
				overprint_plate not{
					knockout_unitsq
				}if
			}{
				Indexed_DeviceN{
					/devicen_colorspace_dict AGMCORE_gget dup/names_index known exch/Names get convert_to_process or{
			 			indexed_image_lev2_sep
					}{
						currentoverprint not{
							knockout_unitsq
			 			}if
			 			currentdict consumeimagedata
					}ifelse
				}{
		 			AGMCORE_is_cmyk_sep{
						Operator/imagemask eq{
							imageormask_sys
						}{
							level2{
								indexed_image_lev2_sep
							}{
								indexed_image_lev1_sep
							}ifelse
						}ifelse
					}{
						currentoverprint not{
							knockout_unitsq
			 			}if
			 			currentdict consumeimagedata
					}ifelse
				}ifelse
			}ifelse
 		}{
			level2{
				Indexed_DeviceN{
					/indexed_colorspace_dict AGMCORE_gget begin
				}{
					/indexed_colorspace_dict AGMCORE_gget dup null ne
					{
						begin
						currentdict/CSDBase known{CSDBase/CSD get_res/MappedCSA get}{CSA}ifelse
						get_csa_by_name 0 get/DeviceCMYK eq ps_level 3 ge and ps_version 3015.007 lt and
						AGMCORE_in_rip_sep and{
							[/Indexed[/DeviceN[/Cyan/Magenta/Yellow/Black]/DeviceCMYK{}]HiVal Lookup]
							setcolorspace
						}if
						end
					}
					{pop}ifelse
				}ifelse
				imageormask
				Indexed_DeviceN{
					end
				}if
			}{
				Operator/imagemask eq{
					imageormask
				}{
					indexed_imageormask_lev1
				}ifelse
			}ifelse
 		}ifelse
		cleartomark restore
	currentdict/_Filters known{_Filters AGMIMG_flushfilters}if
	end
}def
/indexed_image_lev2_sep
{
	/indexed_colorspace_dict AGMCORE_gget begin
	begin
		Indexed_DeviceN not{
			currentcolorspace 
			dup 1/DeviceGray put
			dup 3
			currentcolorspace 2 get 1 add string
			0 1 2 3 AGMCORE_get_ink_data 4 currentcolorspace 3 get length 1 sub
			{
			dup 4 idiv exch currentcolorspace 3 get exch get 255 exch sub 2 index 3 1 roll put
			}for 
			put	setcolorspace
		}if
		currentdict 
		Operator/imagemask eq{
			AGMIMG_&imagemask
		}{
			use_mask{
				process_mask AGMIMG_&image
			}{
				AGMIMG_&image
			}ifelse
		}ifelse
	end end
}def
 /OPIimage
 {
 	dup type/dicttype ne{
 		10 dict begin
 			/DataSource xdf
 			/ImageMatrix xdf
 			/BitsPerComponent xdf
 			/Height xdf
 			/Width xdf
 			/ImageType 1 def
 			/Decode[0 1 def]
 			currentdict
 		end
 	}if
 	dup begin
 		/NComponents 1 cdndf
 		/MultipleDataSources false cdndf
 		/SkipImageProc{false}cdndf
 		/Decode[
 				0 
 				currentcolorspace 0 get/Indexed eq{
 					2 BitsPerComponent exp 1 sub
 				}{
 					1
 				}ifelse
 		]cdndf
 		/Operator/image cdndf
 	end
 	/sep_colorspace_dict AGMCORE_gget null eq{
 		imageormask
 	}{
 		gsave
 		dup begin invert_image_samples end
 		sep_imageormask
 		grestore
 	}ifelse
 }def
/cachemask_level2
{
	3 dict begin
	/LZWEncode filter/WriteFilter xdf
	/readBuffer 256 string def
	/ReadFilter
		currentfile
		0(%EndMask)/SubFileDecode filter
		/ASCII85Decode filter
		/RunLengthDecode filter
	def
	{
		ReadFilter readBuffer readstring exch
		WriteFilter exch writestring
		not{exit}if
	}loop
	WriteFilter closefile
	end
}def
/spot_alias
{
	/mapto_sep_imageormask 
	{
		dup type/dicttype ne{
			12 dict begin
				/ImageType 1 def
				/DataSource xdf
				/ImageMatrix xdf
				/BitsPerComponent xdf
				/Height xdf
				/Width xdf
				/MultipleDataSources false def
		}{
			begin
		}ifelse
				/Decode[/customcolor_tint AGMCORE_gget 0]def
				/Operator/image def
				/SkipImageProc{false}def
				currentdict 
			end
		sep_imageormask
	}bdf
	/customcolorimage
	{
		Adobe_AGM_Image/AGMIMG_colorAry xddf
		/customcolor_tint AGMCORE_gget
		<<
			/Name AGMIMG_colorAry 4 get
			/CSA[/DeviceCMYK]
			/TintMethod/Subtractive
			/TintProc null
			/MappedCSA null
			/NComponents 4 
			/Components[AGMIMG_colorAry aload pop pop]
		>>
		setsepcolorspace
		mapto_sep_imageormask
	}ndf
	Adobe_AGM_Image/AGMIMG_&customcolorimage/customcolorimage load put
	/customcolorimage
	{
		Adobe_AGM_Image/AGMIMG_override false put
		current_spot_alias{dup 4 get map_alias}{false}ifelse
		{
			false set_spot_alias
			/customcolor_tint AGMCORE_gget exch setsepcolorspace
			pop
			mapto_sep_imageormask
			true set_spot_alias
		}{
			//Adobe_AGM_Image/AGMIMG_&customcolorimage get exec
		}ifelse			
	}bdf
}def
/snap_to_device
{
	6 dict begin
	matrix currentmatrix
	dup 0 get 0 eq 1 index 3 get 0 eq and
	1 index 1 get 0 eq 2 index 2 get 0 eq and or exch pop
	{
		1 1 dtransform 0 gt exch 0 gt/AGMIMG_xSign? exch def/AGMIMG_ySign? exch def
		0 0 transform
		AGMIMG_ySign?{floor 0.1 sub}{ceiling 0.1 add}ifelse exch
		AGMIMG_xSign?{floor 0.1 sub}{ceiling 0.1 add}ifelse exch
		itransform/AGMIMG_llY exch def/AGMIMG_llX exch def
		1 1 transform
		AGMIMG_ySign?{ceiling 0.1 add}{floor 0.1 sub}ifelse exch
		AGMIMG_xSign?{ceiling 0.1 add}{floor 0.1 sub}ifelse exch
		itransform/AGMIMG_urY exch def/AGMIMG_urX exch def			
		[AGMIMG_urX AGMIMG_llX sub 0 0 AGMIMG_urY AGMIMG_llY sub AGMIMG_llX AGMIMG_llY]concat
	}{
	}ifelse
	end
}def
level2 not{
	/colorbuf
	{
		0 1 2 index length 1 sub{
			dup 2 index exch get 
			255 exch sub 
			2 index 
			3 1 roll 
			put
		}for
	}def
	/tint_image_to_color
	{
		begin
			Width Height BitsPerComponent ImageMatrix 
			/DataSource load
		end
		Adobe_AGM_Image begin
			/AGMIMG_mbuf 0 string def
			/AGMIMG_ybuf 0 string def
			/AGMIMG_kbuf 0 string def
			{
				colorbuf dup length AGMIMG_mbuf length ne
					{
					dup length dup dup
					/AGMIMG_mbuf exch string def
					/AGMIMG_ybuf exch string def
					/AGMIMG_kbuf exch string def
					}if
				dup AGMIMG_mbuf copy AGMIMG_ybuf copy AGMIMG_kbuf copy pop
			}
			addprocs
			{AGMIMG_mbuf}{AGMIMG_ybuf}{AGMIMG_kbuf}true 4 colorimage	
		end
	}def			
	/sep_imageormask_lev1
	{
		begin
			MappedCSA 0 get dup/DeviceRGB eq exch/DeviceCMYK eq or has_color not and{
				{
					255 mul round cvi GrayLookup exch get
				}currenttransfer addprocs settransfer
				currentdict imageormask
			}{
				/sep_colorspace_dict AGMCORE_gget/Components known{
					MappedCSA 0 get/DeviceCMYK eq{
						Components aload pop
					}{
						0 0 0 Components aload pop 1 exch sub
					}ifelse
					Adobe_AGM_Image/AGMIMG_k xddf 
					Adobe_AGM_Image/AGMIMG_y xddf 
					Adobe_AGM_Image/AGMIMG_m xddf 
					Adobe_AGM_Image/AGMIMG_c xddf 
					AGMIMG_y 0.0 eq AGMIMG_m 0.0 eq and AGMIMG_c 0.0 eq and{
						{AGMIMG_k mul 1 exch sub}currenttransfer addprocs settransfer
						currentdict imageormask
					}{
						currentcolortransfer
						{AGMIMG_k mul 1 exch sub}exch addprocs 4 1 roll
						{AGMIMG_y mul 1 exch sub}exch addprocs 4 1 roll
						{AGMIMG_m mul 1 exch sub}exch addprocs 4 1 roll
						{AGMIMG_c mul 1 exch sub}exch addprocs 4 1 roll
						setcolortransfer
						currentdict tint_image_to_color
					}ifelse
				}{
					MappedCSA 0 get/DeviceGray eq{
						{255 mul round cvi ColorLookup exch get 0 get}currenttransfer addprocs settransfer
						currentdict imageormask
					}{
						MappedCSA 0 get/DeviceCMYK eq{
							currentcolortransfer
							{255 mul round cvi ColorLookup exch get 3 get 1 exch sub}exch addprocs 4 1 roll
							{255 mul round cvi ColorLookup exch get 2 get 1 exch sub}exch addprocs 4 1 roll
							{255 mul round cvi ColorLookup exch get 1 get 1 exch sub}exch addprocs 4 1 roll
							{255 mul round cvi ColorLookup exch get 0 get 1 exch sub}exch addprocs 4 1 roll
							setcolortransfer 
							currentdict tint_image_to_color
						}{
							currentcolortransfer
							{pop 1}exch addprocs 4 1 roll
							{255 mul round cvi ColorLookup exch get 2 get}exch addprocs 4 1 roll
							{255 mul round cvi ColorLookup exch get 1 get}exch addprocs 4 1 roll
							{255 mul round cvi ColorLookup exch get 0 get}exch addprocs 4 1 roll
							setcolortransfer 
							currentdict tint_image_to_color
						}ifelse
					}ifelse
				}ifelse
			}ifelse
		end
	}def
	/sep_image_lev1_sep
	{
		begin
			/sep_colorspace_dict AGMCORE_gget/Components known{
				Components aload pop
				Adobe_AGM_Image/AGMIMG_k xddf 
				Adobe_AGM_Image/AGMIMG_y xddf 
				Adobe_AGM_Image/AGMIMG_m xddf 
				Adobe_AGM_Image/AGMIMG_c xddf 
				{AGMIMG_c mul 1 exch sub}
				{AGMIMG_m mul 1 exch sub}
				{AGMIMG_y mul 1 exch sub}
				{AGMIMG_k mul 1 exch sub}
			}{
				{255 mul round cvi ColorLookup exch get 0 get 1 exch sub}
				{255 mul round cvi ColorLookup exch get 1 get 1 exch sub}
				{255 mul round cvi ColorLookup exch get 2 get 1 exch sub}
				{255 mul round cvi ColorLookup exch get 3 get 1 exch sub}
			}ifelse
			AGMCORE_get_ink_data currenttransfer addprocs settransfer
			currentdict imageormask_sys
		end
	}def
	/indexed_imageormask_lev1
	{
		/indexed_colorspace_dict AGMCORE_gget begin
		begin
			currentdict
			MappedCSA 0 get dup/DeviceRGB eq exch/DeviceCMYK eq or has_color not and{
				{HiVal mul round cvi GrayLookup exch get HiVal div}currenttransfer addprocs settransfer
				imageormask
			}{
				MappedCSA 0 get/DeviceGray eq{
					{HiVal mul round cvi Lookup exch get HiVal div}currenttransfer addprocs settransfer
					imageormask
				}{
					MappedCSA 0 get/DeviceCMYK eq{
						currentcolortransfer
						{4 mul HiVal mul round cvi 3 add Lookup exch get HiVal div 1 exch sub}exch addprocs 4 1 roll
						{4 mul HiVal mul round cvi 2 add Lookup exch get HiVal div 1 exch sub}exch addprocs 4 1 roll
						{4 mul HiVal mul round cvi 1 add Lookup exch get HiVal div 1 exch sub}exch addprocs 4 1 roll
						{4 mul HiVal mul round cvi		 Lookup exch get HiVal div 1 exch sub}exch addprocs 4 1 roll
						setcolortransfer 
						tint_image_to_color
					}{
						currentcolortransfer
						{pop 1}exch addprocs 4 1 roll
						{3 mul HiVal mul round cvi 2 add Lookup exch get HiVal div}exch addprocs 4 1 roll
						{3 mul HiVal mul round cvi 1 add Lookup exch get HiVal div}exch addprocs 4 1 roll
						{3 mul HiVal mul round cvi 		Lookup exch get HiVal div}exch addprocs 4 1 roll
						setcolortransfer 
						tint_image_to_color
					}ifelse
				}ifelse
			}ifelse
		end end
	}def
	/indexed_image_lev1_sep
	{
		/indexed_colorspace_dict AGMCORE_gget begin
		begin
			{4 mul HiVal mul round cvi		 Lookup exch get HiVal div 1 exch sub}
			{4 mul HiVal mul round cvi 1 add Lookup exch get HiVal div 1 exch sub}
			{4 mul HiVal mul round cvi 2 add Lookup exch get HiVal div 1 exch sub}
			{4 mul HiVal mul round cvi 3 add Lookup exch get HiVal div 1 exch sub}
			AGMCORE_get_ink_data currenttransfer addprocs settransfer
			currentdict imageormask_sys
		end end
	}def
}if
end
systemdict/setpacking known
{setpacking}if
%%EndResource
currentdict Adobe_AGM_Utils eq {end} if
%%EndProlog
%%BeginSetup
Adobe_AGM_Utils begin
2 2010 Adobe_AGM_Core/ds gx
Adobe_CoolType_Core/ds get exec
Adobe_AGM_Image/ds gx
[/NamespacePush pdfmark_5
[/_objdef {Doc_Metadata} /type /stream /OBJ pdfmark_5
[{Doc_Metadata} 700 (% &end XMP packet& %) ReadBypdfmark_5_string
<?xpacket begin='﻿' id='W5M0MpCehiHzreSzNTczkc9d'?>
<x:xmpmeta xmlns:x="adobe:ns:meta/" x:xmptk="Adobe XMP Core 9.0-c000 79.cca54b0, 2022/11/26-09:29:55        ">
 <rdf:RDF xmlns:rdf="http://www.w3.org/1999/02/22-rdf-syntax-ns#">
  <rdf:Description rdf:about=""
    xmlns:xmp="http://ns.adobe.com/xap/1.0/"
    xmlns:pdf="http://ns.adobe.com/pdf/1.3/"
    xmlns:dc="http://purl.org/dc/elements/1.1/"
   xmp:CreateDate="2023-04-24T12:59:08Z"
   xmp:CreatorTool="Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) draw.io/13.9.8 Chrome/85.0.4183.121 Electron/10.1.5 Safari/537.36"
   xmp:ModifyDate="2023-04-24T12:59:08Z"
   pdf:Producer="Skia/PDF m85"
   dc:format="application/pdf"/>
 </rdf:RDF>
</x:xmpmeta>
                                                                                                                                
                                                                                                                                
                                                                                                                                
                                                                                                                                
                                                                                                                                
                                                                                                                                
                                                                                                                                
                                                                                                                                
                                                                                                                                
                                                                                                                                
                                                                                                                                
                                                                                                                                
                                                                                                                                
                                                                                                                                
                                                                                                                                
                                                                                                                                
<?xpacket end='w'?>


% &end XMP packet& %

[{Doc_Metadata} 2 dict begin /Type /Metadata def /Subtype /XML def currentdict end /PUT pdfmark_5
[/Document 1 dict begin /Metadata {Doc_Metadata} def currentdict end /BDC pdfmark_5
[/NamespacePop pdfmark_5
currentdict Adobe_AGM_Utils eq {end} if
%%EndSetup
%%Page: 1 1
%%EndPageComments
%%BeginPageSetup
Adobe_AGM_Utils begin
Adobe_AGM_Core/ps gx
Adobe_AGM_Core/capture_mysetup gx
Adobe_AGM_Utils/capture_cpd gx
Adobe_CoolType_Core/ps get exec
Adobe_AGM_Image/ps gx
%%EndPageSetup
1 -1 scale 0 -120.96 translate
pgsv
[1 0 0 1 0 0 ]ct
gsave
np
gsave
0 0 mo
0 120.96 li
282 120.96 li
282 0 li
cp
clp
gsave
0 0 mo
282 0 li
282 119.832 li
0 119.832 li
0 0 li
eclp
101.534 61.3511 mo
115.885 61.3511 li
115.885 82.8779 li
101.534 82.8779 li
cp
false sop
/0 
[/DeviceCMYK] /CSA add_res
0 0 0 0 cmyk
f
.717557 lw
0 lc
0 lj
4 ml
[] 0 dsh
true sadj
101.534 61.3511 mo
115.885 61.3511 li
115.885 82.8778 li
101.534 82.8778 li
cp
.749844 .679255 .654902 .901945 cmyk
@
/0 
<<
/Name (Black)
/1 
[/DeviceCMYK] /CSA add_res
/CSA /1 get_csa_by_name
/MappedCSA /1 /CSA get_res
/TintMethod /Subtractive
/TintProc null
/NComponents 4 
/Components [ 0 0 0 1 ] 
>>
/CSD add_res
1 /0 /CSD get_res sepcs
1 sep
%ADOBeginSubsetFont: FAAAAA+TimesNewRomanPSMT Initial
ct_T42Dict begin
-0.566 -0.305 2.043 1.039
 256 array 0 1 255 {1 index exch /.notdef put} for  /FAAAAA+TimesNewRomanPSMT
Type42DictBegin
[<00010000000c000c000c000c4f532f327096bc3e000000cc000000606376
74201d6402d70000012c000010846670676d6d591b53000011b000000a59
676c7966d6084893000036880000129c68656164ec6c40fd00001c0c0000
003668686561134d094b00001c4400000024686d747830c604b300001c68
000004cc6c6f6361a62faa0200002134000002686d61787007fb08b50000
239c000000206e616d6541966133000023bc0000033670726570b3329291
000026f400000f9367646972000000000000000000000000000303350190
00050008059a053300000125059a0533000003a000660212010502020603
05040502030400000081000000000000000000000000544d43200040002c
03c4058cfe460133072101bb400001ffffff00000394054c000000200015
058e0000054c001f054c001c0394001b0000ffe10000ffe40000ffe8fe4a
fffc056b0023fe6affe00313000000ad000000ad0000000000250096009f
002400f0013100c200c0004a00a6004100500094004700cf00af000e0079
01cb00040023004400a80025011f0002004600170105009900d9005c0072
00e500e00028004b00de011200240045007000160039ffe90016004b0088
ffb900d9000a004300ae00ba016c0153002f00430048022c012b0025008f
ffc000170028ffcdffd80025009d00e50124ffb10048009d00e600110027
007f00910012006a00cafffc00000024006200a7017c01e900210060008b
0434048aff6b003b00b500d5014bff6b004d007905d809b5006c009100a3
011701c0ffdfffe700be04010065007f00820088009900b200c0022e0343
05a000200026003d004e00610065007b00d9011301310340ff27ff42ff99
004e00a700f2022b02c603070011002b0049005f008d00a100af00d600e4
00f5010b0135019d01ab01ab01d101ee05d80000004b0075007a0080009d
00a600a700ac00b9013101310217021700020017002900550080008f00a5
00b200b300d0014b015901c001c103a50530fe3fff14ff15ffe7ffff002a
00580099009f00c100e400f40130015901ab01ab03220374041e04740532
fd81004d0064009c00d000d100d600de00e500f500f8012a012a01e1027e
027fff57ffa8ffe500000008001f00380051005a006f0076007700a200c0
00c200c400f101fb0209027e02cf04c5057a05f0ff92001200260042004b
004f005100530064008b00ae00b200b800b800d600f50111012001310138
014e01520167018f019601b801d901d902060221027102ea03b003cb03dc
04360505ff3a00120016001e001f002300570068006c007e0088009200a5
00a800c500c901150126012d013001d601d901f6023b0244024402a302cf
02de0385038f04fc0586fee0feebfefbff8a0007004400470058007500aa
00e400ef011601200129016a017301e3027e029002b4030e031003230335
0341035403590388039403c803ce047204ab04da0549056105ab0761fe6e
fed1ff4bff84000000010006001e0027002c0034003700620066006a006b
006c007000700072007c0081008a008e0091009200a000ab00b800bf00c9
00d500dd00ec00f40100012101300169016a016d017c0185018e018e0199
01ac01c101c501c901e101f601f601f60222022202280236023f02430246
026702850285029402d002d602e8031c0363037f03800380039e03b603d9
0400040404ff053205320548058b05a706cb07280748076208ccfcedfd2a
fd59fddefe00fe1afe5bfe96fec1fee7ff56ff7900010025002d002e007c
00870091009900a100a500a500aa00af00b600c600cc00d700dd00ec00f2
01020105011701180123012a012c0131013f014701490149014d01510151
015501550157015a015a0161016201680168017f0180018201830184018d
0195019501950198019901a501a901b601b601b701ba01ba01d501df01e6
01ea01f2020002000203021702250227022f0239024302430247024f0252
02520267026f026f027002720276027e02a702b302b902d603130325032d
03610371039903ae03c203d403f90402042c042f043c04560467048304cf
04d104d804fb051f05450568059e05c2061b06340655066a069806af06e8
06fc070607500762077c07d407ff082500ad00c700aa00b5000000000000
000000000000002f06cf01730514047802df009c00180370058701550025
00060254036c038e03d2056601f0032001da018a0369036bffa3034602f8
036f015602bf0122031f053a0366008c00ff01ab02e102f402e704150154
02e90128049101b7026f034302060000000005d30415048305e8000002d7
003a027d01c002c503830383ffbd003a059e01df059e02d1002004e00213
00df01c001870297000000ce0269028b0058043405fb0069015a01a90578
0182013e0288012a03d4049e00e5032302f301f00196007a00cd014a0424
025e023901ab00cf00fd011e00ed017100700195004001bb01dd01b80001
01a803a7014c020c018d01b0020d0137010000cd032101d4030a00590000
000001260215015002f0025503bc06d00335010100d000d2007a01030130
007c000000000000000000fe006e006600940227002b0045004d00d30132
00180097004100f4febcffe9001605d8058b009100a1032c00520030005d
02cb003a009200e500e500580086003200ba0099008800300298007cff80
01640028004d0065000200b8016a002f010b001100170100007f00040016
022200a6005f000000f8000a00ca0043004b01ee0077012000f401c00028
045f0000008c044500c20060007b008b008b0064005d00c2009c009206b5
05d3004f011700000420fe9e00cc00dc005e004600e30032001a003c0091
005a00a1042c0041002000490071009c009cfe4800400040008600cb0102
007d003a003e006a0050044800290096ff6a0097006900e0004c001b00c9
0069ff970043ffbd0052ff83ff8b005fffa1ff5c00670053ffa8002a0076
ffb20036008705590256052b043400de00c901c4004800db018b00b30048
00da01160125011800ea00ea00ae0000003e05bb008a04d70053003fff8c
ffd500150028002200990062004a00e4006d00ee00e5004803c00033fe4e
02b1ff460370007905df0051ffa7ff1f010a0068ff6c004f00bc00a50705
00ab0080001e05a50025008b04660230006900290016012f0080005c059f
03d703f10470000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
0000000000000000000000160016001700180018001a001b00210029002a
002a002c002d002e002f003200340036003700380039003a003b003c003d
003e004200460046004a004c004d004f004f00530053005500570059005c
005c005d005d005e005f0061006400650067006800690069006b006e006f
00710076007600770077007d007e007f008000810082008600870087008a
008d008e0096009600970097009c00a000a200a300a600ac00b300b300b6
00b800b900be00bf00c100c200c400c500c600c700ca00ca00cb00cc00cc
00ce00d100d200d300d700da00db00dc00de00df00e000e000e300e64057
8574737271706f6e6d6c6b6a6968676665625d55544f4e403f3e3d3c3b3a
393837363534333231302f2e2d2c2b2a292827262524232221201f1e1d1c
1b1a1918171614131211100f0e0d0c0b0a090807060504030201002c4523
466020b02660b004262348482d2c452346236120b02661b004262348482d
2c45234660b0206120b04660b004262348482d2c4523462361b0206020b0
2661b02061b004262348482d2c45234660b0406120b06660b00426234848
2d2c4523462361b0406020b02661b04061b004262348482d2c0110203c00
3c2d2c20452320b0cd442320b8015a51582320b08d44235920b0ed515823
20b04d44235920b09051582320b00d44235921212d2c20204518684420b0
01602045b04676688a4560442d2c01b10b0a432343650a2d2c00b10a0b43
23430b2d2c00b0172370b101173e01b0172370b10217453ab10200080d2d
2c45b01a234445b01923442d2c2045b00325456164b050515845441b2121
592d2cb00143632362b0002342b00f2b2d2c2045b0004360442d2c01b006
43b00743650a2d2c2069b04061b0008b20b12cc08a8cb8100062602b0c64
2364615c58b00361592d2c45b0112bb0172344b0177ae4182d2c45b0112b
b01723442d2cb01243588745b0112bb0172344b0177ae41b038a45186920
b01723448a8a8720b0a05158b0112bb0172344b0177ae41b21b0177ae459
59182d2cb0022546608a46b040618c482d2c4b53205c58b002855958b001
85592d2c20b0032545b019234445b01a23444565234520b00325606a20b0
09234223688a6a606120b01a8ab000527921b21a1a40b9ffe0001a45208a
54582321b03f1b235961441cb114008a5279b31940201945208a54582321
b03f1b235961442d2cb110114323430b2d2cb10e0f4323430b2d2cb10c0d
4323430b2d2cb10c0d432343650b2d2cb10e0f432343650b2d2cb1101143
2343650b2d2c4b525845441b2121592d2c0120b003252349b04060b02063
20b000525823b002253823b002256538008a63381b212121212159012d2c
4bb06451584569b00943608a103a1b212110592d2c01b005251023208af5
00b0016023edec2d2c01b005251023208af500b0016123edec2d2c01b006
2510f500edec2d2c20b001600110203c003c2d2c20b001610110203c003c
2d2cb02b2bb02a2a2d2c00b00743b006430b2d2c3eb02a2a2d2c352d2c76
b802b023701020b802b04520b0005058b00161593a2f182d2c21210c6423
648bb84000622d2c21b08051580c6423648bb82000621bb200402f2b59b0
02602d2c21b0c051580c6423648bb81555621bb200802f2b59b002602d2c
0c6423648bb84000626023212d2cb4000100000015b00826b00826b00826
b008260f10161345683ab001162d2cb4000100000015b00826b00826b008
26b008260f1016134568653ab001162d2c4b53234b515a5820458a60441b
2121592d2c4b545820458a60441b2121592d2c4b53234b515a58381b2121
592d2c4b5458381b2121592d2c014b53234b515ab00225b00425b0062549
23451869525a58b00225b00225b00525462345696048592121212d2cb013
4358031b02592d2cb0134358021b03592d2c4b54b012435c5a58381b2121
592d2cb012435c580cb00425b00425060c6423646164b807085158b00425
b00425012046b01060482046b0106048590a21211b2121592d2cb012435c
580cb00425b00425060c6423646164b807085158b00425b00425012046b8
fff060482046b8fff06048590a21211b2121592d2c4b53234b515a58b03a
2b1b2121592d2c4b53234b515a58b03b2b1b2121592d2c4b53234b515ab0
12435c5a58381b2121592d2c0c8a034b54b00426024b545a8a8a0ab01243
5c5a58381b2121592d2c462346608a8a462320468a608a61b8ff80622320
10238ab9035803588a70456020b0005058b00161b8ffba8b1bb0468c59b0
106068013a2d2c2320b000508a8a64b10003255458b0401bb10103255458
b037438b59b04f2b5923b0622b2321235865592d2cb13a000c215460432d
2cb1020042b123018851b1400188535a58b910000020885458b202010243
604259b12401885158b920000040885458b2020202436042b12401885458
b2022002436042004b014b5258b2020802436042591bb940000080885458
b202040243604259b94000008063b80100885458b202080243604259b940
00010063b80200885458b202100243604259b12601885158b94000020063
b80400885458b202400243604259b94000040063b80800885458b2028002
43604259b12801885158b94000080063b81000885458ba00020100000243
604259595959595959b10002435458400a37403a403b403e023f021bb101
02435458b237403aba0100003b0100b33e013f011bb18002435258b23740
3ab80180b13b401bb901000002435258b237403aba0180003b01401bb901
800002435258b237403ab80200b13b401bb237403aba0100003b01005959
59b9400000808855b94000020063b8040088555a58b33e003f011bb33e00
3f0159595942424242422d2cb0024354584b53234b515a58381b2121591b
21212121592d2c012d2cb0022563b0206066b00225b82000626023622d2c
234ab1024e2b2d2c234ab1014e2b2d2c238a4a234564b0022564b0022561
64b03543525821206459b1024e2b23b000505865592d2c238a4a234564b0
022564b002256164b03543525821206459b1014e2b23b000505865592d2c
20b003254ab1024e2b8a103b2d2c20b003254ab1014e2b8a103b2d2cb003
25b003258ab0672b8a103b2d2cb00325b003258ab0682b8a103b2d2cb003
2546b003254660b004252eb00425b00425b0042620b000505821b06a1bb0
6c592bb0032546b00325466061b08062208a2010233a232010233a2d2cb0
032547b003254760b0052547b0806361b00225b00625496323b005254ab0
80632058621b2159b0042646608a468a4660b02063612d2cb00426b00425
b00425b00426b06e2b208a2010233a232010233a2d2c2320b001545821b0
0225b1024e2bb0805020605920606020b001515821211b20b00551582120
6661b0402361b100032550b00325b00325505a5820b00325618a535821b0
00591b21591bb00754582066616523211b2121b000595959b1024e2b2d2c
b00225b004254ab0005358b0001b8a8a238ab00159b004254620666120b0
0526b0062649b00526b00526b0702b236165b02060206661b02061652d2c
b0022546208a20b000505821b1024e2b1b452321596165b00225103b2d2c
b0042620b802006220b80200638a236120b05d602bb00525118a128a2039
8a58ba005d10000004266356602b23212010204620b1024e2b23611b2321
208a201049b1024e2b593b2d2cba005d10000009256356602bb00525b005
25b00526b06d2bb15d0725602bb00525b00525b00525b00525b06f2bba00
5d10000008266356602b20b0005258b0502bb00525b00525b00725b00725
b00525b0712bb0021738b00052b00225b001525a58b00425b0062549b003
25b00525496020b0405258211bb000525820b0025458b00425b00425b007
25b0072549b00217381bb00425b00425b00425b0062549b0021738595959
595921212121212d2cb12501885058b94000020063b8040088545cb0134b
525b1bb001592d00000000010000000700008a1884255f0f3cf508190800
00000000a2e31dc200000000d684d860fb74fd8c105e0851000000090001
000000000000000100000721fe4500571000fb74f9d2105e000100000000
0000000000000000000001330639011c0000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000200006e0000000000000000000000000400
004a040000f00400002c040000530400002004000062040000580400004c
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000031d002a0000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
023900140000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
0000000000000337000c0000004b004b004b004b004b004b004b004b004b
004b004b004b004b004b004b00a700a700a700a7015101d002cf03d70476
0553062806b206b206b206b206b206b206b206b206b206b206b206b206b2
06b206b206b206b206b206b2077007700770077007700770077007700770
077007700770077007700770077007700770077007700770077007700770
077007700770077007700770077007700770077007700770077007700770
07700770077008b008b008b008b008b008b008b008b008b008b008b008b0
08b008b008b008b008b008b008b008b008b008b008b008b008b008b008b0
08b008b008b008b008b008b008b008b008b008b008b008b008b008b008b0
08b008b008b008b008b008b008b008b008b008b008b008b008b008b008b0
08b008b008b008b008b008b008b008b008b008b008b008b008b008b008b0
08b008b008b008b008b008b008b008b008b008b008b008b008b008b008b0
08b008b008b008b008b008b008b008b008b008b008b008b008b008b008b0
08b008b008b008b008b008b008b008b008b008b008b008b008b008b008b0
08b008b008b008b008b008b008b008b008b008b008b008b008b008b008b0
08b008b008b008b008b008b008b008b008b008b008b008b008b008b008b0
08b008b008b008b008b008b008b008b008b008b008b008b008b008b008b0
08b008b008b008b008b008b008b008b008b008b008b008b008b008b008b0
08b008b008b008b008b008b008b008b008b008b008b008b008b008b008b0
08b008b008b008b008b008b008b008b008b008b008b008b008b008b008b0
08b008b008b008b008b008b008b008b008b008b008b008b0094e00010000
013302b5003c00d100070002001000400086000005e904eb000500020000
0007005a0003000104090000021e00be0003000104090001001e00a00003
000104090002000e009200030001040900030058003a0003000104090004
001e00a00003000104090005001800220003000104090006002200000054
0069006d00650073004e006500770052006f006d0061006e00500053004d
005400560065007200730069006f006e00200037002e00300030004d006f
006e006f0074007900700065003a00540069006d006500730020004e0065
007700200052006f006d0061006e00200052006500670075006c00610072
00200028004d006900630072006f0073006f006600740029005200650067
0075006c0061007200540069006d006500730020004e0065007700200052
006f006d0061006e00a90020003200300031003700200054006800650020
004d006f006e006f007400790070006500200043006f00720070006f0072
006100740069006f006e002e00200041006c006c00200052006900670068
00740073002000520065007300650072007600650064002e0020000d000a
000d000a0048006500620072006500770020004f00700065006e00540079
007000650020004c00610079006f007500740020006c006f006700690063
00200063006f0070007900720069006700680074002000a9002000320030
003000330020002600200032003000300037002c002000520061006c0070
0068002000480061006e0063006f0063006b002000260020004a006f0068
006e00200048007500640073006f006e002e002000540068006900730020
006c00610079006f007500740020006c006f00670069006300200066006f
00720020004200690062006c006900630061006c00200048006500620072
006500770020006900730020006f00700065006e00200073006f00750072
0063006500200073006f00660074007700610072006500200075006e0064
0065007200200074006800650020004d004900540020004c006900630065
006e00730065003b002000730065006500200065006d0062006500640064
006500640020006c006900630065006e0073006500200064006500730063
00720069007000740069006f006e00200066006f00720020006400650074
00610069006c0073002e0000410a005403ef02ad001d001f03ee03ed003c
001f03edb2061d1fb803ecb3032a1f3f411503e4006003e9009f03e500df
03e50004001003e4001003e5003f03e5007003e400ff03e40005ffc003e1
b345453240b803e1b32b2e3240b803e1b2282932b9ffc003e1b21a1c32bd
03e102ac0027001fffc003dfb2161b32b9ffc003deb2424232b9ffc003de
b2363832b9ffc003deb32a2d32df410a03de00ef03de000203de03df0028
001fffc003dfb3282e32f0410d03df0001037e000f0101001f00a003dd00
b003dd0002004003dab32426329fbf03cc000103ca03c90064001fffc003
c9b20d1132410a03c703b70012001f03b603b50064001fffc003b5b30e11
32004173038d000100c0038d00d0038d00e0038d00f0038d0004006f03a7
007f03a7008f03a700af03a70004000f03a7001f03a7002f03a7004f03a7
000403ab03ab00ef03a50001000f03a5002f03a5006f03a5008f03a50004
005403aa0001006b03aa000103a8036a0022001f038c03940015001f038b
03930015001f03a40393001a001f03a20394001e001f03a10393001e001f
039f0394001e001f039b0394001a001f039a0393001e001f039903940016
001f039803940016001f03970393001b001f03960394001b001f03950393
001b001f03760375001a001f03740375001a001f03a00373b21e1f10411e
039300200393003003930003002003940030039400400394000300000394
00010383036c001e001f03b1036c0032001f036d036c0032001fffc0037d
b2212332b9ffc0037db3171932a0410a037d00b0037d00c0037d00d0037d
0004ffc0037cb2212332b9ffc0037cb3171932a0412d037c00b0037c00c0
037c00d0037c000400300373004003730002000003730010037300200373
000300e0037300f00373000200b0037300c0037300d00373000300840373
0090037300a0037300030377036a0029001f0389036ab2281f40b80367b3
3940323fbb0366000100400366b3191d328fbb0366000100400366b3090a
3240b80366b3090e3240b80366b3090f323fbb0365000100400365b3090c
3240b80365b31a1d3240b80365b3090e326b410e0363007b036300020014
036300240363003403630044036300040363b2242f1fba034e006d080040
0e1f7f027f037f047f050430440112bf033200500800001f0012032d003c
0800b61f5f3c013785a04185036200010000036200100362007003620090
0362000400f0035f00010020035e0020035f0030035f0040035e00040000
035e0000035f0010035f00d0035e00e0035f00050010030f0020030f0030
030f00d0030f00e0030f00050000030f0010030f0050030f0060030f0070
030f00d0030f00060000030f0010030f0020030f0030030f00e0030f00f0
030f0006030f00270000030e0030030e000200e0030e00f0030e0002030e
004a00e0030d00f0030d0002030d002700d002fc0001001002fc002002fc
005002fc000300d002fc00e002fc0002000002fc001002fc002002fc0030
02fc005002fc006002fc000600e002fc00f002fc0002002002fc003002fc
004002fc000302fc402c27c02901b02901a02901902901403c3f41324022
3f4132121212858f4caf4cbf4ccf4c045f4c6f4c7f4c0337b8ffc0b3b22b
3032b8ffc0b3b2222532b8ffc0b5b2191a32370f413b02af0001005f02af
009f02af00df02af0003001f02af002f02af003f02af006f02af000402af
02af001f02ad002f02ad003f02ad004f02ad005f02ad000500df02ad0001
000f02ad001f02ad003f02ad005f02ad009f02ad0005005f02ad00df02ad
0002000f02ad001f02ad003f02ad0003004002acb23a334f414d02ac005f
02ac009f02ac0003002f02ac003f02ac0002000f02ac003f02ac00af02ac
000300b002ac00e002ac0002004f02ac005f02ac00a002ac0003001f02ac
002f02ac003f02ac0003000f02ac0001000f035a0001000f035a001f035a
003f035a005f035a0070035a000500cf035700df03570002000f0357001f
03570070035700af03570004035a035a0357035702ad02ad02ac02ac032c
400d31151f001616000000121108104110020c004a000d01a8004a000d01
98004a000d0189004a000d013f004a000d0124400e4a0df64a0dbe4a0d86
4a0d274a0dbe02280041000d01940041000d0121400b410db4410d4f410d
29410d411002170021000d02150021000d02060021000d01eb0021000d01
4e0021000d012c4014210df9210df3210df1210d9d210d71210d3d210d41
10021c001f000d0214001f000d020b001f000d0196001f000d014a001f00
0d0126400b1f0dc61f0d571f0d371f0d410d019e0141000d00420141000d
001e0141000d001b0141000d01f2b40f440f0009bb01f20044000d0201b2
3c291fb80200b23c291fb801ffb23c411fb801feb23c471fb801fdb23c9e
1fb801fab23c931fbc01f9010f0101001f01f6b224e41f411501f4014904
01001f01f301490401001f01f1014900ab001f01f001490067001f01a600
3c0125001f01a4b23c811f411501a3010f019a001f01a200220801001f01
a100500401001f019f0149019a001f019d01490067001f019cb22c621fb8
019bb22c791fbc019a002c0101001f0197b22ce41fb80193b22c891fb801
92b22c6c1fb8018fb2259e1fb8016ab23c2a1f4111016700240201001f01
63002502ab001f014c010f019a001f01480149006c001f0147b22c891fb8
0145b22c9e1fb80144b22c791fb80143b223311fb80127b23c811fbc0123
00500101001f011fb223e41f4115011d0023019a001f011c00230801001f
011b00250801001f010e010f0401001f010d00220401001f0108b223811f
b80106b425e41ff73cbb0125001f00f5010fb29e1fe3bc01490156001f00
e20149b2ab1fd1b901490401b21fcf2cb80125b61fce23bb1fc524b80156
b21fc02cb80801b21fbf2cb80201b51fb124e41fb0b901490201b61faf2c
671fad23b80801b21fa523b80201400b1f9f3c2d1f9b235a1f9925b80201
b21f812cbc0401001f006d010f0156400b1f592c3e1f4c3cab1f4625b801
01b21f403cb80125400a1f3a23721f393cab1f38b80149b3ab1f3124b804
01b21f3025b802abb61f2a24e41f2623b80156b41f35555537ba02350007
0175402c0774076207560751073b0733072d0720071d071c071408120810
080e080c080a080808060804080208000814b8ffe0402b00000100140610
000001000604000001000410000001001002000001000200000001000002
010802004a00b013034b024b534201b0124b004b5442b0372b4bb807ff52
b0382b4bb008505b58b101018e59b0382bb00288b801005458b801ffb101
018e851bb0124358b90001012f858d1bb90001017c858d5959014bb0c063
004b6220b0f65323b8010a515ab0052342180016763f183f123e11394644
3e113946443e113946443e113946443e11394660443e11394660442b2b2b
2b2b2b2b2b2b2b2b182b2b2b2b2b2b2b2b2b2b2b2b2b181d42b0964b5358
b235aaaa1d4259b0324b5358b235ffff1d42594bb04753205c58b9027102
6f4544b90270026f45445958b9017a0271455258b90271017a4459594bb0
4753205c58b9002202704544b9003c027045445958b901b30022455258b9
002201b34459594bb04c53205c58b9014900224544b1222245445958b901
c20149455258b9014901c24459594bb06753205c58b9002402714544b900
50027145445958b9021e0024455258b90024021e4459594bb8020153205c
58b9010f00224544b1222245445958b90c00010f455258b9010f0c004459
594bb01c53205c58b125254544b12c2545445958b13725455258b1253744
59594bb0ab53205c58b125254544b1232545445958b901590025455258b9
002501594459594bb8010153205c58b125254544b1282545445958b90208
0025455258b9002502084459592b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b
2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b
2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b
65422b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b
2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b01b361dc6463456523456023456560
234560b08b766818b080622020b164dc4565234520b003266062636820b0
03266165b0dc236544b064234420b161634565234520b003266062636820
b003266165b063236544b0612344b10063455458b163406544b261406145
23614459b3a67f434b456523456023456560234560b089766818b0806220
20b1437f4565234520b003266062636820b003266165b07f236544b04323
4420b1a64b4565234520b003266062636820b003266165b04b236544b0a6
2344b1004b455458b14b406544b2a640a645236144594b5242014b5058b1
08004259435c58b108004259b3020b0a124358601b2159421610703eb012
4358b93b21187e1bba040001a8000b2b59b00c2342b00d2342b0124358b9
2d412d411bba04000400000b2b59b00e2342b00f2342b0124358b9187e3b
211bba01a80400000b2b59b0102342b0112342002b001845694445694445
694445694473737374737373737475752b7373747475184569447373742b
4bb021534bb046515a58b03cb03c45b040604459012b2b2b2b75752b5840
365f235f255f285fa5046f236f256f286fa5044f234f254f284fa5043f23
3f253f283fa5042f232f252f282fa5041f231f251f281fa5047575757575
755943584010bf3ccf3c026f3c7f3c8f3c9f3caf3c0575755943584012bf
22cf22025f226f227f228f229f22af2206757559435c58b6403c9f22ef22
0375592b2b01747474744544737374747575454473454473744544737475
73737373732b5840246009700980090310092009300940095009056f037f
038f03031f032f033f034f035f0305b8ffc0b2073a33b8ffc04046063a33
900ba00bb00bc00bd00b05b006c006d006e006f006052006300640065006
6006700680069006a006099006900702600b700b800b03100b200b300b40
0b500b051f070100757575737575752b2b757575751b40100706441f0b0a
441f0302441f0908441f2b2b2b2b592b752b435841220063032d00010003
032d0013032d0023032d0033032d0053032d000500c3032d00d3032d00e3
032d00f3032d00040083032d0093032d00a3032d00b3032d0004032d032d
4518694474747575592b4358b900180332b330353238b80332b361663238
b80332b3535a3238b80332b3454e3238b80332b33c413218b80332b23f33
0a410f0332000100ba033200ca033200da033200ea033200fa0332000503
3203324518694474752b2b2b2b2b2b597300732b012b7575002b2b2b7400
2b2b2b732b74012b002b2b017373737474732b2b00732b2b002b2b2b0173
74732b012b2b012b2b2b2b2b2b2b2b2b2b2b2b2b2b000173750073730045
69440073730173742b2b2b2b2b732b00732b752b2b732b2b2b2b2b2b2b2b
2b73742b002b2b2b2b0000>
[4765 ] AllocGlyphStorage
]def 
124 60 
PrepFor2015
Type42DictEnd
1 3808 87 <00010014fff1023c04c1001b0228b0852b58b1020243545840251d401213
02551d40101002550b0c18121202550c15130105131812120255130e1313
025513b8fff8b40f0f025513b8fff4b40d0d025513b8fff0400c10100255
130b082c0f161404b8011bb2000106003fcdfdd0cd2fedc4012f2b2b2b2b
2bddc010c62f2bcd31302b2b1bb106024354584019170c10100655160c10
100655150c10100655160c101006551bb8ffe8b4101006551ab8ffe8b410
10065519b8ffe8401410100655700b010b0f1b01156914014914011404b8
011b401c0106082c0f0b1b0105021010065505080f0f0655050c0d0d0655
0513b8ffeeb41010065513b8fff0b40f0f065513b8fffab70d0d06551313
1d1c1112392f2b2b2bdd2b2b2bd0cd003fed3ffdd05d5dc010cd10c45d31
30012b2b2b2b2b002b2b1bb9000dffe840410c395f015f02023f1d991199
19bf15bf16b819e819079f1d01891a014f0c4f0d5f0c5f0df51805061815
18271803161518191a030118191a03141ba00103153004b8011b401c0103
30020201060c35082c0f0b16cf15df15ef15031565141bcc000bb801ec40
2c200c010c2e2f1db01d021d000101040405241450130180130100131013
b013c013d013e0130613601cab89182b10f65d71723cfd3c103c103c105d
f45ded10ed10f45d3c003ffde43f3c10ed10edfd3c10e401111739001117
391239313000715d0171725d00722b59591bb61b014014160104b807ecb4
6c01060f08b80809b26c0f0b00183f2b3f2b39391a10cd30315901113315
231114163332363733060623222626351123353636373637014ad6d63328
213e11272380442e582a9137732d172904c1fed346fdae593e2928626333
5f630268211669482665>FAAAAA+TimesNewRomanPSMT AddT42Char 
1 0 0 <0002011c0000051c050000030007006cb0852b58b10201bb02be00060007
02bfb2000504b802beb403000a0704b802beb5010019080605bf02be0002
000301290009016b015e00182b10f63cfd3c4e10f43c4dfd3c003f3cfd3c
10fc3cfd3c31301bb10004b807d7b36c000107b807d7b16c0100182f2b2f
2b3031592111211125211121011c0400fc2003c0fc400500fb002004c000
>FAAAAA+TimesNewRomanPSMT AddT42Char 
FAAAAA+TimesNewRomanPSMT /CharStrings get begin
/t 87 def
end
FAAAAA+TimesNewRomanPSMT /Encoding get
dup 116 /t put
pop
end
%ADOEndSubsetFont
/ZUVFPK+TimesNewRomanPSMT /FAAAAA+TimesNewRomanPSMT findfont ct_VMDictPut
/ZUVFPK+TimesNewRomanPSMT*1 
[116{/.notdef}rp /t 139{/.notdef}rp]
ZUVFPK+TimesNewRomanPSMT nf
ZUVFPK+TimesNewRomanPSMT*1 [8.61069 0 0 -8.61069 0 0 ]msf
265.014 57.4046 mo
(t)sh
29.7786 61.3511 mo
44.1298 61.3511 li
44.1298 82.8779 li
29.7786 82.8779 li
cp
0 0 0 0 cmyk
f
29.7786 61.3511 mo
44.1298 61.3511 li
44.1298 82.8778 li
29.7786 82.8778 li
cp
.749844 .679255 .654902 .901945 cmyk
@
10 ml
22.603 82.8778 mo
262.002 82.8778 li
@
265.769 82.8779 mo
260.746 85.3893 li
262.002 82.8779 li
260.746 80.3664 li
265.769 82.8779 li
cp
f
265.769 82.8778 mo
260.746 85.3893 li
262.002 82.8778 li
260.746 80.3664 li
265.769 82.8778 li
cp
@
22.603 47 mo
262.002 47 li
@
265.769 47 mo
260.746 49.5115 li
262.002 47 li
260.746 44.4885 li
265.769 47 li
cp
f
265.769 47 mo
260.746 49.5114 li
262.002 47 li
260.746 44.4885 li
265.769 47 li
cp
@
44.1298 47 mo
44.1298 20.7159 li
@
44.1298 19.1014 mo
45.2061 21.254 li
44.1298 20.7159 li
43.0534 21.254 li
44.1298 19.1014 li
cp
f
44.1298 19.1014 mo
45.2061 21.254 li
44.1298 20.7159 li
43.0534 21.254 li
44.1298 19.1014 li
cp
@
58.4809 32.6489 mo
83.3371 32.6489 li
83.3371 47 li
58.4809 47 li
cp
0 0 0 0 cmyk
f
4 ml
58.4809 32.6488 mo
83.3371 32.6488 li
83.3371 47 li
58.4809 47 li
cp
.749844 .679255 .654902 .901945 cmyk
@
173.29 32.6489 mo
195.843 32.6489 li
195.843 47 li
173.29 47 li
cp
0 0 0 0 cmyk
f
173.29 32.6488 mo
195.843 32.6488 li
195.843 47 li
173.29 47 li
cp
.749844 .679255 .654902 .901945 cmyk
@
158.939 61.3511 mo
173.29 61.3511 li
173.29 82.8779 li
158.939 82.8779 li
cp
0 0 0 0 cmyk
f
158.939 61.3511 mo
173.29 61.3511 li
173.29 82.8778 li
158.939 82.8778 li
cp
.749844 .679255 .654902 .901945 cmyk
@
216.343 61.3511 mo
230.695 61.3511 li
230.695 82.8779 li
216.343 82.8779 li
cp
0 0 0 0 cmyk
f
216.343 61.3511 mo
230.695 61.3511 li
230.695 82.8778 li
216.343 82.8778 li
cp
.749844 .679255 .654902 .901945 cmyk
@
1 /0 /CSD get_res sepcs
1 sep
ZUVFPK+TimesNewRomanPSMT*1 [8.61069 0 0 -8.61069 0 0 ]msf
265.014 93.2824 mo
(t)sh
%ADOBeginSubsetFont: FAAAAA+TimesNewRomanPSMT AddGlyphs
ct_T42Dict begin
systemdict /gcheck known {currentglobal ZUVFPK+TimesNewRomanPSMT gcheck setglobal} if
1 334 19 <0002004affe803b705680010002400dbb0852b58b2610820b80106b20505
15b80106b20d0d1ab8010f4012091a002640260240266026a026e0260426
11b8010f400e5f006f007f008f00a00005001925ba011e010100182b4e10
f45d4ded4e105d71f64ded003fed3fed31304379404c0124232422240206
02010301020607251c1b1d1b1e1b030613260f250b261819171902062104
1162001f061a6201140e116200160c1a620124012062011b082062011210
156200190a1562002b2b2b2b012b2b2b2b2a2b2b2b2a2b2a2a811bb10520
b807eab46c05050d15b807e9b26c0d0d00183f2b3f2b3031591334123736
333217161114020623222726371017163332363736113427262726232207
06024a8c745a609c7c9b88d362c2816dc445397136741e2e302439293a44
354834029ee8014f52419fc5feafecfeb695e5c1f7fee8b1956172ac0139
e89b7330213d53fe9c00>ZUVFPK+TimesNewRomanPSMT AddT42Char 
ZUVFPK+TimesNewRomanPSMT /CharStrings get begin
/zero 19 def
end
ZUVFPK+TimesNewRomanPSMT /Encoding get
dup 48 /zero put
pop
systemdict /gcheck known {setglobal} if
end
%ADOEndSubsetFont
/ZUVFPK+TimesNewRomanPSMT*1 
[48{/.notdef}rp /zero 67{/.notdef}rp /t 139{/.notdef}rp]
ZUVFPK+TimesNewRomanPSMT nf
ZUVFPK+TimesNewRomanPSMT*1 [8.61069 0 0 -8.61069 0 0 ]msf
27.2672 93.2824 mo
(0)sh
%ADOBeginSubsetFont: FAAAAA+TimesNewRomanPSMT AddGlyphs
ct_T42Dict begin
systemdict /gcheck known {currentglobal ZUVFPK+TimesNewRomanPSMT gcheck setglobal} if
1 1966 23 <00020020000003b90568000a000d0103b0852b584028160d010f00450d40
0f03400f012a0c011507010206010309050601040c0b0d00040c0d04060c
0d0db8011c401207081407070808030407060c08001f0d010dbb019c0006
000b019f400d050106090806060805040c0c04bb0149000300080166400b
09090f03019f03af030203b801f74018013f0001001a000f01600fa00fe0
0f030f0640070107190eba018e010100182b4e10f4713c105d71f65d3c4d
f45d713c10e610fd3c003f3f392f103c103c10ed10fd723c113911390111
1239872e2b047d10c4011112390f0f0f313000725d015d71721bb50c0408
020d06b80817400a6c070a0d0d040805040c00183f3f12392f33332b3211
1239303159011523112311213501331123110103b9b6a5fdc202756ea5fe
2401f48efe9a0166800382fc8c02a1fd5f00>ZUVFPK+TimesNewRomanPSMT AddT42Char 
ZUVFPK+TimesNewRomanPSMT /CharStrings get begin
/four 23 def
end
ZUVFPK+TimesNewRomanPSMT /Encoding get
dup 52 /four put
pop
systemdict /gcheck known {setglobal} if
end
%ADOEndSubsetFont
/ZUVFPK+TimesNewRomanPSMT*1 
[48{/.notdef}rp /zero 3{/.notdef}rp /four 63{/.notdef}rp /t 139{/.notdef}rp]
ZUVFPK+TimesNewRomanPSMT nf
ZUVFPK+TimesNewRomanPSMT*1 [8.61069 0 0 -8.61069 0 0 ]msf
142.076 93.2824 mo
(4)sh
%ADOBeginSubsetFont: FAAAAA+TimesNewRomanPSMT AddGlyphs
ct_T42Dict begin
systemdict /gcheck known {currentglobal ZUVFPK+TimesNewRomanPSMT gcheck setglobal} if
1 2726 25 <00020058ffe803b1056800180028012bb0852b58402a7509760a770e8209
d925e925060603017d037a047a168517043c082806050323192819060320
5f080108b80143b620260126260f01b8018db318000520b80106b30f0d01
00ba01400023010f40120b1a002a402a02402a602aa02ae02a042a19ba01
3e001b010f4012001310132013301340139013a01307131929ba011e0101
00182b4e10fc5d4dfde44e105d71f64dedf43c003fed3f3ced12392f5ded
721217390111121739b10602435458b40b061b0602005d5931304379402c
1c2509121d1c1e1c020611250d2625092362011f101b6200210e23620124
0a2662011c12206200220c206200002b2b2b012b2b2b2b2b2a8181005d01
715d1bb10826b807f5b56c08080f1801b807d8b46c18050f20b807e3b26c
0f0d00183f2b3f2b12392f2b30315901150e030736333216151407062322
272611341224363301061514161716333236353426232206039684a7a36b
2490918bcc677ccc8b61be92010ff86bfdcc12474633495789887d265705
68250d4fa2c78963e0b0aa8caa5cb3011db60148fe58fd44875360e1422f
a498abfa2000>ZUVFPK+TimesNewRomanPSMT AddT42Char 
ZUVFPK+TimesNewRomanPSMT /CharStrings get begin
/six 25 def
end
ZUVFPK+TimesNewRomanPSMT /Encoding get
dup 54 /six put
pop
systemdict /gcheck known {setglobal} if
end
%ADOEndSubsetFont
/ZUVFPK+TimesNewRomanPSMT*1 
[48{/.notdef}rp /zero 3{/.notdef}rp /four /.notdef /six 61{/.notdef}rp /t 
139{/.notdef}rp]
ZUVFPK+TimesNewRomanPSMT nf
ZUVFPK+TimesNewRomanPSMT*1 [8.61069 0 0 -8.61069 0 0 ]msf
199.481 93.2824 mo
(6)sh
%ADOBeginSubsetFont: FAAAAA+TimesNewRomanPSMT AddGlyphs
ct_T42Dict begin
systemdict /gcheck known {currentglobal ZUVFPK+TimesNewRomanPSMT gcheck setglobal} if
1 4448 306 <0001000cffe4030f0394001b00e4b0852b58403ff910019810a810f900f9
01048a008a018a0f8a10046a106e1a6e1b036a006a016a0f032f1d7b007b
100309080806140f151f150215151b00001010cf110111b80364402b1a19
0680060106060b0b142f15150d1a901b011b1b03092f900801080803100d
1006559f03af030203600db8ffee400b0e100655500d01f00d010d2f5d72
2bfd5d2b322f5ded11332f5d3c11332fed003f332f713f3cfd5d3c103c10
3c322f5d3c11332f3c3130015d5d5d5d5d5d1b400915151908080b001911
b80817b46c19060b06b8081cb26c0b0b00183f2b3f2b3212392f11392f30
3159010306151416333237330223223534371323220607233e0233211501
ed1d07432b60122521bcc5162563525b27242058504f01ec0302fee14b4b
8f3d79feeae272aa012037536e812d92>ZUVFPK+TimesNewRomanPSMT AddT42Char 
ZUVFPK+TimesNewRomanPSMT /CharStrings get begin
/tau 306 def
end
ZUVFPK+TimesNewRomanPSMT /Encoding get
dup 32 /tau put
pop
systemdict /gcheck known {setglobal} if
end
%ADOEndSubsetFont
/ZUVFPK+TimesNewRomanPSMT*1 
[32{/.notdef}rp /tau 15{/.notdef}rp /zero 3{/.notdef}rp /four /.notdef /six 
61{/.notdef}rp /t 139{/.notdef}rp]
ZUVFPK+TimesNewRomanPSMT nf
ZUVFPK+TimesNewRomanPSMT*1 [8.61069 0 0 -8.61069 0 0 ]msf
11.537 34.4428 mo
( )sh
%ADOBeginSubsetFont: FAAAAA+TimesNewRomanPSMT AddGlyphs
ct_T42Dict begin
systemdict /gcheck known {currentglobal ZUVFPK+TimesNewRomanPSMT gcheck setglobal} if
1 674 20 <000100f0000003060568001600b2b0852b58401440186018a018e0180400
1840180276008600020e411301690141000901a000220003016901410008
01a00023000001f8000f016900160141000001f2400e010f0f0209020105
09080c020300ba01f70003014940120e0e0f401135300f7f0f900fa00f04
0f1917ba022401e400182b4e10f45d2b3c4d10ede4103c003f3c3f3c1112
3901113900f5edfc01f52b2b3130005d01715d1bb4010507090ab803e2b2
6c090c00183f2b323f30315913253311141616171521353e023511342726
26232207f0014a21133c5cfe026038160a07251a254204c7a1fb8772381e
022525021d317a02dc942a201e1f>ZUVFPK+TimesNewRomanPSMT AddT42Char 
ZUVFPK+TimesNewRomanPSMT /CharStrings get begin
/one 20 def
end
ZUVFPK+TimesNewRomanPSMT /Encoding get
dup 49 /one put
pop
systemdict /gcheck known {setglobal} if
end
%ADOEndSubsetFont
/ZUVFPK+TimesNewRomanPSMT*1 
[32{/.notdef}rp /tau 15{/.notdef}rp /zero /one 2{/.notdef}rp /four /.notdef 
/six 61{/.notdef}rp /t 139{/.notdef}rp]
ZUVFPK+TimesNewRomanPSMT nf
ZUVFPK+TimesNewRomanPSMT*1 [7.17557 0 0 -7.17557 0 0 ]msf
14.9902 36.5954 mo
(1)sh
ZUVFPK+TimesNewRomanPSMT*1 [8.61069 0 0 -8.61069 0 0 ]msf
11.537 70.3206 mo
( )sh
%ADOBeginSubsetFont: FAAAAA+TimesNewRomanPSMT AddGlyphs
ct_T42Dict begin
systemdict /gcheck known {currentglobal ZUVFPK+TimesNewRomanPSMT gcheck setglobal} if
1 928 21 <0001002c000003ab0568001e0195b0852b58408207180b3917181c3d3418
401c3d3419401c3d340f1e161629073c074907a9070640205b045a085b17
5a186b08741174129c0b9d0e9911ac0bac0ec905c917c818d917d918e020
f904f9171515011d0419051b15191619171d180709170b180b1d34194719
89178f200718190202171a190c19060d031902050618171615140713040d
b8016840090940140c3f80090109b80333400c10051a8f19019f19af1902
19ba03330003018db301020c1eb8018d400d0006e24f135f136f137f1304
13b801074013400001001a002040208020036020a020022019bb01f90003
000d014040145f026f027f028f02bf02cf02df02ef020802191fba018e01
0100182b4e10f45d4de43ced4e105d71f65d4df45ded10ed003f3cedfd5d
713c3ffd71b10602435458b78f0901bf09cf0902005d71592be411121739
11123901111239390210b10602435458b47d198d1902005d590e3c871005
7dc40ec431300171725d005d012b2b2b002b1bb70d0d101e1e021009b808
1ab46c10050219b8081ab26c020c00183f2b3f2b12392f11392f30315901
032135000035342623220607233636333216151407060702072132363637
03ab5ffce0016101209e6e649f262519cf9ba5dd304aa6f93e01626c5746
1a0105fefb2501420198a981a67571b9c6d4906767a2b5fef03810312d00
>ZUVFPK+TimesNewRomanPSMT AddT42Char 
ZUVFPK+TimesNewRomanPSMT /CharStrings get begin
/two 21 def
end
ZUVFPK+TimesNewRomanPSMT /Encoding get
dup 50 /two put
pop
systemdict /gcheck known {setglobal} if
end
%ADOEndSubsetFont
/ZUVFPK+TimesNewRomanPSMT*1 
[32{/.notdef}rp /tau 15{/.notdef}rp /zero /one /two /.notdef /four 
/.notdef /six 61{/.notdef}rp /t 139{/.notdef}rp]
ZUVFPK+TimesNewRomanPSMT nf
ZUVFPK+TimesNewRomanPSMT*1 [7.17557 0 0 -7.17557 0 0 ]msf
14.9902 72.4733 mo
(2)sh
%ADOBeginSubsetFont: FAAAAA+TimesNewRomanPSMT AddGlyphs
ct_T42Dict begin
systemdict /gcheck known {currentglobal ZUVFPK+TimesNewRomanPSMT gcheck setglobal} if
1 3428 45 <0001002affe10311054c00230112b0852b58403b4512015f135f14026417
7017850cab0fc0250512180130254025021a08081f1b0221221d1f1b0121
2316181c101619020102301440140250140114b8030ab519280d091d1cb8
fffab4131302551cb8fff4b40f0f02551cb8fff440210d0d02551c220909
300840088f089f08af0805bf08df08ff080308021313025508b8ffea4014
1010025508160d0d0255081a25df100110e02425b80231b321e0a2182b2b
4ee45d10f62b2b2b5d713c4d10fd2b2b2b3c003feded5d713f3c11390111
1239392b2b3130437940101a1b0a0c1a0c1c3b010b0a1b0b193b002b0110
3c2b81810171725d005d711bb41414010d19b807ebb56c0d09040100b803
e2b26c010200183f2b323f2b12392f303159133521152322070615111406
062322263534373633321617163332363511342726272623cc0245315326
1843a4745e6c19212c20332717241b2f0d0a202b300527252531207afd69
99be8d5d3c31191f2a5b364254039e6721191218>ZUVFPK+TimesNewRomanPSMT AddT42Char 
ZUVFPK+TimesNewRomanPSMT /CharStrings get begin
/J 45 def
end
ZUVFPK+TimesNewRomanPSMT /Encoding get
dup 74 /J put
pop
systemdict /gcheck known {setglobal} if
end
%ADOEndSubsetFont
/ZUVFPK+TimesNewRomanPSMT*1 
[32{/.notdef}rp /tau 15{/.notdef}rp /zero /one /two /.notdef /four 
/.notdef /six 19{/.notdef}rp /J 41{/.notdef}rp /t 139{/.notdef}rp]
ZUVFPK+TimesNewRomanPSMT nf
ZUVFPK+TimesNewRomanPSMT*1 [8.61069 0 0 -8.61069 0 0 ]msf
64.1541 42.3359 mo
(J)sh
%ADOBeginSubsetFont: FAAAAA+TimesNewRomanPSMT AddGlyphs
ct_T42Dict begin
systemdict /gcheck known {currentglobal ZUVFPK+TimesNewRomanPSMT gcheck setglobal} if
1 150 15 <0001006efeab019800c80017006db0852b58402759025917c41603091760
19d019030901000704040f081200b612400c0b043a0f151f1580150315b8
012a400b1f0f5f0f020f19189ca4182b4e10f45d4dfd5ded003fede41239
01111217393130015d01711bb70100000c12120c0b00183f332f11332f33
3031591335363635342726232207062322263534363332161514066e6771
0907070b251214313a4b3642678ffeab2c228f50130d0914093a33314673
5f67b100>ZUVFPK+TimesNewRomanPSMT AddT42Char 
ZUVFPK+TimesNewRomanPSMT /CharStrings get begin
/comma 15 def
end
ZUVFPK+TimesNewRomanPSMT /Encoding get
dup 44 /comma put
pop
systemdict /gcheck known {setglobal} if
end
%ADOEndSubsetFont
/ZUVFPK+TimesNewRomanPSMT*1 
[32{/.notdef}rp /tau 11{/.notdef}rp /comma 3{/.notdef}rp /zero /one /two 
/.notdef /four /.notdef /six 19{/.notdef}rp /J 41{/.notdef}rp /t 
139{/.notdef}rp]
ZUVFPK+TimesNewRomanPSMT nf
ZUVFPK+TimesNewRomanPSMT*1 [7.17557 0 0 -7.17557 0 0 ]msf
67.4952 42.3359 mo
(1,1)sh
ZUVFPK+TimesNewRomanPSMT*1 [8.61069 0 0 -8.61069 0 0 ]msf
178.246 42.3359 mo
(J)sh
ZUVFPK+TimesNewRomanPSMT*1 [7.17557 0 0 -7.17557 0 0 ]msf
181.587 42.3359 mo
(1,2)sh
ZUVFPK+TimesNewRomanPSMT*1 [7.17557 0 0 -7.17557 0 0 ]msf
30.7092 76.0611 mo
(J2)
[2.79245 0 ]xsh
ZUVFPK+TimesNewRomanPSMT*1 [7.17557 0 0 -7.17557 0 0 ]msf
37.0887 76.0611 mo
(,1)
[1.7939 0 ]xsh
ZUVFPK+TimesNewRomanPSMT*1 [7.17557 0 0 -7.17557 0 0 ]msf
102.465 76.0611 mo
(J2)
[2.79245 0 ]xsh
ZUVFPK+TimesNewRomanPSMT*1 [7.17557 0 0 -7.17557 0 0 ]msf
108.844 76.0611 mo
(,2)
[1.79389 0 ]xsh
ZUVFPK+TimesNewRomanPSMT*1 [7.17557 0 0 -7.17557 0 0 ]msf
159.869 75.3435 mo
(J2)
[2.79245 0 ]xsh
%ADOBeginSubsetFont: FAAAAA+TimesNewRomanPSMT AddGlyphs
ct_T42Dict begin
systemdict /gcheck known {currentglobal ZUVFPK+TimesNewRomanPSMT gcheck setglobal} if
1 1438 22 <00010053ffe8035605680032017fb0852b58b9000affe0b20c3909b8ffc0
403c0c394109450a460b4b2204cf09012929382940346034cf34e034f70a
0700340141097f237a2eaa24b924ba2ec92edf23df25db2eea22e9250c49
0829b8018cb328281000b802e4b3d0300130b80334b5030510160116b801
9fb51d402b2f341db80143b3100d2928bb01680014000902e3400b502080
20029020a0200220b80333b3b00c010cb80190400b502d802d02902da02d
022db80333b55f077f070207b802e5400a403401a034c034023400b8013e
b74013bf1302131933ba011e01e800182b4e10f45d4de4105d71f65ded5d
71f45ded5d71e410f43c003fed2bed723fed5ded12392fed313043794036
2e2f1e260a0f04062221232124212521040605250e26260a2062012f042d
62011e0f206201210b2762010a092e063062011f0d1d62002b2b103c2b01
2b2b2b2b2b2a81818181005d01715d7200712b2b1bb309032829b803e2b5
6c2828100330b80813b46c0305101db807f5b26c100d00183f2b3f2b1239
2f2b12393031591336363332171615140716161514070621222635343633
321716161716333236353427262726262323353e02353426232207683ab1
84a35742ba7d807092feeb89632f21191a117817252a6697231a1f2b964e
204f9f4881609b68044a89956a4f5a949e31b67bb081a844271d2c08053f
060b9e6c4f4b381d28411e0a5e844f677fa6>ZUVFPK+TimesNewRomanPSMT AddT42Char 
ZUVFPK+TimesNewRomanPSMT /CharStrings get begin
/three 22 def
end
ZUVFPK+TimesNewRomanPSMT /Encoding get
dup 51 /three put
pop
systemdict /gcheck known {setglobal} if
end
%ADOEndSubsetFont
/ZUVFPK+TimesNewRomanPSMT*1 
[32{/.notdef}rp /tau 11{/.notdef}rp /comma 3{/.notdef}rp /zero /one /two 
/three /four /.notdef /six 19{/.notdef}rp /J 41{/.notdef}rp /t 
139{/.notdef}rp]
ZUVFPK+TimesNewRomanPSMT nf
ZUVFPK+TimesNewRomanPSMT*1 [7.17557 0 0 -7.17557 0 0 ]msf
166.249 75.3435 mo
(,3)
[1.7939 0 ]xsh
ZUVFPK+TimesNewRomanPSMT*1 [7.17557 0 0 -7.17557 0 0 ]msf
217.274 76.0611 mo
(J2)
[2.79245 0 ]xsh
ZUVFPK+TimesNewRomanPSMT*1 [7.17557 0 0 -7.17557 0 0 ]msf
223.654 76.0611 mo
(,4)
[1.7939 0 ]xsh
58.8038 97.2306 mo
58.7942 99.3833 li
58.0766 99.38 li
58.0863 97.2274 li
58.7845 101.536 mo
58.7749 103.689 li
58.0573 103.685 li
58.067 101.533 li
58.7652 105.841 mo
58.7556 107.994 li
58.038 107.991 li
58.0476 105.838 li
58.7459 110.147 mo
58.7363 112.299 li
58.0187 112.296 li
58.0284 110.143 li
58.7266 114.452 mo
58.717 116.604 li
57.9994 116.601 li
58.0091 114.449 li
f
230.336 82.8779 mo
230.336 80.7252 li
231.053 80.7252 li
231.053 82.8779 li
230.336 78.5725 mo
230.336 76.4198 li
231.053 76.4198 li
231.053 78.5725 li
230.336 74.2672 mo
230.336 72.1145 li
231.053 72.1145 li
231.053 74.2672 li
230.336 69.9618 mo
230.336 67.8092 li
231.053 67.8092 li
231.053 69.9618 li
230.336 65.6565 mo
230.336 63.5038 li
231.053 63.5038 li
231.053 65.6565 li
230.336 61.3511 mo
230.336 59.1985 li
231.053 59.1985 li
231.053 61.3511 li
230.336 57.0458 mo
230.336 54.8931 li
231.053 54.8931 li
231.053 57.0458 li
230.336 52.7405 mo
230.336 50.5878 li
231.053 50.5878 li
231.053 52.7405 li
230.336 48.4351 mo
230.336 46.2824 li
231.053 46.2824 li
231.053 48.4351 li
230.336 44.1298 mo
230.336 41.9771 li
231.053 41.9771 li
231.053 44.1298 li
230.336 39.8244 mo
230.336 37.6718 li
231.053 37.6718 li
231.053 39.8244 li
230.336 35.5191 mo
230.336 33.3664 li
231.053 33.3664 li
231.053 35.5191 li
230.336 31.2137 mo
230.336 29.0611 li
231.053 29.0611 li
231.053 31.2137 li
230.336 26.9084 mo
230.336 24.7557 li
231.053 24.7557 li
231.053 26.9084 li
230.336 22.6031 mo
230.336 20.4504 li
231.053 20.4504 li
231.053 22.6031 li
230.336 18.2977 mo
230.336 16.145 li
231.053 16.145 li
231.053 18.2977 li
230.336 13.9924 mo
230.336 11.8397 li
231.053 11.8397 li
231.053 13.9924 li
230.336 9.68703 mo
230.336 7.53436 li
231.053 7.53436 li
231.053 9.68703 li
230.336 5.38169 mo
230.336 3.22901 li
231.053 3.22901 li
231.053 5.38169 li
f
172.931 47 mo
172.931 44.8473 li
173.649 44.8473 li
173.649 47 li
172.931 42.6947 mo
172.931 40.542 li
173.649 40.542 li
173.649 42.6947 li
172.931 38.3893 mo
172.931 36.2366 li
173.649 36.2366 li
173.649 38.3893 li
172.931 34.084 mo
172.931 31.9313 li
173.649 31.9313 li
173.649 34.084 li
172.931 29.7786 mo
172.931 27.626 li
173.649 27.626 li
173.649 29.7786 li
172.931 25.4733 mo
172.931 23.3206 li
173.649 23.3206 li
173.649 25.4733 li
172.931 21.1679 mo
172.931 19.0153 li
173.649 19.0153 li
173.649 21.1679 li
f
58.4809 4.30535 mo
228.815 4.30535 li
228.815 3.58782 li
58.4809 3.58782 li
58.4809 4.30535 li
f
229.891 3.94657 mo
228.456 4.66413 li
228.815 3.94657 li
228.456 3.22901 li
229.891 3.94657 li
cp
f
10 ml
229.891 3.94657 mo
228.456 4.66413 li
228.815 3.94657 li
228.456 3.22901 li
229.891 3.94657 li
cp
@
139.206 -6.45803 mo
151.405 -6.45803 li
151.405 15.7863 li
139.206 15.7863 li
139.206 -6.45803 li
0 0 0 0 cmyk
f
grestore
gsave
139.206 0 mo
151.405 0 li
151.405 10.0458 li
139.206 10.0458 li
139.206 0 li
eclp
140.688 6.72777 mo
140.688 6.82315 140.784 6.87878 140.976 6.89466 cv
141.089 6.96025 li
141.077 7.03769 li
141.039 7.14499 li
140.958 7.16886 li
140.882 7.16886 li
140.84 7.16886 140.769 7.16688 140.669 7.16293 cv
140.568 7.1589 140.434 7.15693 140.267 7.15693 cv
139.97 7.15693 139.779 7.16088 139.696 7.16886 cv
139.646 7.16886 li
139.602 7.10327 li
139.61 6.99597 139.637 6.92643 139.683 6.89466 cv
139.771 6.89466 li
140.064 6.88273 140.277 6.7834 140.411 6.59668 cv
140.437 6.57282 140.815 5.96682 141.548 4.7787 cv
142.28 3.59057 142.653 2.9886 142.665 2.97265 cv
142.816 2.90113 li
142.866 2.90113 li
142.973 2.90113 li
143.01 2.96071 li
143.186 4.886 li
143.303 6.1695 143.366 6.81722 143.375 6.82908 cv
143.395 6.87285 143.532 6.89466 143.783 6.89466 cv
143.887 6.89466 143.94 6.91457 143.94 6.95425 cv
143.921 7.03769 li
143.889 7.14499 li
143.801 7.16886 li
143.714 7.16886 li
143.668 7.16886 143.586 7.16688 143.469 7.16293 cv
143.352 7.1589 143.199 7.15693 143.01 7.15693 cv
142.617 7.15693 142.36 7.16088 142.238 7.16886 cv
142.163 7.16886 li
142.125 7.1152 li
142.138 7.0079 li
142.176 6.91252 li
142.201 6.89466 li
142.326 6.89466 li
142.552 6.88273 142.686 6.84899 142.728 6.79336 cv
142.653 5.89926 li
141.159 5.89926 li
140.945 6.24497 li
140.773 6.51916 140.688 6.68012 140.688 6.72777 cv
142.621 5.61914 mo
142.621 5.57544 142.596 5.26545 142.546 4.68932 cv
142.496 4.11312 142.466 3.82304 142.458 3.81909 cv
142.288 4.07535 li
142.222 4.18266 142.09 4.39522 141.893 4.71311 cv
141.328 5.61914 li
141.975 5.62507 li
142.406 5.62507 142.621 5.62309 142.621 5.61914 cv
false sop
1 /0 /CSD get_res sepcs
1 sep
f
143.801 7.16886 mo
143.714 7.16886 li
143.667 7.16886 143.586 7.16688 143.469 7.16293 cv
143.352 7.1589 143.199 7.15693 143.01 7.15693 cv
142.617 7.15693 142.36 7.16088 142.238 7.16886 cv
142.163 7.16886 li
142.125 7.1152 li
142.163 7.16886 li
142.238 7.16886 li
142.36 7.16088 142.617 7.15693 143.01 7.15693 cv
143.199 7.15693 143.352 7.1589 143.469 7.16293 cv
143.586 7.16688 143.667 7.16886 143.714 7.16886 cv
143.801 7.16886 li
143.889 7.14499 li
143.921 7.03769 li
143.94 6.95425 li
143.94 6.95425 li
143.921 7.03769 li
143.889 7.14499 li
143.801 7.16886 li
140.958 7.16886 mo
140.882 7.16886 li
140.84 7.16886 140.769 7.16688 140.669 7.16293 cv
140.568 7.1589 140.434 7.15693 140.267 7.15693 cv
140.267 7.15693 li
140.267 7.15693 li
140.267 7.15693 li
140.434 7.15693 140.568 7.1589 140.669 7.16293 cv
140.769 7.16688 140.84 7.16886 140.882 7.16886 cv
140.958 7.16886 li
140.958 7.16886 mo
140.958 7.16886 li
141.039 7.14499 li
140.958 7.16886 li
139.696 7.16886 mo
139.646 7.16886 li
139.602 7.10327 li
139.602 7.10327 li
139.646 7.16886 li
139.696 7.16886 li
139.696 7.16886 li
139.696 7.16886 li
139.696 7.16886 li
139.602 7.10327 mo
139.61 6.99597 139.637 6.92643 139.683 6.89466 cv
139.683 6.89466 li
139.683 6.89466 li
139.683 6.89466 li
139.637 6.92643 139.61 6.99597 139.602 7.10327 cv
139.602 7.10327 li
142.357 6.89284 mo
142.564 6.87952 142.688 6.84638 142.728 6.79336 cv
142.728 6.79336 li
142.728 6.79336 li
142.688 6.84638 142.564 6.87952 142.357 6.89284 cv
142.357 6.89284 li
139.871 6.88687 mo
140.113 6.85825 140.293 6.76152 140.411 6.59668 cv
140.436 6.57366 140.789 6.00871 141.472 4.90185 cv
141.472 4.90185 li
140.789 6.00871 140.436 6.57366 140.411 6.59668 cv
140.293 6.76152 140.113 6.85825 139.871 6.88687 cv
139.871 6.88687 li
142.728 6.79336 mo
142.653 5.89926 li
141.159 5.89926 li
142.653 5.89926 li
142.728 6.79336 li
142.728 6.79336 li
142.728 6.79336 li
141.975 5.62507 mo
142.406 5.62507 142.621 5.62309 142.621 5.61914 cv
142.621 5.61914 li
142.621 5.62309 142.406 5.62507 141.975 5.62507 cv
141.975 5.62507 li
142.621 5.61914 mo
142.621 5.61914 li
142.621 5.61914 li
142.621 5.61914 li
142.621 5.61914 mo
142.621 5.57544 142.596 5.26545 142.546 4.68932 cv
142.496 4.11312 142.466 3.82304 142.458 3.81909 cv
142.288 4.07535 li
142.288 4.07535 li
142.288 4.07535 li
142.288 4.07535 li
142.458 3.81909 li
142.466 3.82304 142.496 4.11312 142.546 4.68932 cv
142.596 5.26545 142.621 5.57544 142.621 5.61914 cv
142.621 5.61914 li
142.621 5.61914 mo
142.621 5.61914 li
142.621 5.61914 li
142.621 5.61914 li
141.548 4.7787 mo
142.26 3.62306 142.632 3.02196 142.663 2.97527 cv
142.663 2.97527 li
142.632 3.02196 142.26 3.62306 141.548 4.7787 cv
141.548 4.7787 li
141.893 4.71311 mo
141.893 4.71311 li
141.898 4.70566 141.902 4.69827 141.907 4.69093 cv
141.907 4.69093 li
141.902 4.69827 141.898 4.70566 141.893 4.71311 cv
141.893 4.71311 li
0 0 0 .00784314 cmyk
f
139.696 7.16886 mo
139.779 7.16088 139.97 7.15693 140.267 7.15693 cv
140.267 7.15693 li
139.97 7.15693 139.779 7.16088 139.696 7.16886 cv
139.696 7.16886 li
141.039 7.14499 mo
141.077 7.03769 li
141.089 6.96025 li
141.077 7.03769 li
141.039 7.14499 li
142.125 7.1152 mo
142.125 7.1152 li
142.138 7.0079 li
142.176 6.91252 li
142.201 6.89466 li
142.326 6.89466 li
142.337 6.8941 142.347 6.8935 142.357 6.89284 cv
142.357 6.89284 li
142.347 6.8935 142.337 6.8941 142.326 6.89466 cv
142.201 6.89466 li
142.176 6.91252 li
142.138 7.0079 li
142.125 7.1152 li
139.602 7.10327 mo
139.602 7.10327 li
139.602 7.10327 li
139.602 7.10327 li
139.602 7.10327 li
141.089 6.96025 mo
140.976 6.89466 li
140.784 6.87878 140.688 6.82315 140.688 6.72777 cv
140.688 6.72777 li
140.688 6.72777 li
140.688 6.72777 li
140.688 6.72777 li
140.688 6.72777 li
140.688 6.72777 li
140.688 6.72777 li
140.688 6.82315 140.784 6.87878 140.976 6.89466 cv
141.089 6.96025 li
143.94 6.95425 mo
143.94 6.91457 143.887 6.89466 143.783 6.89466 cv
143.532 6.89466 143.395 6.87285 143.375 6.82908 cv
143.366 6.81722 143.303 6.1695 143.186 4.886 cv
143.01 2.96071 li
142.973 2.90113 li
142.866 2.90113 li
142.816 2.90113 li
142.665 2.97265 li
142.665 2.97308 142.664 2.97396 142.663 2.97527 cv
142.663 2.97527 li
142.664 2.97396 142.665 2.97308 142.665 2.97265 cv
142.816 2.90113 li
142.866 2.90113 li
142.973 2.90113 li
143.01 2.96071 li
143.186 4.886 li
143.303 6.1695 143.366 6.81722 143.375 6.82908 cv
143.395 6.87285 143.532 6.89466 143.783 6.89466 cv
143.887 6.89466 143.94 6.91457 143.94 6.95425 cv
143.94 6.95425 li
139.771 6.89466 mo
139.683 6.89466 li
139.683 6.89466 li
139.771 6.89466 li
139.805 6.89326 139.839 6.89067 139.871 6.88687 cv
139.871 6.88687 li
139.839 6.89067 139.805 6.89326 139.771 6.89466 cv
142.728 6.79336 mo
142.728 6.79336 li
142.728 6.79336 li
142.728 6.79336 mo
142.728 6.79336 li
142.728 6.79336 li
140.688 6.72777 mo
140.688 6.68012 140.773 6.51916 140.945 6.24497 cv
140.945 6.24497 li
140.773 6.51916 140.688 6.68012 140.688 6.72777 cv
140.688 6.72777 li
140.945 6.24497 mo
141.158 5.89926 li
141.159 5.89926 li
141.158 5.89926 li
140.945 6.24497 li
141.975 5.62507 mo
141.328 5.61914 li
141.975 5.62507 li
141.975 5.62507 li
141.975 5.62507 li
141.975 5.62507 li
141.328 5.61914 mo
141.328 5.61914 li
141.893 4.71311 li
141.328 5.61914 li
141.472 4.90185 mo
141.472 4.90185 li
141.497 4.86152 141.522 4.82047 141.548 4.7787 cv
141.548 4.7787 li
141.548 4.7787 li
141.548 4.7787 li
141.522 4.82047 141.497 4.86152 141.472 4.90185 cv
141.907 4.69093 mo
142.096 4.38531 142.223 4.18014 142.288 4.07535 cv
142.288 4.07535 li
142.223 4.18014 142.096 4.38531 141.907 4.69093 cv
141.907 4.69093 li
/1 
<<
/Name (Black)
/CSA /0 get_csa_by_name
/MappedCSA /0 /CSA get_res
/TintMethod /Subtractive
/TintProc null
/NComponents 4 
/Components [ 0 0 0 1 ] 
>>
/CSD add_res
1 /1 /CSD get_res sepcs
1 sep
f
146.896 3.44352 mo
146.896 3.39587 146.702 3.37201 146.313 3.37201 cv
146.156 3.37201 li
146.118 3.32435 li
146.13 3.21112 li
146.193 3.09781 li
146.3 3.09781 li
146.472 3.10579 146.777 3.10974 147.217 3.10974 cv
147.397 3.10974 147.543 3.10974 147.656 3.10974 cv
147.769 3.10974 147.846 3.10777 147.888 3.10381 cv
147.976 3.10381 li
148.064 3.1634 li
148.045 3.24684 li
148.001 3.35414 li
147.882 3.37201 li
147.664 3.37201 147.541 3.39982 147.512 3.45545 cv
147.495 3.50713 147.365 3.99791 147.122 4.92772 cv
146.859 5.91317 146.725 6.4079 146.721 6.41186 cv
146.629 6.66219 146.449 6.87285 146.181 7.04369 cv
145.913 7.21453 145.624 7.29995 145.314 7.29995 cv
145.072 7.29995 144.867 7.24037 144.699 7.1212 cv
144.532 7.00197 144.448 6.84299 144.448 6.64433 cv
144.448 6.47744 144.496 6.3503 144.592 6.26283 cv
144.689 6.17543 144.798 6.13173 144.919 6.13173 cv
145.107 6.13173 145.212 6.21913 145.233 6.394 cv
145.233 6.52114 145.195 6.62047 145.12 6.69198 cv
145.044 6.76357 144.959 6.81122 144.862 6.83508 cv
144.812 6.85294 li
144.856 6.90659 li
144.965 7.02181 145.122 7.07941 145.327 7.07941 cv
145.486 7.07941 145.641 7.01588 145.791 6.88873 cv
145.942 6.76152 146.053 6.59668 146.124 6.394 cv
146.141 6.34627 146.273 5.84963 146.52 4.90386 cv
146.767 3.95816 146.892 3.47133 146.896 3.44352 cv
1 /0 /CSD get_res sepcs
1 sep
f
145.314 7.29995 mo
145.072 7.29995 144.867 7.24037 144.699 7.1212 cv
144.532 7.00197 144.448 6.84299 144.448 6.64433 cv
144.448 6.64433 li
144.448 6.84299 144.532 7.00197 144.699 7.1212 cv
144.867 7.24037 145.072 7.29995 145.314 7.29995 cv
145.317 7.29995 145.319 7.29995 145.322 7.29994 cv
145.322 7.29994 li
145.319 7.29995 145.317 7.29995 145.314 7.29995 cv
145.327 7.07941 mo
145.481 7.07941 145.631 7.01978 145.777 6.90047 cv
145.777 6.90047 li
145.631 7.01978 145.481 7.07941 145.327 7.07941 cv
145.327 7.07941 li
146.181 7.04369 mo
146.181 7.04369 li
146.181 7.04369 li
146.227 7.01433 146.27 6.98379 146.311 6.95207 cv
146.311 6.95207 li
146.27 6.98379 146.227 7.01433 146.181 7.04369 cv
146.181 7.04369 li
145.791 6.88873 mo
145.94 6.76351 146.05 6.60182 146.121 6.40347 cv
146.121 6.40347 li
146.05 6.60182 145.94 6.76351 145.791 6.88873 cv
145.791 6.88873 li
144.812 6.85294 mo
144.812 6.85294 li
144.862 6.83508 li
144.959 6.81122 145.044 6.76357 145.12 6.69198 cv
145.195 6.62047 145.233 6.52114 145.233 6.394 cv
145.233 6.394 li
145.233 6.52114 145.195 6.62047 145.12 6.69198 cv
145.044 6.76357 144.959 6.81122 144.862 6.83508 cv
144.812 6.85294 li
144.624 6.23572 mo
144.713 6.1664 144.811 6.13173 144.919 6.13173 cv
144.919 6.13173 li
144.919 6.13173 li
144.919 6.13173 li
144.811 6.13173 144.713 6.1664 144.624 6.23572 cv
144.624 6.23572 li
147.08 5.085 mo
147.08 5.085 li
147.094 5.03404 147.108 4.98162 147.122 4.92772 cv
147.365 3.99791 147.495 3.50713 147.512 3.45545 cv
147.541 3.39982 147.664 3.37201 147.882 3.37201 cv
148.001 3.35414 li
148.045 3.24684 li
148.064 3.1634 li
148.045 3.24684 li
148.001 3.35414 li
147.882 3.37201 li
147.664 3.37201 147.541 3.39982 147.512 3.45545 cv
147.495 3.50713 147.365 3.99791 147.122 4.92772 cv
147.108 4.98162 147.094 5.03404 147.08 5.085 cv
146.52 4.90386 mo
146.767 3.95816 146.892 3.47133 146.896 3.44352 cv
146.896 3.44352 li
146.892 3.47133 146.767 3.95816 146.52 4.90386 cv
146.52 4.90386 li
146.896 3.44352 mo
146.896 3.44352 li
146.896 3.44352 li
146.896 3.44352 li
146.896 3.44352 mo
146.896 3.39587 146.702 3.37201 146.313 3.37201 cv
146.156 3.37201 li
146.118 3.32435 li
146.156 3.37201 li
146.313 3.37201 li
146.702 3.37201 146.896 3.39587 146.896 3.44352 cv
146.896 3.44352 li
146.118 3.32435 mo
146.118 3.32435 li
146.13 3.21112 li
146.118 3.32435 li
146.13 3.21112 mo
146.193 3.09781 li
146.193 3.09781 li
146.193 3.09781 li
146.13 3.21112 li
147.656 3.10974 mo
147.656 3.10974 li
147.75 3.10974 147.819 3.10839 147.864 3.10568 cv
147.864 3.10568 li
147.819 3.10839 147.75 3.10974 147.656 3.10974 cv
0 0 0 .00784314 cmyk
f
145.322 7.29994 mo
145.629 7.29861 145.915 7.2132 146.181 7.04369 cv
146.181 7.04369 li
145.915 7.2132 145.629 7.29861 145.322 7.29994 cv
145.322 7.29994 li
145.327 7.07941 mo
145.122 7.07941 144.965 7.02181 144.856 6.90659 cv
144.812 6.85294 li
144.856 6.90659 li
144.965 7.02181 145.122 7.07941 145.327 7.07941 cv
145.327 7.07941 li
145.327 7.07941 li
145.327 7.07941 li
146.311 6.95207 mo
146.508 6.79926 146.644 6.61916 146.721 6.41186 cv
146.725 6.40812 146.844 5.96581 147.08 5.085 cv
147.08 5.085 li
146.844 5.96581 146.725 6.40812 146.721 6.41186 cv
146.644 6.61916 146.508 6.79926 146.311 6.95207 cv
146.311 6.95207 li
145.777 6.90047 mo
145.777 6.90047 li
145.782 6.89662 145.787 6.89271 145.791 6.88873 cv
145.791 6.88873 li
145.791 6.88873 li
145.791 6.88873 li
145.787 6.89271 145.782 6.89662 145.777 6.90047 cv
144.812 6.85294 mo
144.812 6.85294 li
144.448 6.64433 mo
144.448 6.64433 li
144.448 6.47744 144.496 6.3503 144.592 6.26283 cv
144.603 6.25327 144.614 6.24423 144.624 6.23572 cv
144.624 6.23572 li
144.614 6.24423 144.603 6.25327 144.592 6.26283 cv
144.496 6.3503 144.448 6.47744 144.448 6.64433 cv
146.121 6.40347 mo
146.121 6.40347 li
146.122 6.40032 146.123 6.39716 146.124 6.394 cv
146.141 6.34627 146.273 5.84963 146.52 4.90386 cv
146.52 4.90386 li
146.52 4.90386 li
146.52 4.90386 li
146.273 5.84963 146.141 6.34627 146.124 6.394 cv
146.123 6.39716 146.122 6.40032 146.121 6.40347 cv
145.233 6.394 mo
145.212 6.21914 145.107 6.13174 144.919 6.13173 cv
144.919 6.13173 li
145.107 6.13174 145.212 6.21914 145.233 6.394 cv
145.233 6.394 li
146.13 3.21112 mo
146.13 3.21112 li
148.064 3.1634 mo
147.976 3.10381 li
147.888 3.10381 li
147.881 3.10449 147.873 3.10511 147.864 3.10568 cv
147.864 3.10568 li
147.873 3.10511 147.881 3.10449 147.888 3.10381 cv
147.976 3.10381 li
148.064 3.1634 li
147.656 3.10974 mo
147.543 3.10974 147.397 3.10974 147.217 3.10974 cv
146.777 3.10974 146.472 3.10579 146.3 3.09781 cv
146.193 3.09781 li
146.3 3.09781 li
146.472 3.10579 146.777 3.10974 147.217 3.10974 cv
147.397 3.10974 147.543 3.10974 147.656 3.10974 cv
147.656 3.10974 li
147.656 3.10974 li
147.656 3.10974 li
1 /1 /CSD get_res sepcs
1 sep
f
148.859 5.62832 mo
148.781 5.65698 li
148.725 5.67604 148.644 5.69517 148.54 5.71423 cv
148.435 5.73336 148.318 5.74671 148.19 5.75433 cv
148.075 5.75433 li
148.075 5.49087 li
148.19 5.49087 li
148.379 5.48324 148.554 5.45458 148.715 5.40495 cv
148.876 5.35525 148.988 5.30943 149.053 5.26743 cv
149.221 5.14142 li
149.294 5.12426 li
149.396 5.15864 li
149.396 6.87129 li
149.402 8.58974 li
149.475 8.64127 li
149.62 8.66414 li
149.696 8.67184 149.821 8.67565 149.994 8.67565 cv
150.15 8.67565 li
150.15 8.93911 li
150.084 8.93911 li
150 8.92768 149.68 8.92196 149.125 8.92196 cv
148.578 8.92196 148.262 8.92768 148.178 8.93911 cv
148.105 8.93911 li
148.105 8.67565 li
148.262 8.67565 li
148.491 8.67565 li
148.642 8.66993 li
148.739 8.65271 li
148.787 8.64127 li
148.823 8.61261 li
148.859 8.58974 li
148.859 5.62832 li
1 /0 /CSD get_res sepcs
1 sep
f
150.15 8.93911 mo
150.084 8.93911 li
150 8.92768 149.68 8.92196 149.125 8.92196 cv
149.125 8.92196 li
149.125 8.92196 li
149.125 8.92196 li
149.68 8.92196 150 8.92768 150.084 8.93911 cv
150.15 8.93911 li
150.15 8.67565 li
150.15 8.93911 li
148.178 8.93911 mo
148.105 8.93911 li
148.178 8.93911 li
148.178 8.93911 li
148.178 8.93911 li
149.396 6.87129 mo
149.396 6.87129 li
149.396 5.15864 li
149.396 6.87129 li
148.19 5.75433 mo
148.075 5.75433 li
148.19 5.75433 li
148.19 5.75433 li
148.075 5.75433 mo
148.075 5.75433 li
148.075 5.49087 li
148.075 5.49087 li
148.075 5.49087 li
148.075 5.75433 li
148.54 5.71423 mo
148.54 5.71423 li
148.54 5.71423 li
148.644 5.69517 148.725 5.67604 148.781 5.65698 cv
148.859 5.62832 li
148.781 5.65698 li
148.725 5.67604 148.644 5.69517 148.54 5.71423 cv
148.54 5.71423 li
148.19 5.49087 mo
148.19 5.49087 li
148.373 5.48348 148.543 5.45635 148.7 5.40954 cv
148.7 5.40954 li
148.543 5.45635 148.373 5.48348 148.19 5.49087 cv
149.053 5.26743 mo
149.221 5.14142 li
149.294 5.12426 li
149.221 5.14142 li
149.053 5.26743 li
0 0 0 .00392157 cmyk
f
148.178 8.93911 mo
148.178 8.93911 li
148.262 8.92768 148.578 8.92196 149.125 8.92196 cv
149.125 8.92196 li
148.578 8.92196 148.262 8.92768 148.178 8.93911 cv
148.105 8.93911 mo
148.105 8.93911 li
148.105 8.67565 li
148.262 8.67565 li
148.491 8.67565 li
148.642 8.66993 li
148.739 8.65271 li
148.787 8.64127 li
148.823 8.61261 li
148.859 8.58974 li
148.859 5.62832 li
148.859 8.58974 li
148.823 8.61261 li
148.787 8.64127 li
148.739 8.65271 li
148.642 8.66993 li
148.491 8.67565 li
148.262 8.67565 li
148.105 8.67565 li
148.105 8.93911 li
150.15 8.67565 mo
149.994 8.67565 li
149.821 8.67565 149.696 8.67184 149.62 8.66414 cv
149.475 8.64127 li
149.402 8.58974 li
149.396 6.87129 li
149.402 8.58974 li
149.475 8.64127 li
149.62 8.66414 li
149.696 8.67184 149.821 8.67565 149.994 8.67565 cv
150.15 8.67565 li
149.396 6.87129 mo
149.396 6.87129 li
148.19 5.75433 mo
148.19 5.75433 li
148.318 5.74671 148.435 5.73336 148.54 5.71423 cv
148.54 5.71423 li
148.435 5.73336 148.318 5.74671 148.19 5.75433 cv
148.859 5.62832 mo
148.859 5.62832 li
148.19 5.49087 mo
148.075 5.49087 li
148.19 5.49087 li
148.19 5.49087 li
148.19 5.49087 li
148.7 5.40954 mo
148.7 5.40954 li
148.705 5.40803 148.71 5.4065 148.715 5.40495 cv
148.876 5.35525 148.988 5.30943 149.053 5.26743 cv
149.053 5.26743 li
148.988 5.30943 148.876 5.35525 148.715 5.40495 cv
148.71 5.4065 148.705 5.40803 148.7 5.40954 cv
149.396 5.15864 mo
149.294 5.12426 li
149.396 5.15864 li
1 /1 /CSD get_res sepcs
1 sep
f
139.2 .338154 mo
139.2 .260639 li
139.288 .141474 li
142.935 .141474 li
143.029 .260639 li
142.935 .379876 li
139.288 .379876 li
139.2 .260639 li
139.2 .338154 li
1 /0 /CSD get_res sepcs
1 sep
f
142.19 .379876 mo
139.288 .379876 li
139.206 .269163 li
139.288 .379876 li
142.19 .379876 li
139.206 .252121 mo
139.206 .252121 li
139.288 .141474 li
139.288 .141474 li
139.288 .141474 li
139.206 .252121 li
0 0 0 .00784314 cmyk
f
142.935 .141474 mo
142.935 .141474 li
139.288 .141474 li
142.935 .141474 li
1 /1 /CSD get_res sepcs
1 sep
f
142.09 .338154 mo
142.09 .260639 li
142.19 .141474 li
146.31 .141474 li
146.416 .260639 li
146.31 .379876 li
142.19 .379876 li
142.09 .260639 li
142.09 .338154 li
1 /0 /CSD get_res sepcs
1 sep
f
145.559 .379876 mo
142.19 .379876 li
145.559 .379876 li
0 0 0 .00784314 cmyk
f
142.19 .379876 mo
142.19 .379876 li
142.09 .260639 li
142.19 .379876 li
1 /1 /CSD get_res sepcs
1 sep
f
142.19 .379876 mo
142.19 .379876 li
0 0 0 .0156863 cmyk
f
142.09 .338154 mo
142.09 .260639 li
142.09 .338154 li
142.09 .260639 li
142.09 .338154 li
1 /1 /CSD get_res sepcs
1 sep
f
142.09 .260639 mo
142.09 .260639 li
142.19 .141474 li
146.31 .141474 li
142.19 .141474 li
142.09 .260639 li
f
145.471 .338154 mo
145.471 .260639 li
145.559 .141474 li
150.362 .141474 li
149.876 -.204233 149.577 -.647363 149.464 -1.18777 cv
149.464 -1.20563 li
149.458 -1.22349 li
149.564 -1.29501 li
149.583 -1.29501 li
149.659 -1.28908 li
149.696 -1.26522 li
149.715 -1.21156 li
149.734 -1.11619 li
149.784 -.967232 li
149.876 -.700945 150.029 -.462543 150.242 -.251956 cv
150.456 -.0413691 150.705 .107659 150.99 .195056 cv
151.046 .260639 li
151.015 .314292 li
150.864 .373875 li
150.625 .487181 li
150.454 .590463 150.305 .709699 150.18 .844749 cv
150.054 .979869 149.96 1.11301 149.897 1.24411 cv
149.834 1.37528 149.791 1.4746 149.765 1.54216 cv
149.715 1.72691 li
149.684 1.79843 li
149.583 1.81636 li
149.458 1.75077 li
149.489 1.60175 li
149.623 1.10108 149.914 .693744 150.362 .379876 cv
145.559 .379876 li
145.471 .260639 li
145.471 .338154 li
1 /0 /CSD get_res sepcs
1 sep
f
149.583 1.81636 mo
149.458 1.75077 li
149.583 1.81636 li
149.684 1.79843 li
149.583 1.81636 li
149.492 1.59003 mo
149.628 1.09472 149.917 .691292 150.362 .379876 cv
150.362 .379876 li
150.362 .379876 li
149.917 .691292 149.628 1.09472 149.492 1.59003 cv
149.492 1.59003 li
149.765 1.54216 mo
149.765 1.54216 li
149.791 1.4746 149.834 1.37528 149.897 1.24411 cv
149.897 1.24411 li
149.897 1.24411 li
149.897 1.24411 li
149.834 1.37528 149.791 1.4746 149.765 1.54216 cv
149.765 1.54216 li
150.609 .49691 mo
150.609 .49691 li
150.615 .493652 150.62 .490409 150.625 .487181 cv
150.864 .373875 li
151.015 .314292 li
151.046 .260639 li
151.015 .314292 li
150.864 .373875 li
150.625 .487181 li
150.62 .490409 150.615 .493652 150.609 .49691 cv
150.362 .379876 mo
145.559 .379876 li
150.362 .379876 li
150.362 .379876 li
150.362 .379876 li
0 0 0 .00784314 cmyk
f
145.559 .379876 mo
145.559 .379876 li
145.471 .260639 li
145.559 .379876 li
1 /1 /CSD get_res sepcs
1 sep
f
145.559 .379876 mo
145.559 .379876 li
0 0 0 .0156863 cmyk
f
145.471 .338154 mo
145.471 .260639 li
145.471 .338154 li
145.471 .260639 li
145.471 .338154 li
1 /1 /CSD get_res sepcs
1 sep
f
150.362 .141474 mo
150.362 .141474 li
150.298 .0960027 150.237 .0488417 150.18 0 cv
150.18 0 li
150.237 .0488417 150.298 .0960027 150.362 .141474 cv
0 0 0 .00784314 cmyk
f
149.684 1.79843 mo
149.715 1.72691 li
149.765 1.54216 li
149.715 1.72691 li
149.684 1.79843 li
149.458 1.75077 mo
149.458 1.75077 li
149.489 1.60175 li
149.49 1.59784 149.491 1.59393 149.492 1.59003 cv
149.492 1.59003 li
149.491 1.59393 149.49 1.59784 149.489 1.60175 cv
149.458 1.75077 li
149.897 1.24411 mo
149.96 1.11301 150.054 .979869 150.18 .844749 cv
150.18 .844749 li
150.054 .979869 149.96 1.11301 149.897 1.24411 cv
149.897 1.24411 li
150.18 .844749 mo
150.301 .713919 150.445 .59793 150.609 .49691 cv
150.609 .49691 li
150.445 .59793 150.301 .713919 150.18 .844749 cv
150.18 .844749 li
151.046 .260639 mo
150.99 .195056 li
150.836 .147943 150.693 .0829196 150.56 0 cv
150.56 0 li
150.693 .0829196 150.836 .147943 150.99 .195056 cv
151.046 .260639 li
145.471 .260639 mo
145.471 .260639 li
145.559 .141474 li
150.362 .141474 li
150.362 .141474 li
145.559 .141474 li
145.471 .260639 li
150.362 .141474 mo
150.362 .141474 li
150.362 .141474 li
150.362 .141474 li
1 /1 /CSD get_res sepcs
1 sep
f
grestore
.717557 lw
0 lc
0 lj
10 ml
[] 0 dsh
true sadj
144.466 47 mo
144.466 20.7159 li
false sop
1 /0 /CSD get_res sepcs
1 sep
@
144.466 19.1014 mo
145.542 21.254 li
144.466 20.7159 li
143.389 21.254 li
144.466 19.1014 li
cp
f
144.466 19.1014 mo
145.542 21.254 li
144.466 20.7159 li
143.389 21.254 li
144.466 19.1014 li
cp
@
29.6566 82.8778 mo
29.6566 56.5937 li
@
29.6566 54.9792 mo
30.733 57.1319 li
29.6566 56.5937 li
28.5803 57.1319 li
29.6566 54.9792 li
cp
f
29.6566 54.9792 mo
30.733 57.1319 li
29.6566 56.5937 li
28.5803 57.1319 li
29.6566 54.9792 li
cp
@
87.0612 82.8778 mo
87.0612 56.5937 li
@
87.0612 54.9792 mo
88.1375 57.1319 li
87.0612 56.5937 li
85.9849 57.1319 li
87.0612 54.9792 li
cp
f
87.0612 54.9792 mo
88.1375 57.1319 li
87.0612 56.5937 li
85.9849 57.1319 li
87.0612 54.9792 li
cp
@
144.466 82.8778 mo
144.466 56.5937 li
@
144.466 54.9792 mo
145.542 57.1319 li
144.466 56.5937 li
143.389 57.1319 li
144.466 54.9792 li
cp
f
144.466 54.9792 mo
145.542 57.1319 li
144.466 56.5937 li
143.389 57.1319 li
144.466 54.9792 li
cp
@
201.935 82.8778 mo
201.935 56.5937 li
@
201.935 54.9792 mo
203.011 57.1319 li
201.935 56.5937 li
200.859 57.1319 li
201.935 54.9792 li
cp
f
201.935 54.9792 mo
203.011 57.1319 li
201.935 56.5937 li
200.859 57.1319 li
201.935 54.9792 li
cp
@
173.29 18.6565 mo
228.815 18.6565 li
228.815 17.9389 li
173.29 17.9389 li
173.29 18.6565 li
f
229.891 18.2977 mo
228.456 19.0153 li
228.815 18.2977 li
228.456 17.5802 li
229.891 18.2977 li
cp
f
229.891 18.2977 mo
228.456 19.0153 li
228.815 18.2977 li
228.456 17.5801 li
229.891 18.2977 li
cp
@
199.481 7.89317 mo
205.939 7.89317 li
205.939 30.1374 li
199.481 30.1374 li
199.481 7.89317 li
0 0 0 0 cmyk
f
gsave
199.481 11.4809 mo
205.939 11.4809 li
205.939 24.397 li
199.481 24.397 li
199.481 11.4809 li
eclp
202.053 17.7947 mo
202.053 17.747 201.885 17.7232 201.549 17.7232 cv
201.414 17.7232 li
201.382 17.6755 li
201.392 17.5622 li
201.447 17.449 li
201.539 17.449 li
201.687 17.4569 201.95 17.4609 202.329 17.4609 cv
202.484 17.4609 202.611 17.4609 202.708 17.4609 cv
202.806 17.4609 202.873 17.459 202.909 17.4549 cv
202.984 17.4549 li
203.06 17.5146 li
203.044 17.598 li
203.006 17.7053 li
202.903 17.7232 li
202.715 17.7232 202.609 17.751 202.584 17.8066 cv
202.569 17.8583 202.457 18.349 202.248 19.2788 cv
202.021 20.2643 201.905 20.759 201.901 20.7629 cv
201.822 21.0132 201.667 21.2239 201.436 21.3947 cv
201.205 21.5656 200.956 21.651 200.688 21.651 cv
200.479 21.651 200.302 21.5914 200.158 21.4723 cv
200.013 21.353 199.941 21.194 199.941 20.9954 cv
199.941 20.8285 199.983 20.7014 200.066 20.614 cv
200.149 20.5265 200.243 20.4828 200.347 20.4828 cv
200.51 20.4828 200.6 20.5703 200.618 20.7451 cv
200.618 20.8722 200.586 20.9715 200.521 21.0431 cv
200.299 21.1861 li
200.255 21.204 li
200.293 21.2576 li
200.387 21.3729 200.522 21.4305 200.699 21.4305 cv
200.836 21.4305 200.97 21.3669 201.1 21.2398 cv
201.23 21.1126 201.326 20.9477 201.387 20.7451 cv
201.401 20.6974 201.515 20.2007 201.728 19.255 cv
201.941 18.3093 202.049 17.8225 202.053 17.7947 cv
1 /0 /CSD get_res sepcs
1 sep
f
200.688 21.651 mo
200.479 21.651 200.302 21.5914 200.158 21.4723 cv
200.013 21.353 199.941 21.194 199.941 20.9954 cv
199.941 20.9954 li
199.941 21.194 200.013 21.353 200.158 21.4723 cv
200.302 21.5914 200.479 21.651 200.688 21.651 cv
200.703 21.651 200.718 21.6508 200.732 21.6502 cv
200.732 21.6502 li
200.718 21.6508 200.703 21.651 200.688 21.651 cv
200.699 21.4305 mo
200.836 21.4305 200.97 21.3669 201.1 21.2398 cv
201.23 21.1126 201.326 20.9477 201.387 20.7451 cv
201.387 20.7451 li
201.326 20.9477 201.23 21.1126 201.1 21.2398 cv
200.97 21.3669 200.836 21.4305 200.699 21.4305 cv
200.699 21.4305 li
201.436 21.3947 mo
201.436 21.3947 li
201.436 21.3947 li
201.667 21.2239 201.822 21.0132 201.901 20.7629 cv
201.901 20.7628 li
201.906 20.7628 202.022 20.2591 202.248 19.2788 cv
202.457 18.349 202.569 17.8583 202.584 17.8066 cv
202.587 17.8001 202.591 17.794 202.596 17.7882 cv
202.596 17.7882 li
202.591 17.794 202.587 17.8001 202.584 17.8066 cv
202.569 17.8583 202.457 18.349 202.248 19.2788 cv
202.022 20.2591 201.906 20.7628 201.901 20.7628 cv
201.901 20.7629 li
201.822 21.0132 201.667 21.2239 201.436 21.3947 cv
201.436 21.3947 li
200.255 21.204 mo
200.255 21.204 li
200.299 21.1861 li
200.521 21.0431 li
200.521 21.0431 li
200.521 21.0431 li
200.521 21.0431 li
200.299 21.1861 li
200.255 21.204 li
199.941 20.9954 mo
199.941 20.9954 li
199.941 20.8311 199.981 20.7053 200.062 20.6181 cv
200.062 20.6181 li
199.981 20.7053 199.941 20.8311 199.941 20.9954 cv
200.618 20.751 mo
200.618 20.751 li
200.618 20.749 200.618 20.747 200.618 20.7451 cv
200.618 20.7451 li
200.618 20.747 200.618 20.749 200.618 20.751 cv
201.387 20.7451 mo
201.401 20.6989 201.508 20.2313 201.708 19.3423 cv
201.708 19.3423 li
201.508 20.2313 201.401 20.6989 201.387 20.7451 cv
201.387 20.7451 li
200.07 20.6099 mo
200.152 20.5251 200.244 20.4828 200.347 20.4828 cv
200.347 20.4828 200.347 20.4828 200.347 20.4828 cv
200.347 20.4828 li
200.347 20.4828 200.347 20.4828 200.347 20.4828 cv
200.244 20.4828 200.152 20.5251 200.07 20.6099 cv
200.07 20.6099 li
201.728 19.255 mo
201.941 18.3093 202.049 17.8225 202.053 17.7947 cv
202.053 17.7947 li
202.049 17.8225 201.941 18.3093 201.728 19.255 cv
201.728 19.255 li
202.053 17.7947 mo
202.053 17.7947 li
202.053 17.7947 li
202.053 17.7947 li
202.053 17.7947 mo
202.053 17.747 201.885 17.7232 201.549 17.7232 cv
201.414 17.7232 li
201.382 17.6755 li
201.414 17.7232 li
201.549 17.7232 li
201.885 17.7232 202.053 17.747 202.053 17.7947 cv
202.053 17.7947 li
203.006 17.7053 mo
203.006 17.7053 li
203.044 17.598 li
203.06 17.5146 li
203.044 17.598 li
203.006 17.7053 li
201.382 17.6755 mo
201.382 17.6755 li
201.392 17.5622 li
201.382 17.6755 li
0 0 0 .00392157 cmyk
f
200.732 21.6502 mo
200.983 21.6414 201.217 21.5562 201.436 21.3947 cv
201.436 21.3947 li
201.217 21.5562 200.983 21.6414 200.732 21.6502 cv
200.732 21.6502 li
200.699 21.4305 mo
200.522 21.4305 200.387 21.3729 200.293 21.2576 cv
200.255 21.204 li
200.293 21.2576 li
200.387 21.3729 200.522 21.4305 200.699 21.4305 cv
200.699 21.4305 li
200.699 21.4305 li
200.699 21.4305 li
200.255 21.204 mo
200.255 21.204 li
200.521 21.0431 mo
200.585 20.9726 200.617 20.8753 200.618 20.751 cv
200.618 20.751 li
200.617 20.8753 200.585 20.9726 200.521 21.0431 cv
200.521 21.0431 li
200.618 20.7451 mo
200.6 20.5703 200.51 20.4828 200.347 20.4828 cv
200.347 20.4828 li
200.51 20.4828 200.6 20.5703 200.618 20.7451 cv
200.618 20.7451 li
200.062 20.6181 mo
200.062 20.6181 li
200.063 20.6167 200.064 20.6153 200.066 20.614 cv
200.067 20.6126 200.068 20.6112 200.07 20.6099 cv
200.07 20.6099 li
200.068 20.6112 200.067 20.6126 200.066 20.614 cv
200.064 20.6153 200.063 20.6167 200.062 20.6181 cv
201.708 19.3423 mo
201.708 19.3423 li
201.715 19.3137 201.721 19.2845 201.728 19.255 cv
201.728 19.255 li
201.728 19.255 li
201.728 19.255 li
201.721 19.2845 201.715 19.3137 201.708 19.3423 cv
202.596 17.7882 mo
202.635 17.7449 202.737 17.7232 202.903 17.7232 cv
203.006 17.7053 li
202.903 17.7232 li
202.737 17.7232 202.635 17.7449 202.596 17.7882 cv
202.596 17.7882 li
201.392 17.5622 mo
201.392 17.5622 li
201.447 17.449 li
201.539 17.449 li
201.687 17.4569 201.95 17.4609 202.329 17.4609 cv
202.484 17.4609 202.611 17.4609 202.708 17.4609 cv
202.806 17.4609 202.873 17.459 202.909 17.4549 cv
202.984 17.4549 li
203.06 17.5146 li
202.984 17.4549 li
202.909 17.4549 li
202.873 17.459 202.806 17.4609 202.708 17.4609 cv
202.611 17.4609 202.484 17.4609 202.329 17.4609 cv
201.95 17.4609 201.687 17.4569 201.539 17.449 cv
201.447 17.449 li
201.392 17.5622 li
1 /1 /CSD get_res sepcs
1 sep
f
203.746 19.9794 mo
203.679 20.008 li
203.63 20.0272 203.561 20.0462 203.47 20.0654 cv
203.38 20.0844 203.28 20.0978 203.169 20.1055 cv
203.07 20.1055 li
203.07 19.8419 li
203.169 19.8419 li
203.332 19.8343 203.483 19.8056 203.621 19.756 cv
203.76 19.7064 203.857 19.6606 203.913 19.6186 cv
204.059 19.4925 li
204.121 19.4754 li
204.209 19.5097 li
204.209 21.2223 li
204.215 22.9407 li
204.277 22.9923 li
204.402 23.0152 li
204.468 23.0228 204.575 23.0266 204.725 23.0266 cv
204.86 23.0266 li
204.86 23.2901 li
204.803 23.2901 li
204.73 23.2787 204.454 23.2729 203.975 23.2729 cv
203.503 23.2729 203.231 23.2787 203.158 23.2901 cv
203.096 23.2901 li
203.096 23.0266 li
203.231 23.0266 li
203.429 23.0266 li
203.559 23.0209 li
203.642 23.0038 li
203.684 22.9923 li
203.715 22.9637 li
203.746 22.9407 li
203.746 19.9794 li
1 /0 /CSD get_res sepcs
1 sep
f
204.86 23.2901 mo
204.803 23.2901 li
204.73 23.2787 204.454 23.2729 203.975 23.2729 cv
203.503 23.2729 203.231 23.2787 203.158 23.2901 cv
203.096 23.2901 li
203.158 23.2901 li
203.231 23.2787 203.503 23.2729 203.975 23.2729 cv
204.454 23.2729 204.73 23.2787 204.803 23.2901 cv
204.86 23.2901 li
203.096 23.2901 mo
203.096 23.2901 li
203.096 23.0266 li
203.096 23.0266 li
203.096 23.0266 li
203.096 23.2901 li
203.559 23.0209 mo
203.642 23.0038 li
203.684 22.9923 li
203.642 23.0038 li
203.559 23.0209 li
203.684 22.9923 mo
203.715 22.9637 li
203.746 22.9407 li
203.715 22.9637 li
203.684 22.9923 li
203.169 20.1055 mo
203.07 20.1055 li
203.169 20.1055 li
203.169 20.1055 li
203.462 20.0671 mo
203.462 20.0671 li
203.465 20.0665 203.468 20.066 203.47 20.0654 cv
203.47 20.0654 li
203.47 20.0654 li
203.47 20.0654 li
203.468 20.066 203.465 20.0665 203.462 20.0671 cv
203.169 19.8419 mo
203.169 19.8419 li
203.304 19.8356 203.43 19.8149 203.549 19.7797 cv
203.549 19.7797 li
203.43 19.8149 203.304 19.8356 203.169 19.8419 cv
203.621 19.756 mo
203.76 19.7064 203.857 19.6606 203.913 19.6186 cv
204.059 19.4925 li
203.913 19.6186 li
203.857 19.6606 203.76 19.7064 203.621 19.756 cv
203.621 19.756 li
0 0 0 .00392157 cmyk
f
204.86 23.2901 mo
204.86 23.2901 li
204.86 23.0266 li
204.86 23.2901 li
204.86 23.0266 mo
204.725 23.0266 li
204.575 23.0266 204.468 23.0228 204.402 23.0152 cv
204.277 22.9923 li
204.215 22.9407 li
204.209 21.2223 li
204.215 22.9407 li
204.277 22.9923 li
204.402 23.0152 li
204.468 23.0228 204.575 23.0266 204.725 23.0266 cv
204.86 23.0266 li
203.429 23.0266 mo
203.231 23.0266 li
203.096 23.0266 li
203.231 23.0266 li
203.429 23.0266 li
203.559 23.0209 li
203.429 23.0266 li
203.684 22.9923 mo
203.684 22.9923 li
203.746 22.9407 mo
203.746 22.9407 li
203.746 19.9794 li
203.746 22.9407 li
204.209 21.2223 mo
204.209 21.2223 li
204.209 19.5097 li
204.209 21.2223 li
203.169 20.1055 mo
203.169 20.1055 li
203.276 20.098 203.374 20.0852 203.462 20.0671 cv
203.462 20.0671 li
203.374 20.0852 203.276 20.098 203.169 20.1055 cv
203.07 20.1055 mo
203.07 20.1055 li
203.07 19.8419 li
203.169 19.8419 li
203.169 19.8419 li
203.169 19.8419 li
203.07 19.8419 li
203.07 20.1055 li
203.47 20.0654 mo
203.561 20.0462 203.63 20.0272 203.679 20.008 cv
203.746 19.9794 li
203.679 20.008 li
203.63 20.0272 203.561 20.0462 203.47 20.0654 cv
203.47 20.0654 li
203.746 19.9794 mo
203.746 19.9794 li
203.549 19.7797 mo
203.549 19.7797 li
203.573 19.7724 203.598 19.7645 203.621 19.756 cv
203.621 19.756 li
203.621 19.756 li
203.621 19.756 li
203.598 19.7645 203.573 19.7724 203.549 19.7797 cv
204.209 19.5097 mo
204.121 19.4754 li
204.059 19.4925 li
204.121 19.4754 li
204.209 19.5097 li
1 /1 /CSD get_res sepcs
1 sep
f
199.475 14.886 mo
199.475 14.8086 li
199.551 14.6894 li
202.697 14.6894 li
202.779 14.8086 li
202.697 14.9278 li
199.551 14.9278 li
199.475 14.8086 li
199.475 14.886 li
1 /0 /CSD get_res sepcs
1 sep
f
200.9 14.9278 mo
199.551 14.9278 li
199.481 14.8171 li
199.551 14.9278 li
200.9 14.9278 li
0 0 0 .00392157 cmyk
f
199.481 14.8 mo
199.481 14.8 li
199.551 14.6894 li
202.697 14.6894 li
199.551 14.6894 li
199.481 14.8 li
1 /1 /CSD get_res sepcs
1 sep
f
200.824 14.886 mo
200.824 14.8086 li
200.9 14.6894 li
205.042 14.6894 li
204.623 14.3436 204.365 13.9006 204.268 13.3602 cv
204.268 13.3423 li
204.262 13.3245 li
204.354 13.2529 li
204.371 13.2529 li
204.436 13.2589 li
204.468 13.2827 li
204.484 13.3364 li
204.501 13.4318 li
204.544 13.5807 li
204.623 13.8469 204.755 14.0854 204.939 14.296 cv
205.123 14.5066 205.338 14.6556 205.584 14.743 cv
205.632 14.8086 li
205.605 14.8622 li
205.475 14.9218 li
205.27 15.0351 li
205.122 15.1383 204.993 15.2576 204.885 15.3927 cv
204.777 15.5277 204.696 15.6609 204.641 15.7921 cv
204.587 15.9232 204.549 16.0225 204.528 16.09 cv
204.484 16.2748 li
204.457 16.3463 li
204.371 16.3642 li
204.262 16.2987 li
204.289 16.1496 li
204.405 15.649 204.656 15.2417 205.042 14.9278 cv
200.9 14.9278 li
200.824 14.8086 li
200.824 14.886 li
1 /0 /CSD get_res sepcs
1 sep
f
204.371 16.3642 mo
204.262 16.2987 li
204.371 16.3642 li
204.484 16.2748 mo
204.484 16.2748 li
204.528 16.09 li
204.528 16.09 li
204.528 16.09 li
204.528 16.09 li
204.484 16.2748 li
205.042 14.9278 mo
200.9 14.9278 li
205.042 14.9278 li
205.042 14.9278 li
0 0 0 .00392157 cmyk
f
200.9 14.9278 mo
200.9 14.9278 li
200.824 14.8087 li
200.9 14.9278 li
1 /1 /CSD get_res sepcs
1 sep
f
200.9 14.9278 mo
200.9 14.9278 li
0 0 0 .00784314 cmyk
f
200.824 14.886 mo
200.824 14.8086 li
200.9 14.6894 li
200.824 14.8086 li
200.824 14.886 li
200.824 14.8086 li
200.824 14.886 li
1 /1 /CSD get_res sepcs
1 sep
f
205.605 14.8622 mo
205.605 14.8622 li
205.632 14.8086 li
205.605 14.8622 li
0 0 0 .00392157 cmyk
f
200.824 14.8087 mo
200.824 14.8086 li
200.824 14.8087 li
1 /1 /CSD get_res sepcs
1 sep
f
205.042 14.6894 mo
205.042 14.6894 li
204.623 14.3436 204.365 13.9006 204.268 13.3602 cv
204.268 13.3602 li
204.365 13.9006 204.623 14.3436 205.042 14.6894 cv
204.268 13.3423 mo
204.262 13.3245 li
204.268 13.3423 li
0 0 0 .00392157 cmyk
f
204.371 16.3642 mo
204.457 16.3463 li
204.484 16.2748 li
204.457 16.3463 li
204.371 16.3642 li
204.262 16.2987 mo
204.262 16.2987 li
204.289 16.1496 li
204.405 15.649 204.656 15.2417 205.042 14.9278 cv
205.042 14.9278 li
204.656 15.2417 204.405 15.649 204.289 16.1496 cv
204.262 16.2987 li
204.528 16.09 mo
204.549 16.0225 204.587 15.9232 204.641 15.7921 cv
204.696 15.6609 204.777 15.5277 204.885 15.3927 cv
204.993 15.2576 205.122 15.1383 205.27 15.0351 cv
205.475 14.9218 li
205.605 14.8622 li
205.475 14.9218 li
205.27 15.0351 li
205.122 15.1383 204.993 15.2576 204.885 15.3927 cv
204.777 15.5277 204.696 15.6609 204.641 15.7921 cv
204.587 15.9232 204.549 16.0225 204.528 16.09 cv
204.528 16.09 li
205.042 14.9278 mo
205.042 14.9278 li
205.042 14.9278 li
205.042 14.9278 li
200.824 14.8087 mo
200.824 14.8087 li
205.632 14.8086 mo
205.584 14.743 li
205.338 14.6556 205.123 14.5066 204.939 14.296 cv
204.755 14.0854 204.623 13.8469 204.544 13.5807 cv
204.501 13.4318 li
204.484 13.3364 li
204.468 13.2827 li
204.436 13.2589 li
204.371 13.2529 li
204.354 13.2529 li
204.262 13.3245 li
204.354 13.2529 li
204.371 13.2529 li
204.436 13.2589 li
204.468 13.2827 li
204.484 13.3364 li
204.501 13.4318 li
204.544 13.5807 li
204.623 13.8469 204.755 14.0854 204.939 14.296 cv
205.123 14.5066 205.338 14.6556 205.584 14.743 cv
205.632 14.8086 li
205.042 14.6894 mo
200.9 14.6894 li
205.042 14.6894 li
205.042 14.6894 li
205.042 14.6894 mo
205.042 14.6894 li
205.042 14.6894 li
205.042 14.6894 li
204.268 13.3602 mo
204.268 13.3602 li
204.268 13.3423 li
204.268 13.3602 li
204.268 13.3423 mo
204.268 13.3423 li
1 /1 /CSD get_res sepcs
1 sep
f
grestore
gsave
0 0 mo
282 0 li
282 119.832 li
0 119.832 li
0 0 li
eclp
87.1688 47 mo
87.1688 45.5649 li
1 /0 /CSD get_res sepcs
1 sep
@
115.885 47 mo
115.885 45.5649 li
@
115.885 82.8778 mo
115.885 82.8778 115.885 82.6386 115.885 82.1603 cv
115.885 81.4427 li
@
29.7499 47 mo
29.7499 45.5649 li
@
173.29 82.8778 mo
173.29 81.4427 li
@
230.695 82.8778 mo
230.695 81.4427 li
@
201.978 47 mo
201.978 45.5649 li
@
%ADOBeginSubsetFont: FAAAAA+TimesNewRomanPSMT AddGlyphs
ct_T42Dict begin
systemdict /gcheck known {currentglobal ZUVFPK+TimesNewRomanPSMT gcheck setglobal} if
1 3152 26 <0001004cffe403a5054c000b00e0b0852b58b90004ffe0b3131b3e05b8ff
e0402b131b3e19080105032a094200400d600da00dca01c902d801d802e0
0d0b1a00010b01000d400d0302050404b80193401a03021403030204030d
0540473505e2010640473506e201000400b80199b6a00b010b190c05ba02
e8000302e7400c0004100440045004a0040504bc02e6000c011e01010018
2b10f65dede44e10f45d4df4003f3ced2b10ed2b3f3c87052e2b870e7dc4
b106024354584009740574068405840604005d5931300171725d0072012b
2b1bb60a0a00040d0006b8081fb26c000400183f2b3f12392f3031591321
15012301212207060727ce02d7fe3c700195fe8b713054331d054c26fabe
04c51b2e600b>ZUVFPK+TimesNewRomanPSMT AddT42Char 
ZUVFPK+TimesNewRomanPSMT /CharStrings get begin
/seven 26 def
end
ZUVFPK+TimesNewRomanPSMT /Encoding get
dup 55 /seven put
pop
systemdict /gcheck known {setglobal} if
end
%ADOEndSubsetFont
/ZUVFPK+TimesNewRomanPSMT*1 
[32{/.notdef}rp /tau 11{/.notdef}rp /comma 3{/.notdef}rp /zero /one /two 
/three /four /.notdef /six /seven 18{/.notdef}rp /J 41{/.notdef}rp 
/t 139{/.notdef}rp]
ZUVFPK+TimesNewRomanPSMT nf
ZUVFPK+TimesNewRomanPSMT*1 [8.61069 0 0 -8.61069 0 0 ]msf
228.183 93.2824 mo
(7)sh
58.4737 82.8778 mo
58.4737 81.4427 li
@
115.527 82.8779 mo
115.527 80.7252 li
116.244 80.7252 li
116.244 82.8779 li
115.527 78.5725 mo
115.527 76.4198 li
116.244 76.4198 li
116.244 78.5725 li
115.527 74.2672 mo
115.527 72.1145 li
116.244 72.1145 li
116.244 74.2672 li
115.527 69.9618 mo
115.527 67.8092 li
116.244 67.8092 li
116.244 69.9618 li
115.527 65.6565 mo
115.527 63.5038 li
116.244 63.5038 li
116.244 65.6565 li
f
172.903 82.8792 mo
172.895 80.7265 li
173.612 80.7239 li
173.62 82.8765 li
172.887 78.5739 mo
172.879 76.4212 li
173.596 76.4186 li
173.604 78.5712 li
172.871 74.2685 mo
172.863 72.1159 li
173.581 72.1133 li
173.589 74.2659 li
172.855 69.9632 mo
172.847 67.8106 li
173.565 67.8079 li
173.573 69.9606 li
172.839 65.6579 mo
172.832 63.5053 li
173.549 63.5026 li
173.557 65.6553 li
172.824 61.3526 mo
172.824 61.3525 li
173.541 61.3498 li
173.541 61.35 li
f
60.569 116.244 mo
173.29 116.244 li
173.29 115.527 li
60.569 115.527 li
60.569 116.244 li
f
59.4927 115.885 mo
60.9278 115.168 li
60.569 115.885 li
60.9278 116.603 li
59.4927 115.885 li
cp
f
59.4927 115.885 mo
60.9278 115.168 li
60.569 115.885 li
60.9278 116.603 li
59.4927 115.885 li
cp
@
110.504 105.481 mo
122.702 105.481 li
122.702 127.725 li
110.504 127.725 li
110.504 105.481 li
0 0 0 0 cmyk
f
grestore
gsave
110.504 109.069 mo
122.702 109.069 li
122.702 119.832 li
110.504 119.832 li
110.504 109.069 li
eclp
112.051 118.667 mo
112.051 118.762 112.146 118.818 112.336 118.834 cv
112.447 118.899 li
112.435 118.977 li
112.398 119.084 li
112.317 119.108 li
112.243 119.108 li
112.202 119.108 112.132 119.106 112.033 119.102 cv
111.934 119.098 111.802 119.096 111.637 119.096 cv
111.344 119.096 111.156 119.1 111.073 119.108 cv
111.024 119.108 li
110.981 119.042 li
110.989 118.935 111.016 118.866 111.061 118.834 cv
111.148 118.834 li
111.436 118.822 111.647 118.723 111.779 118.536 cv
111.804 118.512 112.177 117.906 112.899 116.718 cv
113.621 115.53 113.988 114.927 114 114.912 cv
114.149 114.84 li
114.198 114.84 li
114.304 114.84 li
114.341 114.9 li
114.514 116.825 li
114.63 118.109 114.692 118.756 114.7 118.768 cv
114.72 118.812 114.854 118.834 115.102 118.834 cv
115.205 118.834 115.257 118.854 115.257 118.893 cv
115.238 118.977 li
115.207 119.084 li
115.121 119.108 li
115.034 119.108 li
114.989 119.108 114.908 119.106 114.793 119.102 cv
114.677 119.098 114.526 119.096 114.341 119.096 cv
113.953 119.096 113.699 119.1 113.58 119.108 cv
113.505 119.108 li
113.468 119.054 li
113.481 118.947 li
113.518 118.852 li
113.543 118.834 li
113.666 118.834 li
113.889 118.822 114.021 118.788 114.062 118.732 cv
113.988 117.838 li
112.515 117.838 li
112.305 118.184 li
112.136 118.458 112.051 118.619 112.051 118.667 cv
113.957 117.558 mo
113.957 117.514 113.932 117.204 113.883 116.628 cv
113.833 116.052 113.805 115.762 113.796 115.758 cv
113.629 116.014 li
113.563 116.122 113.433 116.334 113.239 116.652 cv
112.682 117.558 li
113.32 117.564 li
113.745 117.564 113.957 117.562 113.957 117.558 cv
1 /0 /CSD get_res sepcs
1 sep
f
gsave
115.121 119.108 mo
115.034 119.108 li
115.032 119.108 115.03 119.108 115.029 119.108 cv
115.029 119.108 li
115.03 119.108 115.032 119.108 115.034 119.108 cv
115.121 119.108 li
115.207 119.084 li
115.238 118.977 li
115.257 118.893 li
115.257 118.893 li
115.238 118.977 li
115.207 119.084 li
115.121 119.108 li
113.58 119.108 mo
113.505 119.108 li
113.468 119.054 li
113.505 119.108 li
113.58 119.108 li
113.699 119.1 113.953 119.096 114.341 119.096 cv
114.373 119.096 114.404 119.096 114.433 119.096 cv
114.433 119.096 li
114.404 119.096 114.373 119.096 114.341 119.096 cv
113.953 119.096 113.699 119.1 113.58 119.108 cv
112.317 119.108 mo
112.243 119.108 li
112.243 119.108 li
112.243 119.108 li
112.243 119.108 li
112.317 119.108 li
112.317 119.108 mo
112.317 119.108 li
111.073 119.108 mo
111.024 119.108 li
110.981 119.042 li
110.981 119.042 li
111.024 119.108 li
111.073 119.108 li
111.073 119.108 li
111.073 119.108 li
115.025 119.108 mo
115.021 119.108 115.016 119.108 115.012 119.108 cv
115.012 119.108 li
115.016 119.108 115.021 119.108 115.025 119.108 cv
115.025 119.108 li
111.276 119.099 mo
111.276 119.099 li
111.37 119.097 111.49 119.096 111.637 119.096 cv
111.637 119.096 li
111.49 119.096 111.37 119.097 111.276 119.099 cv
110.981 119.042 mo
110.981 119.042 li
110.987 118.954 111.007 118.891 111.039 118.854 cv
111.039 118.854 li
111.007 118.891 110.987 118.954 110.981 119.042 cv
112.447 118.899 mo
112.447 118.899 li
112.447 118.899 li
112.447 118.899 li
112.447 118.899 mo
112.336 118.834 li
112.447 118.899 li
113.666 118.834 mo
113.884 118.822 114.015 118.79 114.059 118.736 cv
114.059 118.736 li
114.015 118.79 113.884 118.822 113.666 118.834 cv
113.666 118.834 li
111.168 118.833 mo
111.446 118.817 111.65 118.718 111.779 118.536 cv
111.799 118.516 112.054 118.105 112.544 117.302 cv
112.544 117.302 li
112.054 118.105 111.799 118.516 111.779 118.536 cv
111.65 118.718 111.446 118.817 111.168 118.833 cv
111.168 118.833 li
112.318 118.832 mo
112.318 118.832 li
112.14 118.814 112.051 118.759 112.051 118.667 cv
112.051 118.667 li
112.051 118.759 112.14 118.814 112.318 118.832 cv
114.694 118.734 mo
114.694 118.734 li
114.675 118.584 114.615 117.948 114.514 116.825 cv
114.341 114.9 li
114.304 114.84 li
114.341 114.9 li
114.514 116.825 li
114.615 117.948 114.675 118.584 114.694 118.734 cv
114.062 118.732 mo
113.988 117.838 li
112.515 117.838 li
112.305 118.184 li
112.302 118.188 112.3 118.193 112.297 118.197 cv
112.297 118.197 li
112.3 118.193 112.302 118.188 112.305 118.184 cv
112.515 117.838 li
113.988 117.838 li
114.062 118.732 li
114.062 118.732 li
113.957 117.558 mo
113.957 117.514 113.932 117.204 113.883 116.628 cv
113.833 116.052 113.804 115.762 113.796 115.758 cv
113.629 116.014 li
113.563 116.122 113.433 116.334 113.239 116.652 cv
112.682 117.558 li
113.239 116.652 li
113.433 116.334 113.563 116.122 113.629 116.014 cv
113.796 115.758 li
113.804 115.762 113.833 116.052 113.883 116.628 cv
113.932 117.204 113.957 117.514 113.957 117.558 cv
113.957 117.558 li
112.966 116.608 mo
113.644 115.492 113.989 114.927 114 114.912 cv
114 114.912 li
113.989 114.927 113.644 115.492 112.966 116.608 cv
112.966 116.608 li
clp
110.981 114.84 mo
115.257 114.84 li
115.257 119.108 li
110.981 119.108 li
cp
0 0 0 .00784314 cmyk
f
grestore
112.317 119.108 mo
112.398 119.084 li
112.435 118.977 li
112.398 119.084 li
112.317 119.108 li
112.243 119.108 mo
112.243 119.108 li
112.202 119.108 112.132 119.106 112.033 119.102 cv
111.934 119.098 111.802 119.096 111.637 119.096 cv
111.637 119.096 111.637 119.096 111.637 119.096 cv
111.637 119.096 li
111.637 119.096 111.637 119.096 111.637 119.096 cv
111.802 119.096 111.934 119.098 112.033 119.102 cv
112.132 119.106 112.202 119.108 112.243 119.108 cv
111.073 119.108 mo
111.073 119.108 li
111.115 119.104 111.182 119.101 111.276 119.099 cv
111.276 119.099 li
111.182 119.101 111.115 119.104 111.073 119.108 cv
115.029 119.108 mo
115.029 119.108 li
115.027 119.108 115.026 119.108 115.025 119.108 cv
115.025 119.108 li
115.026 119.108 115.027 119.108 115.029 119.108 cv
115.012 119.108 mo
115.012 119.108 li
114.964 119.107 114.891 119.105 114.793 119.102 cv
114.697 119.099 114.577 119.097 114.433 119.096 cv
114.433 119.096 li
114.577 119.097 114.697 119.099 114.793 119.102 cv
114.891 119.105 114.964 119.107 115.012 119.108 cv
113.468 119.054 mo
113.468 119.054 li
113.481 118.947 li
113.518 118.852 li
113.543 118.834 li
113.666 118.834 li
113.666 118.834 li
113.666 118.834 li
113.666 118.834 li
113.543 118.834 li
113.518 118.852 li
113.481 118.947 li
113.468 119.054 li
112.435 118.977 mo
112.447 118.899 li
112.435 118.977 li
115.257 118.893 mo
115.257 118.854 115.205 118.834 115.102 118.834 cv
114.854 118.834 114.72 118.812 114.7 118.768 cv
114.699 118.767 114.697 118.755 114.694 118.734 cv
114.694 118.734 li
114.697 118.755 114.699 118.767 114.7 118.768 cv
114.72 118.812 114.854 118.834 115.102 118.834 cv
115.205 118.834 115.257 118.854 115.257 118.893 cv
115.257 118.893 li
111.039 118.854 mo
111.039 118.854 li
111.046 118.846 111.053 118.839 111.061 118.834 cv
111.148 118.834 li
111.154 118.834 111.161 118.833 111.168 118.833 cv
111.168 118.833 li
111.161 118.833 111.154 118.834 111.148 118.834 cv
111.061 118.834 li
111.053 118.839 111.046 118.846 111.039 118.854 cv
112.336 118.834 mo
112.336 118.834 li
112.33 118.833 112.324 118.833 112.318 118.832 cv
112.318 118.832 li
112.324 118.833 112.33 118.833 112.336 118.834 cv
112.336 118.834 li
114.059 118.736 mo
114.059 118.736 li
114.06 118.735 114.061 118.734 114.062 118.732 cv
114.062 118.732 li
114.061 118.734 114.06 118.735 114.059 118.736 cv
112.051 118.667 mo
112.051 118.667 112.051 118.667 112.051 118.667 cv
112.051 118.667 li
112.051 118.667 li
112.051 118.667 li
112.051 118.667 li
112.051 118.62 112.133 118.463 112.297 118.197 cv
112.297 118.197 li
112.133 118.463 112.051 118.62 112.051 118.667 cv
112.051 118.667 112.051 118.667 112.051 118.667 cv
112.051 118.667 li
113.32 117.564 mo
112.682 117.558 li
113.32 117.564 li
113.745 117.564 113.957 117.562 113.957 117.558 cv
113.957 117.558 li
113.957 117.562 113.745 117.564 113.32 117.564 cv
113.957 117.558 mo
113.957 117.558 li
113.957 117.558 li
113.957 117.558 li
113.957 117.558 mo
113.957 117.558 li
113.957 117.558 li
113.957 117.558 li
113.957 117.558 li
113.957 117.558 mo
113.957 117.558 li
113.957 117.558 li
113.957 117.558 li
112.682 117.558 mo
112.682 117.558 li
112.544 117.302 mo
112.544 117.302 li
112.651 117.126 112.769 116.931 112.899 116.718 cv
112.922 116.681 112.944 116.644 112.966 116.608 cv
112.966 116.608 li
112.944 116.644 112.922 116.681 112.899 116.718 cv
112.769 116.931 112.651 117.126 112.544 117.302 cv
114 114.912 mo
114 114.912 li
114 114.912 li
114.149 114.84 li
114.198 114.84 li
114.304 114.84 li
114.198 114.84 li
114.149 114.84 li
114 114.912 li
114 114.912 li
1 /1 /CSD get_res sepcs
1 sep
f
118.171 115.382 mo
118.171 115.335 117.98 115.311 117.596 115.311 cv
117.441 115.311 li
117.404 115.263 li
117.416 115.15 li
117.478 115.037 li
117.584 115.037 li
117.753 115.045 118.054 115.049 118.487 115.049 cv
118.665 115.049 118.809 115.049 118.92 115.049 cv
119.032 115.049 119.108 115.047 119.149 115.043 cv
119.236 115.043 li
119.323 115.102 li
119.304 115.186 li
119.261 115.293 li
119.143 115.311 li
118.929 115.311 118.807 115.339 118.778 115.394 cv
118.761 115.446 118.634 115.937 118.394 116.867 cv
118.134 117.852 118.002 118.347 117.998 118.351 cv
117.907 118.601 117.73 118.812 117.466 118.983 cv
117.202 119.154 116.917 119.239 116.612 119.239 cv
116.373 119.239 116.171 119.18 116.006 119.06 cv
115.841 118.941 115.758 118.782 115.758 118.583 cv
115.758 118.417 115.805 118.289 115.9 118.202 cv
115.995 118.115 116.102 118.071 116.222 118.071 cv
116.408 118.071 116.511 118.158 116.532 118.333 cv
116.532 118.46 116.494 118.56 116.42 118.631 cv
116.346 118.703 116.261 118.75 116.166 118.774 cv
116.117 118.792 li
116.16 118.846 li
116.268 118.961 116.422 119.019 116.624 119.019 cv
116.781 119.019 116.934 118.955 117.082 118.828 cv
117.231 118.701 117.34 118.536 117.41 118.333 cv
117.427 118.285 117.557 117.789 117.8 116.843 cv
118.044 115.897 118.167 115.41 118.171 115.382 cv
1 /0 /CSD get_res sepcs
1 sep
f
116.612 119.239 mo
116.605 119.239 116.597 119.239 116.59 119.239 cv
116.597 119.239 116.605 119.239 116.612 119.239 cv
116.917 119.239 117.202 119.154 117.466 118.983 cv
117.476 118.976 117.487 118.969 117.497 118.963 cv
117.497 118.963 li
117.487 118.969 117.476 118.976 117.466 118.983 cv
117.202 119.154 116.917 119.239 116.612 119.239 cv
116.59 119.239 mo
116.36 119.235 116.165 119.176 116.006 119.06 cv
116.165 119.176 116.36 119.235 116.59 119.239 cv
115.921 118.989 mo
115.921 118.988 115.92 118.988 115.919 118.987 cv
115.919 118.987 li
115.92 118.988 115.921 118.988 115.921 118.989 cv
115.921 118.989 li
115.918 118.986 mo
115.818 118.884 115.764 118.759 115.759 118.611 cv
115.759 118.611 li
115.764 118.759 115.818 118.884 115.918 118.986 cv
115.918 118.986 li
116.117 118.792 mo
116.117 118.792 li
116.166 118.774 li
116.261 118.75 116.346 118.703 116.42 118.631 cv
116.494 118.56 116.532 118.46 116.532 118.333 cv
116.532 118.333 li
116.532 118.46 116.494 118.56 116.42 118.631 cv
116.346 118.703 116.261 118.75 116.166 118.774 cv
116.117 118.792 li
115.758 118.602 mo
115.758 118.596 115.758 118.59 115.758 118.583 cv
115.758 118.583 li
115.758 118.59 115.758 118.596 115.758 118.602 cv
115.758 118.602 li
117.41 118.333 mo
117.427 118.286 117.554 117.8 117.792 116.876 cv
117.792 116.876 li
117.554 117.8 117.427 118.286 117.41 118.333 cv
117.41 118.333 li
118.171 115.382 mo
118.171 115.381 118.171 115.379 118.171 115.378 cv
118.171 115.378 li
118.171 115.379 118.171 115.381 118.171 115.382 cv
118.171 115.382 li
117.416 115.15 mo
117.478 115.037 li
117.584 115.037 li
117.752 115.045 118.052 115.049 118.484 115.049 cv
118.484 115.049 li
118.052 115.049 117.752 115.045 117.584 115.037 cv
117.478 115.037 li
117.416 115.15 li
118.92 115.049 mo
119.028 115.049 119.103 115.047 119.145 115.043 cv
119.145 115.043 li
119.103 115.047 119.028 115.049 118.92 115.049 cv
118.92 115.049 li
0 0 0 .00784314 cmyk
f
120.107 117.567 mo
120.029 117.596 li
119.974 117.615 119.894 117.634 119.791 117.653 cv
119.688 117.672 119.573 117.686 119.446 117.693 cv
119.333 117.693 li
119.333 117.43 li
119.446 117.43 li
119.633 117.422 119.805 117.394 119.964 117.344 cv
120.122 117.294 120.233 117.249 120.297 117.206 cv
120.463 117.08 li
120.535 117.063 li
120.636 117.098 li
120.636 118.81 li
120.642 120.529 li
120.713 120.58 li
120.856 120.603 li
120.931 120.611 121.054 120.615 121.225 120.615 cv
121.379 120.615 li
121.379 120.878 li
121.314 120.878 li
121.231 120.867 120.915 120.861 120.368 120.861 cv
119.829 120.861 119.518 120.867 119.435 120.878 cv
119.363 120.878 li
119.363 120.615 li
119.518 120.615 li
119.744 120.615 li
119.892 120.609 li
119.988 120.592 li
120.035 120.58 li
120.071 120.552 li
120.107 120.529 li
120.107 117.567 li
1 /0 /CSD get_res sepcs
1 sep
f
120.107 119.832 mo
120.107 119.832 li
120.107 117.567 li
120.107 119.832 li
120.636 118.81 mo
120.636 118.81 li
120.636 117.098 li
120.636 118.81 li
119.446 117.693 mo
119.333 117.693 li
119.446 117.693 li
119.446 117.693 li
119.791 117.653 mo
119.791 117.653 li
119.791 117.653 li
119.894 117.634 119.974 117.615 120.029 117.596 cv
120.029 117.596 li
119.974 117.615 119.894 117.634 119.791 117.653 cv
119.791 117.653 li
119.971 117.342 mo
120.126 117.293 120.234 117.248 120.297 117.206 cv
120.234 117.248 120.126 117.293 119.971 117.342 cv
0 0 0 .00392157 cmyk
f
120.639 119.832 mo
120.639 119.832 li
120.636 118.81 li
120.639 119.832 li
120.636 118.81 mo
120.636 118.81 li
119.446 117.693 mo
119.573 117.686 119.688 117.672 119.791 117.653 cv
119.791 117.653 li
119.688 117.672 119.573 117.686 119.446 117.693 cv
119.446 117.693 li
119.333 117.693 mo
119.333 117.693 li
119.333 117.43 li
119.446 117.43 li
119.633 117.422 119.805 117.394 119.964 117.344 cv
119.966 117.343 119.969 117.342 119.971 117.342 cv
120.126 117.293 120.234 117.248 120.297 117.206 cv
120.297 117.206 li
120.463 117.08 li
120.535 117.063 li
120.636 117.098 li
120.535 117.063 li
120.463 117.08 li
120.297 117.206 li
120.233 117.249 120.122 117.294 119.964 117.344 cv
119.805 117.394 119.633 117.422 119.446 117.43 cv
119.333 117.43 li
119.333 117.693 li
120.029 117.596 mo
120.107 117.567 li
120.029 117.596 li
120.107 117.567 mo
120.107 117.567 li
120.107 117.567 li
1 /1 /CSD get_res sepcs
1 sep
f
115.999 112.134 mo
115.999 112.199 li
115.907 112.319 li
111.179 112.319 li
111.284 112.402 li
111.463 112.563 li
111.667 112.783 li
111.746 112.871 111.814 112.982 111.872 113.117 cv
111.929 113.252 111.983 113.393 112.033 113.541 cv
112.064 113.69 li
111.94 113.755 li
111.878 113.755 li
111.841 113.731 li
111.81 113.678 li
111.785 113.564 li
111.711 113.274 111.57 113.016 111.364 112.789 cv
111.158 112.563 110.906 112.394 110.609 112.283 cv
110.498 112.217 li
110.523 112.158 li
110.609 112.116 li
110.807 112.04 110.983 111.941 111.135 111.818 cv
111.288 111.695 111.406 111.573 111.488 111.454 cv
111.57 111.335 111.637 111.218 111.686 111.103 cv
111.736 110.987 111.771 110.896 111.791 110.828 cv
111.81 110.727 li
111.828 110.679 li
111.859 110.656 li
111.94 110.644 li
112.064 110.709 li
112.033 110.858 li
111.991 111.005 111.94 111.142 111.878 111.269 cv
111.816 111.397 111.75 111.504 111.68 111.591 cv
111.488 111.812 li
111.302 111.979 li
111.179 112.08 li
115.907 112.08 li
115.999 112.199 li
115.999 112.134 li
1 /0 /CSD get_res sepcs
1 sep
f
111.94 113.755 mo
111.878 113.755 li
111.841 113.731 li
111.81 113.678 li
111.785 113.564 li
111.711 113.274 111.57 113.016 111.364 112.789 cv
111.158 112.563 110.906 112.394 110.609 112.283 cv
110.504 112.221 li
110.609 112.283 li
110.906 112.394 111.158 112.563 111.364 112.789 cv
111.57 113.016 111.711 113.274 111.785 113.564 cv
111.81 113.678 li
111.841 113.731 li
111.878 113.755 li
111.94 113.755 li
112.064 113.69 li
111.94 113.755 li
115.172 112.319 mo
111.179 112.319 li
115.172 112.319 li
111.179 112.08 mo
111.179 112.08 li
111.302 111.979 li
111.488 111.812 li
111.68 111.591 li
111.68 111.591 li
111.68 111.591 li
111.68 111.591 li
111.488 111.812 li
111.302 111.979 li
111.179 112.08 li
111.488 111.454 mo
111.57 111.335 111.637 111.218 111.686 111.103 cv
111.686 111.103 li
111.637 111.218 111.57 111.335 111.488 111.454 cv
111.488 111.454 li
111.878 111.269 mo
111.878 111.269 li
111.878 111.269 li
111.94 111.142 111.991 111.005 112.033 110.858 cv
112.064 110.709 li
112.033 110.858 li
111.991 111.005 111.94 111.142 111.878 111.269 cv
111.878 111.269 li
0 0 0 .00784314 cmyk
f
112.064 113.69 mo
112.033 113.541 li
111.983 113.393 111.929 113.252 111.872 113.117 cv
111.814 112.982 111.746 112.871 111.667 112.783 cv
111.463 112.563 li
111.284 112.402 li
111.179 112.319 li
111.284 112.402 li
111.463 112.563 li
111.667 112.783 li
111.746 112.871 111.814 112.982 111.872 113.117 cv
111.929 113.252 111.983 113.393 112.033 113.541 cv
112.064 113.69 li
111.179 112.319 mo
111.179 112.319 li
110.504 112.203 mo
110.504 112.203 li
110.523 112.158 li
110.609 112.116 li
110.807 112.04 110.983 111.941 111.135 111.818 cv
111.288 111.695 111.406 111.573 111.488 111.454 cv
111.488 111.454 li
111.488 111.454 li
111.488 111.454 li
111.406 111.573 111.288 111.695 111.135 111.818 cv
110.983 111.941 110.807 112.04 110.609 112.116 cv
110.523 112.158 li
110.504 112.203 li
115.906 112.08 mo
115.906 112.08 li
111.179 112.08 li
115.906 112.08 li
111.179 112.08 mo
111.179 112.08 li
111.68 111.591 mo
111.75 111.504 111.816 111.397 111.878 111.269 cv
111.878 111.269 li
111.816 111.397 111.75 111.504 111.68 111.591 cv
111.68 111.591 li
111.686 111.103 mo
111.686 111.103 li
111.686 111.103 li
111.736 110.987 111.771 110.896 111.791 110.828 cv
111.81 110.727 li
111.828 110.679 li
111.859 110.656 li
111.94 110.644 li
112.064 110.709 li
111.94 110.644 li
111.859 110.656 li
111.828 110.679 li
111.81 110.727 li
111.791 110.828 li
111.771 110.896 111.736 110.987 111.686 111.103 cv
111.686 111.103 li
1 /1 /CSD get_res sepcs
1 sep
f
115.074 112.277 mo
115.074 112.199 li
115.172 112.08 li
119.227 112.08 li
119.332 112.199 li
119.227 112.319 li
115.172 112.319 li
115.074 112.199 li
115.074 112.277 li
1 /0 /CSD get_res sepcs
1 sep
f
118.487 112.319 mo
115.172 112.319 li
118.487 112.319 li
0 0 0 .00784314 cmyk
f
115.172 112.319 mo
115.172 112.319 li
115.074 112.199 li
115.172 112.319 li
1 /1 /CSD get_res sepcs
1 sep
f
115.172 112.319 mo
115.172 112.319 li
0 0 0 .0156863 cmyk
f
115.074 112.277 mo
115.074 112.199 li
115.074 112.277 li
115.074 112.199 li
115.074 112.277 li
1 /1 /CSD get_res sepcs
1 sep
f
118.487 112.319 mo
118.487 112.319 li
118.487 112.319 li
0 0 0 .00784314 cmyk
f
115.074 112.199 mo
115.074 112.199 li
115.172 112.08 li
119.227 112.08 li
115.172 112.08 li
115.074 112.199 li
1 /1 /CSD get_res sepcs
1 sep
f
118.4 112.277 mo
118.4 112.199 li
118.487 112.08 li
122.083 112.08 li
122.175 112.199 li
122.083 112.319 li
118.487 112.319 li
118.4 112.199 li
118.4 112.277 li
1 /0 /CSD get_res sepcs
1 sep
f
122.083 112.319 mo
118.487 112.319 li
122.083 112.319 li
122.175 112.199 li
122.083 112.319 li
0 0 0 .00784314 cmyk
f
118.487 112.319 mo
118.487 112.319 li
118.4 112.199 li
118.487 112.319 li
1 /1 /CSD get_res sepcs
1 sep
f
118.487 112.319 mo
118.487 112.319 li
0 0 0 .0156863 cmyk
f
118.4 112.277 mo
118.4 112.199 li
118.4 112.277 li
118.4 112.199 li
118.4 112.277 li
1 /1 /CSD get_res sepcs
1 sep
f
118.4 112.199 mo
118.487 112.08 li
118.487 112.08 li
118.487 112.08 li
118.4 112.199 li
f
122.175 112.199 mo
122.083 112.08 li
118.487 112.08 li
122.083 112.08 li
122.175 112.199 li
118.4 112.199 mo
118.4 112.199 li
f
grestore
60.3609 101.893 mo
115.885 101.893 li
115.885 101.176 li
60.3609 101.176 li
60.3609 101.893 li
1 /0 /CSD get_res sepcs
1 sep
f
59.2846 101.534 mo
60.7197 100.817 li
60.3609 101.534 li
60.7197 102.252 li
59.2846 101.534 li
cp
f
59.2846 101.534 mo
60.7197 100.817 li
60.3609 101.534 li
60.7197 102.252 li
59.2846 101.534 li
cp
@
83.9541 91.1298 mo
91.8473 91.1298 li
91.8473 113.374 li
83.9541 113.374 li
83.9541 91.1298 li
0 0 0 0 cmyk
f
gsave
83.9541 94.7175 mo
91.8473 94.7175 li
91.8473 107.634 li
83.9541 107.634 li
83.9541 94.7175 li
eclp
87.1164 101.031 mo
87.1164 100.984 86.916 100.96 86.5151 100.96 cv
86.3534 100.96 li
86.3147 100.912 li
86.3276 100.799 li
86.3922 100.686 li
86.5022 100.686 li
86.6789 100.694 86.9936 100.697 87.4462 100.697 cv
87.6316 100.697 87.7824 100.697 87.8988 100.697 cv
88.0152 100.697 88.0949 100.696 88.1381 100.692 cv
88.2286 100.692 li
88.3191 100.751 li
88.2997 100.835 li
88.2544 100.942 li
88.1316 100.96 li
87.9074 100.96 87.7803 100.988 87.7501 101.043 cv
87.7329 101.095 87.5992 101.586 87.3492 102.516 cv
87.0777 103.501 86.9397 103.996 86.9354 104 cv
86.8405 104.25 86.6552 104.461 86.3793 104.632 cv
86.1034 104.803 85.8059 104.888 85.487 104.888 cv
85.2369 104.888 85.0257 104.828 84.8533 104.709 cv
84.6809 104.59 84.5947 104.431 84.5947 104.232 cv
84.5947 104.065 84.6442 103.938 84.7434 103.851 cv
84.8425 103.763 84.9546 103.72 85.0797 103.72 cv
85.2736 103.72 85.3814 103.807 85.4029 103.982 cv
85.4029 104.109 85.3642 104.208 85.2866 104.28 cv
85.2089 104.352 85.1206 104.399 85.0214 104.423 cv
84.9697 104.441 li
85.015 104.495 li
85.127 104.61 85.2887 104.667 85.4999 104.667 cv
85.6637 104.667 85.8232 104.604 85.9784 104.477 cv
86.1336 104.35 86.2478 104.185 86.3211 103.982 cv
86.3383 103.934 86.4741 103.438 86.7285 102.492 cv
86.9828 101.546 87.1121 101.059 87.1164 101.031 cv
1 /0 /CSD get_res sepcs
1 sep
f
85.487 104.888 mo
85.2369 104.888 85.0257 104.828 84.8533 104.709 cv
84.6809 104.59 84.5947 104.431 84.5947 104.232 cv
84.5947 104.232 li
84.5947 104.431 84.6809 104.59 84.8533 104.709 cv
85.0257 104.828 85.2369 104.888 85.487 104.888 cv
85.8059 104.888 86.1034 104.803 86.3793 104.632 cv
86.5152 104.548 86.629 104.454 86.721 104.35 cv
86.721 104.35 li
86.629 104.454 86.5152 104.548 86.3793 104.632 cv
86.1034 104.803 85.8059 104.888 85.487 104.888 cv
84.9697 104.441 mo
84.9697 104.441 li
85.0214 104.423 li
85.0214 104.423 li
85.0214 104.423 li
85.0214 104.423 li
84.9697 104.441 li
85.4011 104.028 mo
85.4011 104.028 li
85.4023 104.013 85.4029 103.998 85.4029 103.982 cv
85.4029 103.982 li
85.4029 103.998 85.4023 104.013 85.4011 104.028 cv
84.7812 103.82 mo
84.8708 103.753 84.9703 103.72 85.0796 103.72 cv
85.0796 103.72 85.0796 103.72 85.0796 103.72 cv
85.0796 103.72 li
85.0796 103.72 85.0796 103.72 85.0796 103.72 cv
84.9703 103.72 84.8708 103.753 84.7812 103.82 cv
84.7812 103.82 li
87.3492 102.516 mo
87.3492 102.516 li
87.3492 102.516 li
87.5992 101.586 87.7329 101.095 87.7501 101.043 cv
87.7501 101.043 li
87.7501 101.043 li
87.7501 101.043 li
87.7329 101.095 87.5992 101.586 87.3492 102.516 cv
87.3492 102.516 li
87.1164 101.031 mo
87.1164 100.984 86.916 100.96 86.5151 100.96 cv
86.3534 100.96 li
86.3147 100.912 li
86.3534 100.96 li
86.5151 100.96 li
86.916 100.96 87.1164 100.984 87.1164 101.031 cv
87.1164 101.031 li
88.116 100.96 mo
88.116 100.96 li
88.1211 100.96 88.1263 100.96 88.1316 100.96 cv
88.2544 100.942 li
88.1316 100.96 li
88.1263 100.96 88.1211 100.96 88.116 100.96 cv
0 0 0 .00784314 cmyk
f
85.4999 104.667 mo
85.2887 104.667 85.127 104.61 85.015 104.495 cv
84.9697 104.441 li
85.015 104.495 li
85.127 104.61 85.2887 104.667 85.4999 104.667 cv
85.6637 104.667 85.8232 104.604 85.9784 104.477 cv
86.1336 104.35 86.2478 104.185 86.3211 103.982 cv
86.3383 103.934 86.4741 103.438 86.7285 102.492 cv
86.9828 101.546 87.1121 101.059 87.1164 101.031 cv
87.1164 101.031 li
87.1121 101.059 86.9828 101.546 86.7285 102.492 cv
86.4741 103.438 86.3383 103.934 86.3211 103.982 cv
86.2478 104.185 86.1336 104.35 85.9784 104.477 cv
85.8232 104.604 85.6637 104.667 85.4999 104.667 cv
84.9697 104.441 mo
84.9697 104.441 li
85.0214 104.423 mo
85.1205 104.399 85.2089 104.352 85.2865 104.28 cv
85.3544 104.217 85.3926 104.134 85.4011 104.028 cv
85.4011 104.028 li
85.3926 104.134 85.3544 104.217 85.2865 104.28 cv
85.2089 104.352 85.1205 104.399 85.0214 104.423 cv
85.0214 104.423 li
86.721 104.35 mo
86.8158 104.244 86.8872 104.127 86.9353 104 cv
86.9396 103.996 87.0776 103.501 87.3492 102.516 cv
87.3492 102.516 li
87.0776 103.501 86.9396 103.996 86.9353 104 cv
86.8872 104.127 86.8158 104.244 86.721 104.35 cv
86.721 104.35 li
84.5947 104.232 mo
84.5947 104.232 li
84.5947 104.065 84.6442 103.938 84.7434 103.851 cv
84.7558 103.84 84.7684 103.83 84.7812 103.82 cv
84.7812 103.82 li
84.7684 103.83 84.7558 103.84 84.7434 103.851 cv
84.6442 103.938 84.5947 104.065 84.5947 104.232 cv
85.4029 103.982 mo
85.3814 103.807 85.2736 103.72 85.0796 103.72 cv
85.0796 103.72 li
85.2736 103.72 85.3814 103.807 85.4029 103.982 cv
85.4029 103.982 li
87.7501 101.043 mo
87.7796 100.989 87.9015 100.961 88.116 100.96 cv
88.116 100.96 li
87.9015 100.961 87.7796 100.989 87.7501 101.043 cv
87.7501 101.043 li
87.1164 101.031 mo
87.1164 101.031 li
87.1164 101.031 li
87.1164 101.031 li
87.1164 101.031 mo
87.1164 101.031 li
87.1164 101.031 li
87.1164 101.031 li
87.1164 101.031 li
87.1164 101.031 mo
87.1164 101.031 li
87.1164 101.031 li
87.1164 101.031 li
88.2544 100.942 mo
88.2997 100.835 li
88.3191 100.751 li
88.2997 100.835 li
88.2544 100.942 li
86.3147 100.912 mo
86.3147 100.912 li
86.3276 100.799 li
86.3922 100.686 li
86.5022 100.686 li
86.6789 100.694 86.9936 100.697 87.4462 100.697 cv
87.6316 100.697 87.7824 100.697 87.8988 100.697 cv
88.0152 100.697 88.0949 100.696 88.1381 100.692 cv
88.2286 100.692 li
88.3191 100.751 li
88.2286 100.692 li
88.1381 100.692 li
88.0949 100.696 88.0152 100.697 87.8988 100.697 cv
87.7824 100.697 87.6316 100.697 87.4462 100.697 cv
86.9936 100.697 86.6789 100.694 86.5022 100.686 cv
86.3922 100.686 li
86.3276 100.799 li
86.3147 100.912 li
1 /1 /CSD get_res sepcs
1 sep
f
89.1383 103.216 mo
89.0575 103.245 li
88.9996 103.264 88.9167 103.283 88.8089 103.302 cv
88.7013 103.321 88.5811 103.335 88.4486 103.342 cv
88.3305 103.342 li
88.3305 103.079 li
88.4486 103.079 li
88.6433 103.071 88.8235 103.042 88.9892 102.993 cv
89.1549 102.943 89.2709 102.897 89.3371 102.855 cv
89.5112 102.729 li
89.5857 102.712 li
89.6913 102.747 li
89.6913 104.459 li
89.6975 106.178 li
89.7721 106.229 li
89.9212 106.252 li
90 106.26 90.1284 106.264 90.3065 106.264 cv
90.4681 106.264 li
90.4681 106.527 li
90.3997 106.527 li
90.3127 106.516 89.9834 106.51 89.4117 106.51 cv
88.8483 106.51 88.5231 106.516 88.4361 106.527 cv
88.3616 106.527 li
88.3616 106.264 li
88.5231 106.264 li
88.6142 106.264 88.693 106.264 88.7592 106.264 cv
88.9146 106.258 li
89.014 106.241 li
89.0637 106.229 li
89.101 106.201 li
89.1383 106.178 li
89.1383 103.216 li
1 /0 /CSD get_res sepcs
1 sep
f
90.4681 106.527 mo
90.3997 106.527 li
90.3127 106.516 89.9834 106.51 89.4117 106.51 cv
88.8483 106.51 88.5231 106.516 88.4361 106.527 cv
88.3616 106.527 li
88.4361 106.527 li
88.5231 106.516 88.8483 106.51 89.4117 106.51 cv
89.9834 106.51 90.3127 106.516 90.3997 106.527 cv
90.4681 106.527 li
90.4681 106.264 li
90.4681 106.527 li
89.6913 104.459 mo
89.6913 104.459 li
89.6913 102.747 li
89.6913 104.459 li
88.4486 103.342 mo
88.3305 103.342 li
88.4486 103.342 li
88.4486 103.342 li
88.4486 103.342 mo
88.4486 103.342 li
88.5811 103.335 88.7013 103.321 88.8089 103.302 cv
88.9167 103.283 88.9996 103.264 89.0575 103.245 cv
89.1383 103.216 li
89.0575 103.245 li
88.9996 103.264 88.9167 103.283 88.8089 103.302 cv
88.7013 103.321 88.5811 103.335 88.4486 103.342 cv
0 0 0 .00784314 cmyk
f
88.3616 106.527 mo
88.3616 106.527 li
88.3616 106.264 li
88.5231 106.264 li
88.6142 106.264 88.693 106.264 88.7592 106.264 cv
88.9146 106.258 li
89.014 106.241 li
89.0637 106.229 li
89.101 106.201 li
89.1383 106.178 li
89.1383 103.216 li
89.1383 106.178 li
89.101 106.201 li
89.0637 106.229 li
89.014 106.241 li
88.9146 106.258 li
88.7592 106.264 li
88.693 106.264 88.6142 106.264 88.5231 106.264 cv
88.3616 106.264 li
88.3616 106.527 li
90.4681 106.264 mo
90.3065 106.264 li
90.1284 106.264 90 106.26 89.9212 106.252 cv
89.7721 106.229 li
89.6975 106.178 li
89.6913 104.459 li
89.6975 106.178 li
89.7721 106.229 li
89.9212 106.252 li
90 106.26 90.1284 106.264 90.3065 106.264 cv
90.4681 106.264 li
89.6913 104.459 mo
89.6913 104.459 li
88.3305 103.342 mo
88.3305 103.342 li
88.3305 103.079 li
88.4486 103.079 li
88.6433 103.071 88.8235 103.042 88.9892 102.993 cv
89.1549 102.943 89.2709 102.897 89.3371 102.855 cv
89.5112 102.729 li
89.5857 102.712 li
89.6913 102.747 li
89.5857 102.712 li
89.5112 102.729 li
89.3371 102.855 li
89.2709 102.897 89.1549 102.943 88.9892 102.993 cv
88.8235 103.042 88.6433 103.071 88.4486 103.079 cv
88.3305 103.079 li
88.3305 103.342 li
89.1383 103.216 mo
89.1383 103.216 li
1 /1 /CSD get_res sepcs
1 sep
f
89.6963 97.9793 mo
89.6963 98.0449 li
89.5994 98.1642 li
84.6593 98.1642 li
84.7692 98.2476 li
84.9567 98.4085 li
85.1702 98.6291 li
85.2521 98.7165 85.3231 98.8278 85.3835 98.9629 cv
85.4439 99.098 85.4999 99.239 85.5517 99.3861 cv
85.584 99.5351 li
85.4547 99.6007 li
85.39 99.6007 li
85.3512 99.5768 li
85.3188 99.5232 li
85.293 99.41 li
85.2154 99.1199 85.0689 98.8616 84.8533 98.635 cv
84.6378 98.4085 84.3748 98.2396 84.0644 98.1284 cv
83.9481 98.0628 li
83.9739 98.0032 li
84.0644 97.9615 li
84.2713 97.8859 84.4545 97.7866 84.6141 97.6634 cv
84.7736 97.5402 84.8964 97.419 84.9827 97.2998 cv
85.0689 97.1805 85.1378 97.0634 85.1895 96.9481 cv
85.2412 96.8329 85.2779 96.7414 85.2995 96.6739 cv
85.3188 96.5726 li
85.3382 96.5248 li
85.3706 96.5011 li
85.4547 96.4891 li
85.584 96.5547 li
85.5517 96.7037 li
85.5085 96.8507 85.4547 96.9878 85.39 97.115 cv
85.3253 97.2422 85.2564 97.3495 85.1831 97.4369 cv
84.9827 97.6574 li
84.7887 97.8244 li
84.6593 97.9257 li
89.5994 97.9257 li
89.6963 98.0449 li
89.6963 97.9793 li
1 /0 /CSD get_res sepcs
1 sep
f
85.4547 99.6007 mo
85.39 99.6007 li
85.3512 99.5768 li
85.3188 99.5232 li
85.293 99.41 li
85.2154 99.1199 85.0689 98.8616 84.8533 98.635 cv
84.6378 98.4086 84.3748 98.2396 84.0644 98.1284 cv
83.9541 98.0662 li
84.0644 98.1284 li
84.3748 98.2396 84.6378 98.4086 84.8533 98.635 cv
85.0689 98.8616 85.2154 99.1199 85.293 99.41 cv
85.3188 99.5232 li
85.3512 99.5768 li
85.39 99.6007 li
85.4547 99.6007 li
85.584 99.5351 li
85.4547 99.6007 li
87.4462 98.1642 mo
84.6593 98.1642 li
87.4462 98.1642 li
84.6593 97.9257 mo
84.6593 97.9257 li
84.7887 97.8244 li
84.9827 97.6574 li
85.1831 97.4369 li
85.2564 97.3495 85.3253 97.2422 85.39 97.115 cv
85.4547 96.9878 85.5085 96.8507 85.5517 96.7037 cv
85.584 96.5547 li
85.5517 96.7037 li
85.5085 96.8507 85.4547 96.9878 85.39 97.115 cv
85.3253 97.2422 85.2564 97.3495 85.1831 97.4369 cv
84.9827 97.6574 li
84.7887 97.8244 li
84.6593 97.9257 li
0 0 0 .00784314 cmyk
f
85.584 99.5351 mo
85.5517 99.3861 li
85.4999 99.239 85.4439 99.098 85.3835 98.9629 cv
85.3231 98.8278 85.2521 98.7165 85.1702 98.6291 cv
84.9567 98.4086 li
84.7692 98.2476 li
84.6593 98.1642 li
84.7692 98.2476 li
84.9567 98.4086 li
85.1702 98.6291 li
85.2521 98.7165 85.3231 98.8278 85.3835 98.9629 cv
85.4439 99.098 85.4999 99.239 85.5517 99.3861 cv
85.584 99.5351 li
84.6593 98.1642 mo
84.6593 98.1642 li
83.9541 98.0488 mo
83.9541 98.0488 li
83.9739 98.0032 li
84.0644 97.9615 li
84.2713 97.8859 84.4545 97.7866 84.6141 97.6634 cv
84.7736 97.5402 84.8964 97.419 84.9827 97.2998 cv
85.0689 97.1805 85.1378 97.0634 85.1896 96.9481 cv
85.2412 96.8329 85.2779 96.7414 85.2995 96.6739 cv
85.3188 96.5726 li
85.3382 96.5248 li
85.3706 96.5011 li
85.4547 96.4891 li
85.584 96.5547 li
85.4547 96.4891 li
85.3706 96.5011 li
85.3382 96.5248 li
85.3188 96.5726 li
85.2995 96.6739 li
85.2779 96.7414 85.2412 96.8329 85.1896 96.9481 cv
85.1378 97.0634 85.0689 97.1805 84.9827 97.2998 cv
84.8964 97.419 84.7736 97.5402 84.6141 97.6634 cv
84.4545 97.7866 84.2713 97.8859 84.0644 97.9615 cv
83.9739 98.0032 li
83.9541 98.0488 li
89.5994 97.9257 mo
89.5994 97.9257 li
84.6593 97.9257 li
89.5994 97.9257 li
84.6593 97.9257 mo
84.6593 97.9257 li
1 /1 /CSD get_res sepcs
1 sep
f
87.3557 98.1224 mo
87.3557 98.0449 li
87.4462 97.9257 li
91.2029 97.9257 li
91.2999 98.0449 li
91.2029 98.1642 li
87.4462 98.1642 li
87.3557 98.0449 li
87.3557 98.1224 li
1 /0 /CSD get_res sepcs
1 sep
f
91.2029 98.1642 mo
87.4462 98.1642 li
91.2029 98.1642 li
91.2999 98.0449 li
91.2029 98.1642 li
0 0 0 .00784314 cmyk
f
87.4462 98.1642 mo
87.4462 98.1642 li
87.3557 98.0449 li
87.4462 98.1642 li
1 /1 /CSD get_res sepcs
1 sep
f
87.4462 98.1642 mo
87.4462 98.1642 li
0 0 0 .0156863 cmyk
f
87.3557 98.1224 mo
87.3557 98.0449 li
87.3557 98.1224 li
87.3557 98.0449 li
87.3557 98.1224 li
1 /1 /CSD get_res sepcs
1 sep
f
91.2999 98.0449 mo
91.2029 97.9257 li
87.4462 97.9257 li
87.3557 98.0449 li
87.4462 97.9257 li
91.2029 97.9257 li
91.2999 98.0449 li
f
grestore
1 /0 /CSD get_res sepcs
1 sep
ZUVFPK+TimesNewRomanPSMT*1 [8.61069 0 0 -8.61069 0 0 ]msf
84.6717 93.2824 mo
(2)sh
%ADOBeginSubsetFont: FAAAAA+TimesNewRomanPSMT AddGlyphs
ct_T42Dict begin
systemdict /gcheck known {currentglobal ZUVFPK+TimesNewRomanPSMT gcheck setglobal} if
1 2284 24 <00010062ffe80379054c0021014db0852b584043a4040112591e691e7f05
7f067f1d8c048d1d07350235215503552057216b1c7605791c87028a1a8a
1ca303a809a023e0230f0023010f1011121315161708140d020303b8011c
401120211420030420211a1b1c030718040503b8019fb320202113ba01f9
00180313400c0d0d01e20002e22121000400ba013e001b0147b58007a007
0207b801f5400a40230140236023022316b801f9b61002a021012103b801
9f4009204010a01002101922ba019501e900182b4e10e45d4d10ed105d3c
10ed105d71f65dede4003f3c10ed10ed3feded12392fed01113911121739
87082e2b057d10c40011121739b10602435458400d720172027220820182
02822006005d59313001715d005d435c58400b6b046f12641e7005701d05
5d59015d1bb10320b80821b56c0303210d18b80800b46c0d0d2102b80821
b26c210400183f2b3f2b12392f2b30315901072107041716151406060706
23222635343633321617163332363534262726270103794efe685901099b
8557845173797a6f2e231a272f4b4d75b19e8b6dbc0104054caab6279e88
b86bb680273753321c2b102134b17f7bd53a2d07020f>ZUVFPK+TimesNewRomanPSMT AddT42Char 
ZUVFPK+TimesNewRomanPSMT /CharStrings get begin
/five 24 def
end
ZUVFPK+TimesNewRomanPSMT /Encoding get
dup 53 /five put
pop
systemdict /gcheck known {setglobal} if
end
%ADOEndSubsetFont
/ZUVFPK+TimesNewRomanPSMT*1 
[32{/.notdef}rp /tau 11{/.notdef}rp /comma 3{/.notdef}rp /zero /one /two 
/three /four /five /six /seven 18{/.notdef}rp /J 41{/.notdef}rp 
/t 139{/.notdef}rp]
ZUVFPK+TimesNewRomanPSMT nf
ZUVFPK+TimesNewRomanPSMT*1 [8.61069 0 0 -8.61069 0 0 ]msf
170.779 93.2824 mo
(5)sh
173.032 117.322 mo
173.024 115.169 li
173.742 115.167 li
173.749 117.319 li
173.016 113.017 mo
173.009 110.864 li
173.726 110.861 li
173.734 113.014 li
173.001 108.711 mo
172.993 106.559 li
173.711 106.556 li
173.719 108.709 li
172.986 104.406 mo
172.978 102.253 li
173.695 102.251 li
173.703 104.403 li
172.97 100.101 mo
172.963 97.948 li
173.68 97.9454 li
173.688 100.098 li
f
ZUVFPK+TimesNewRomanPSMT*1 [8.61069 0 0 -8.61069 0 0 ]msf
55.9695 93.2824 mo
(1)sh
58.9688 3.94709 mo
58.9657 6.09976 li
58.2482 6.09872 li
58.2513 3.94605 li
58.9626 8.25243 mo
58.9594 10.4051 li
58.2419 10.4041 li
58.245 8.25139 li
58.9563 12.5578 mo
58.9532 14.7104 li
58.2356 14.7094 li
58.2388 12.5567 li
58.9501 16.8631 mo
58.9469 19.0158 li
58.2294 19.0147 li
58.2325 16.8621 li
58.9438 21.1684 mo
58.9407 23.3211 li
58.2231 23.3201 li
58.2262 21.1674 li
58.9375 25.4738 mo
58.9344 27.6265 li
58.2168 27.6254 li
58.22 25.4727 li
58.9313 29.7791 mo
58.9281 31.9318 li
58.2106 31.9307 li
58.2137 29.7781 li
58.925 34.0845 mo
58.9219 36.2371 li
58.2043 36.2361 li
58.2075 34.0834 li
58.9188 38.3898 mo
58.9156 40.5425 li
58.1981 40.5414 li
58.2012 38.3888 li
58.9125 42.6951 mo
58.9094 44.8478 li
58.1918 44.8468 li
58.1949 42.6941 li
58.9062 47.0005 mo
58.9031 49.1531 li
58.1855 49.1521 li
58.1887 46.9994 li
58.9 51.3058 mo
58.8968 53.4585 li
58.1793 53.4574 li
58.1824 51.3048 li
58.8937 55.6112 mo
58.8906 57.7638 li
58.173 57.7628 li
58.1761 55.6101 li
58.8874 59.9165 mo
58.8843 62.0692 li
58.1667 62.0681 li
58.1699 59.9154 li
58.8812 64.2218 mo
58.878 66.3745 li
58.1605 66.3735 li
58.1636 64.2208 li
58.8749 68.5272 mo
58.8718 70.6798 li
58.1542 70.6788 li
58.1573 68.5261 li
58.8686 72.8325 mo
58.8655 74.9852 li
58.148 74.9841 li
58.1511 72.8315 li
58.8624 77.1378 mo
58.8593 79.2905 li
58.1417 79.2895 li
58.1448 77.1368 li
58.8561 81.4432 mo
58.854 82.8784 li
58.1365 82.8773 li
58.1386 81.4421 li
f
115.462 82.8814 mo
115.448 81.4463 li
116.165 81.4392 li
116.18 82.8743 li
f
ZUVFPK+TimesNewRomanPSMT*1 [8.61069 0 0 -8.61069 0 0 ]msf
113.374 93.2824 mo
(3)sh
115.527 102.969 mo
115.527 100.817 li
116.244 100.817 li
116.244 102.969 li
115.527 98.6641 mo
115.527 97.229 li
116.244 97.229 li
116.244 98.6641 li
f
grestore
grestore
pgrs
%%PageTrailer
[
[/CSA [/0 /1 ]]
[/CSD [/0 /1 ]]
] del_res
/ZUVFPK+TimesNewRomanPSMT*1 uf
/ZUVFPK+TimesNewRomanPSMT uf
/FAAAAA+TimesNewRomanPSMT uf
Adobe_AGM_Image/pt gx
Adobe_CoolType_Core/pt get exec
Adobe_AGM_Core/restore_mysetup gx
Adobe_AGM_Core/pt gx
currentdict Adobe_AGM_Utils eq {end} if
%%Trailer
Adobe_AGM_Utils begin
[/EMC pdfmark_5
currentdict Adobe_AGM_Utils eq {end} if
Adobe_AGM_Image/dt get exec
Adobe_CoolType_Core/dt get exec
Adobe_AGM_Core/dt get exec
%%Pages: 1
%%DocumentNeededResources: 
%%DocumentSuppliedResources: procset Adobe_AGM_Image 1.0 0
%%+ procset Adobe_CoolType_Utility_T42 1.0 0
%%+ procset Adobe_CoolType_Utility_MAKEOCF 1.23 0
%%+ procset Adobe_CoolType_Core 2.31 0
%%+ procset Adobe_AGM_Core 2.0 0
%%+ procset Adobe_AGM_Utils 1.0 0
%%DocumentNeededFeatures: 
%%DocumentSuppliedFeatures: 
%%DocumentCustomColors: 
%%CMYKCustomColor: 
%%RGBCustomColor: 
%%EOF
