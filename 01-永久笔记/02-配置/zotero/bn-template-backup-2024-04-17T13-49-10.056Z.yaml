-
    name: '[QuickInsertV2]'
    text: "<p>\n  <a href=\"${link}\">\n    ${linkText}\n  </a>\n</p>"
-
    name: '[QuickBackLinkV2]'
    text: "<p>\n  Referred in\n  <a href=\"${link}\">\n    ${linkText}\n  </a>\n</p>"
-
    name: '[QuickImportV2]'
    text: "<blockquote>\n${{\n  return await Zotero.BetterNotes.api.convert.link2html(link, {noteItem, dryRun: _env.dryRun});\n}}$\n</blockquote>"
-
    name: '[QuickNoteV5]'
    text: "${{\n  let res = \"\";\n  if (annotationItem.annotationComment) {\n    res += await Zotero.BetterNotes.api.convert.md2html(\n      annotationItem.annotationComment\n    );\n  }\n  res += await Zotero.BetterNotes.api.convert.annotations2html([annotationItem], {noteItem, ignoreComment: true});\n  return res;\n}}$"
-
    name: '[ExportMDFileNameV2]'
    text: '${(noteItem.getNoteTitle ? noteItem.getNoteTitle().replace(/[/\\?%*:|"<> ]/g, "-") + "-" : "")}${noteItem.key}.md'
-
    name: '[ExportMDFileHeaderV2]'
    text: "${{\n  let header = {};\n  header.tags = noteItem.getTags().map((_t) => _t.tag);\n  header.parent = noteItem.parentItem\n    ? noteItem.parentItem.getField(\"title\")\n    : \"\";\n  header.collections = (\n    await Zotero.Collections.getCollectionsContainingItems([\n      (noteItem.parentItem || noteItem).id,\n    ])\n  ).map((c) => c.name);\n  return JSON.stringify(header);\n}}$"
-
    name: '[ExportMDFileContent]'
    text: "${{\n  return mdContent;\n}}$"
-
    name: '[Item] item-notes with metadata'
    text: "<h1>${topItem.getField(\"title\")}</h1>\r\n\r\n<p> TitleTranslation: ${topItem.getField('titleTranslation')}</p>\r\n<p> Journal or Conference:${topItem.getField('publicationTitle')}\r\n${topItem.getField('conferenceName')}  ${topItem.getField('university')}</p>\r\n<p> Authors: ${topItem.getCreators().map((v)=>v.firstName+\" \"+v.lastName).join(\"; \")}\r\n    </p>\r\n<p> \r\n\r\n            Pub. date \r\n\r\n            ${topItem.getField('date')}\r\n        \r\n   </p>\r\n<p> \r\n       \r\n            DOI \r\n       \r\n            <a href=\"https://doi.org/${topItem.getField('DOI')}\">${topItem.getField('DOI')}</a>\r\n        \r\n    </p>\r\n\r\n<p>\r\n      标签：#${topItem.getTags().map(tagObj => tagObj.tag).join(', #')}\r\n    </p>\r\n\r\n\r\n<p>  zoterolink:\r\n  <a href=\"${{\r\n  async function getPDFLink(item) {\r\n  \tconst att = await item.getBestAttachment();\r\n  \tif (!att || !att.isPDFAttachment()) {\r\n  \treturn \"\";\r\n  \t}\r\n  \tkey = att.key;\r\n  \tif (att.libraryID === 1) {\r\n  \treturn `zotero://open-pdf/library/items/${key}`;\r\n  \t} else {\r\n  \tgroupID = Zotero.Libraries.get(att.libraryID).id;\r\n  \treturn `zotero://open-pdf/groups/${groupID}/items/${key}`;\r\n  \t}\r\n  }\r\n  sharedObj.getPDFLink = getPDFLink;\r\n  return await getPDFLink(topItem);\r\n  }}$\">\r\n  zotero\r\n  </a></p>\r\n\r\n<h1>摘要</h1>\r\n<p>  ${topItem.getField('abstractTranslation')}</p>\r\n\r\n\r\n\r\n<hr />\r\n<h1>笔记</h1>\r\n<h2>1 论文创新在于</h2>\r\n<h2>2 解决了什么问题</h2>\r\n<h2>3 方法</h2>\r\n<h2>4 不足&可继续研究</h2>\r\n<h2>5 可参考</h2>\r\n<h2>6 思考</h2>\r\n\r\n<hr />\r\n\r\n\r\n"
-
    name: '[Item] collect annotations by color'
    text: "${{\r\n    async function getAnnotationsByColor(item, colorFilter) {\r\n      const annots = item.getAnnotations().filter(colorFilter);\r\n  \treturn await Zotero.BetterNotes.api.convert.annotations2html(annots, { noteItem: targetNoteItem });\r\n    }\r\n  \r\n    const attachments = Zotero.Items.get(topItem.getAttachments()).filter((i) =>\r\n      i.isPDFAttachment()\r\n    );\r\n    let res = \"\";\r\n\tconst headname = \"注释笔记-颜色\";\r\n    const colors = [\"#ffd400\",\"#ff6666\", \"#5fb236\", \"#2ea8e5\", \"#a28ae5\", \"#e56eee\",\"#f19837\",\"#aaaaaa\",\"#b15928\"];\r\n\tconst colorNames = [\"问题\",\"贡献\", \"模型\", \"背景\", \"算法\", \"参考\",\"方法/实验\",\"不足\",\"学习\"];    \r\n\tfor (let attachment of attachments) {\r\n      res += `<h1>${headname}</h1>`;\r\n\t  res += `<h1>${topItem.getField('title')}</h1>`;\r\n      for (let i in colors) {\r\n        const renderedAnnotations = (\r\n          await getAnnotationsByColor(\r\n            attachment,\r\n            (annot) => annot.annotationColor === colors[i]\r\n          )\r\n        );\r\n        if (renderedAnnotations) {\r\n          res += `<h2><p style=\"background-color:${colors[i]};\">${colorNames[i]} Annotations</p></h2>\\n${renderedAnnotations}`;\r\n        }\r\n      }\r\n      const renderedAnnotations = (\r\n        await getAnnotationsByColor(\r\n          attachment,\r\n          (annot) => !colors.includes(annot.annotationColor)\r\n        )\r\n      );\r\n      if (renderedAnnotations) {\r\n        res += `<h2><p>Other Annotations</p></h2>\\n${renderedAnnotations}`;\r\n      }\r\n    }\r\n    return res;\r\n}}$"
-
    name: '[Item] collect annotations by tag'
    text: "  ${{\r\n  \tconst tagRaw = Zotero.getMainWindow().prompt(\"Please input tags. Split with ',':\", \"\");\r\n  \tsharedObj.tags = tagRaw.split(',').filter(t => t.length);\r\n  \treturn \"\";\r\n  }}$\r\n\r\n  ${{\r\n  \tasync function getAnnotationsByTag(item, tag) {\r\n  \t\tlet annots = item.getAnnotations();\r\n  \t\tannots = tag.length ?\r\n  \t\t\tannots.filter((annot) => annot.getTags().map(tagObj => tagObj.tag).includes(tag)) :\r\n  \t\t\tannots;\r\n  \t\treturn await Zotero.BetterNotes.api.convert.annotations2html(annots, { noteItem: targetNoteItem });\r\n  \t}\r\n  \tif (!sharedObj.tags.length) {\r\n  \t\treturn \"\";\r\n  \t}\r\n  \tconst attachments = Zotero.Items.get(topItem.getAttachments()).filter((i) =>\r\n  \t\ti.isPDFAttachment()\r\n  \t);\r\n  \tlet res = \"\";\r\n\tconst headname = \"注释笔记-标签\";\r\n  \tres += `<h1>${headname}</h1>`;\r\n\tres += `<h1>${topItem.getField('title')}</h1>`;\r\n  \tfor (let attachment of attachments) {\r\n  \t\t\r\n  \t\tfor (const tag of sharedObj.tags) {\r\n  \t\t\tres += `<h2>Tag: ${tag}</h2>`;\r\n  \t\t\tconst annots = (await getAnnotationsByTag(attachment, tag));\r\n  \t\t\tres += annots ? annots : \"<p>No result</p>\";\r\n  \t\t}\r\n  \t}\r\n  \tres += `<h2>Notes</h2>`;\r\n  \tconst notes = itemNotes.filter(noteItem => {\r\n  \t\tfor (const tag of sharedObj.tags) {\r\n  \t\t\tif (noteItem.getTags().map(tagObj => tagObj.tag).includes(tag)) {\r\n  \t\t\t\treturn true;\r\n  \t\t\t}\r\n  \t\t}\r\n  \t\treturn false;\r\n  \t});\r\n  \tconst notesWithTags = `${notes.map((noteItem) => {\r\n  \t\tconst noteLink = Zotero.BetterNotes.api.convert.note2link(noteItem);\r\n  \t\tconst noteLine = `<p style=\"color:red; background-color: #efe3da;\">📜 Article Note:  <a href=\"${\r\n  \t\t\t\tnoteLink\r\n  \t\t\t}\">${noteItem.getNoteTitle() || noteLink}</a></p>\r\n  <p>tags: ${noteItem.getTags().map(tagObj => tagObj.tag).join(', ')}</p>\r\n  <p> </p>`;\r\n  \t\treturn noteLine;\r\n  \t}).join(\"\\n\")}`\r\n  \tres += notesWithTags || '<p>No result</p>'\r\n  \treturn res;\r\n  }}$\r\n  // @default-end"
